{"test_class": {"identifier": "CyclicNumberAxisTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/CyclicNumberAxisTests.java"}, "test_case": {"identifier": "testCloning", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testCloning() {\n        CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, \"Test\");\n        CyclicNumberAxis a2 = null;\n        try {\n            a2 = (CyclicNumberAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }", "signature": "void testCloning()", "full_signature": "public void testCloning()", "class_method_signature": "CyclicNumberAxisTests.testCloning()", "testcase": true, "constructor": false, "invocations": ["clone", "println", "assertTrue", "assertTrue", "getClass", "getClass", "assertTrue", "equals"]}, "focal_class": {"identifier": "CyclicNumberAxis", "superclass": "extends NumberAxis", "interfaces": "", "fields": [{"original_string": "static final long serialVersionUID = -7514160997164582554L;", "modifier": "static final", "type": "long", "declarator": "serialVersionUID = -7514160997164582554L", "var_name": "serialVersionUID"}, {"original_string": "public static Stroke DEFAULT_ADVANCE_LINE_STROKE = new BasicStroke(1.0f);", "modifier": "public static", "type": "Stroke", "declarator": "DEFAULT_ADVANCE_LINE_STROKE = new BasicStroke(1.0f)", "var_name": "DEFAULT_ADVANCE_LINE_STROKE"}, {"original_string": "public static final Paint DEFAULT_ADVANCE_LINE_PAINT = Color.gray;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_ADVANCE_LINE_PAINT = Color.gray", "var_name": "DEFAULT_ADVANCE_LINE_PAINT"}, {"original_string": "protected double offset;", "modifier": "protected", "type": "double", "declarator": "offset", "var_name": "offset"}, {"original_string": "protected double period;", "modifier": "protected", "type": "double", "declarator": "period", "var_name": "period"}, {"original_string": "protected boolean boundMappedToLastCycle;", "modifier": "protected", "type": "boolean", "declarator": "boundMappedToLastCycle", "var_name": "boundMappedToLastCycle"}, {"original_string": "protected boolean advanceLineVisible;", "modifier": "protected", "type": "boolean", "declarator": "advanceLineVisible", "var_name": "advanceLineVisible"}, {"original_string": "protected transient Stroke advanceLineStroke = DEFAULT_ADVANCE_LINE_STROKE;", "modifier": "protected transient", "type": "Stroke", "declarator": "advanceLineStroke = DEFAULT_ADVANCE_LINE_STROKE", "var_name": "advanceLineStroke"}, {"original_string": "protected transient Paint advanceLinePaint;", "modifier": "protected transient", "type": "Paint", "declarator": "advanceLinePaint", "var_name": "advanceLinePaint"}, {"original_string": "private transient boolean internalMarkerWhenTicksOverlap;", "modifier": "private transient", "type": "boolean", "declarator": "internalMarkerWhenTicksOverlap", "var_name": "internalMarkerWhenTicksOverlap"}, {"original_string": "private transient Tick internalMarkerCycleBoundTick;", "modifier": "private transient", "type": "Tick", "declarator": "internalMarkerCycleBoundTick", "var_name": "internalMarkerCycleBoundTick"}], "methods": [{"identifier": "CyclicNumberAxis", "parameters": "(double period)", "modifiers": "public", "return": "", "signature": " CyclicNumberAxis(double period)", "full_signature": "public  CyclicNumberAxis(double period)", "class_method_signature": "CyclicNumberAxis.CyclicNumberAxis(double period)", "testcase": false, "constructor": true}, {"identifier": "CyclicNumberAxis", "parameters": "(double period, double offset)", "modifiers": "public", "return": "", "signature": " CyclicNumberAxis(double period, double offset)", "full_signature": "public  CyclicNumberAxis(double period, double offset)", "class_method_signature": "CyclicNumberAxis.CyclicNumberAxis(double period, double offset)", "testcase": false, "constructor": true}, {"identifier": "CyclicNumberAxis", "parameters": "(double period, String label)", "modifiers": "public", "return": "", "signature": " CyclicNumberAxis(double period, String label)", "full_signature": "public  CyclicNumberAxis(double period, String label)", "class_method_signature": "CyclicNumberAxis.CyclicNumberAxis(double period, String label)", "testcase": false, "constructor": true}, {"identifier": "CyclicNumberAxis", "parameters": "(double period, double offset, String label)", "modifiers": "public", "return": "", "signature": " CyclicNumberAxis(double period, double offset, String label)", "full_signature": "public  CyclicNumberAxis(double period, double offset, String label)", "class_method_signature": "CyclicNumberAxis.CyclicNumberAxis(double period, double offset, String label)", "testcase": false, "constructor": true}, {"identifier": "isAdvanceLineVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAdvanceLineVisible()", "full_signature": "public boolean isAdvanceLineVisible()", "class_method_signature": "CyclicNumberAxis.isAdvanceLineVisible()", "testcase": false, "constructor": false}, {"identifier": "setAdvanceLineVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setAdvanceLineVisible(boolean visible)", "full_signature": "public void setAdvanceLineVisible(boolean visible)", "class_method_signature": "CyclicNumberAxis.setAdvanceLineVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getAdvanceLinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getAdvanceLinePaint()", "full_signature": "public Paint getAdvanceLinePaint()", "class_method_signature": "CyclicNumberAxis.getAdvanceLinePaint()", "testcase": false, "constructor": false}, {"identifier": "setAdvanceLinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setAdvanceLinePaint(Paint paint)", "full_signature": "public void setAdvanceLinePaint(Paint paint)", "class_method_signature": "CyclicNumberAxis.setAdvanceLinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getAdvanceLineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getAdvanceLineStroke()", "full_signature": "public Stroke getAdvanceLineStroke()", "class_method_signature": "CyclicNumberAxis.getAdvanceLineStroke()", "testcase": false, "constructor": false}, {"identifier": "setAdvanceLineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setAdvanceLineStroke(Stroke stroke)", "full_signature": "public void setAdvanceLineStroke(Stroke stroke)", "class_method_signature": "CyclicNumberAxis.setAdvanceLineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "isBoundMappedToLastCycle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBoundMappedToLastCycle()", "full_signature": "public boolean isBoundMappedToLastCycle()", "class_method_signature": "CyclicNumberAxis.isBoundMappedToLastCycle()", "testcase": false, "constructor": false}, {"identifier": "setBoundMappedToLastCycle", "parameters": "(boolean boundMappedToLastCycle)", "modifiers": "public", "return": "void", "signature": "void setBoundMappedToLastCycle(boolean boundMappedToLastCycle)", "full_signature": "public void setBoundMappedToLastCycle(boolean boundMappedToLastCycle)", "class_method_signature": "CyclicNumberAxis.setBoundMappedToLastCycle(boolean boundMappedToLastCycle)", "testcase": false, "constructor": false}, {"identifier": "selectHorizontalAutoTickUnit", "parameters": "(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectHorizontalAutoTickUnit(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "full_signature": "protected void selectHorizontalAutoTickUnit(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.selectHorizontalAutoTickUnit(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectVerticalAutoTickUnit", "parameters": "(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectVerticalAutoTickUnit(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "full_signature": "protected void selectVerticalAutoTickUnit(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.selectVerticalAutoTickUnit(Graphics2D g2,\n                                                Rectangle2D drawArea,\n                                                Rectangle2D dataArea,\n                                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "calculateAnchorPoint", "parameters": "(ValueTick tick, double cursor,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge)", "modifiers": "protected", "return": "float[]", "signature": "float[] calculateAnchorPoint(ValueTick tick, double cursor,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge)", "full_signature": "protected float[] calculateAnchorPoint(ValueTick tick, double cursor,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.calculateAnchorPoint(ValueTick tick, double cursor,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksHorizontal", "parameters": "(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "full_signature": "protected List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshVerticalTicks", "parameters": "(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshVerticalTicks(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "full_signature": "protected List refreshVerticalTicks(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.refreshVerticalTicks(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "java2DToValue", "parameters": "(double java2DValue, Rectangle2D dataArea,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double java2DToValue(double java2DValue, Rectangle2D dataArea,\n                                RectangleEdge edge)", "full_signature": "public double java2DToValue(double java2DValue, Rectangle2D dataArea,\n                                RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.java2DToValue(double java2DValue, Rectangle2D dataArea,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "valueToJava2D", "parameters": "(double value, Rectangle2D dataArea,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double valueToJava2D(double value, Rectangle2D dataArea,\n                                RectangleEdge edge)", "full_signature": "public double valueToJava2D(double value, Rectangle2D dataArea,\n                                RectangleEdge edge)", "class_method_signature": "CyclicNumberAxis.valueToJava2D(double value, Rectangle2D dataArea,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "centerRange", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void centerRange(double value)", "full_signature": "public void centerRange(double value)", "class_method_signature": "CyclicNumberAxis.centerRange(double value)", "testcase": false, "constructor": false}, {"identifier": "setAutoRangeMinimumSize", "parameters": "(double size, boolean notify)", "modifiers": "public", "return": "void", "signature": "void setAutoRangeMinimumSize(double size, boolean notify)", "full_signature": "public void setAutoRangeMinimumSize(double size, boolean notify)", "class_method_signature": "CyclicNumberAxis.setAutoRangeMinimumSize(double size, boolean notify)", "testcase": false, "constructor": false}, {"identifier": "setFixedAutoRange", "parameters": "(double length)", "modifiers": "public", "return": "void", "signature": "void setFixedAutoRange(double length)", "full_signature": "public void setFixedAutoRange(double length)", "class_method_signature": "CyclicNumberAxis.setFixedAutoRange(double length)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "modifiers": "public", "return": "void", "signature": "void setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "full_signature": "public void setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "class_method_signature": "CyclicNumberAxis.setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "testcase": false, "constructor": false}, {"identifier": "getCycleBound", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCycleBound()", "full_signature": "public double getCycleBound()", "class_method_signature": "CyclicNumberAxis.getCycleBound()", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getOffset()", "full_signature": "public double getOffset()", "class_method_signature": "CyclicNumberAxis.getOffset()", "testcase": false, "constructor": false}, {"identifier": "setOffset", "parameters": "(double offset)", "modifiers": "public", "return": "void", "signature": "void setOffset(double offset)", "full_signature": "public void setOffset(double offset)", "class_method_signature": "CyclicNumberAxis.setOffset(double offset)", "testcase": false, "constructor": false}, {"identifier": "getPeriod", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPeriod()", "full_signature": "public double getPeriod()", "class_method_signature": "CyclicNumberAxis.getPeriod()", "testcase": false, "constructor": false}, {"identifier": "setPeriod", "parameters": "(double period)", "modifiers": "public", "return": "void", "signature": "void setPeriod(double period)", "full_signature": "public void setPeriod(double period)", "class_method_signature": "CyclicNumberAxis.setPeriod(double period)", "testcase": false, "constructor": false}, {"identifier": "drawTickMarksAndLabels", "parameters": "(Graphics2D g2, double cursor,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo info)", "modifiers": "protected", "return": "AxisState", "signature": "AxisState drawTickMarksAndLabels(Graphics2D g2, double cursor,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo info)", "full_signature": "protected AxisState drawTickMarksAndLabels(Graphics2D g2, double cursor,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo info)", "class_method_signature": "CyclicNumberAxis.drawTickMarksAndLabels(Graphics2D g2, double cursor,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "modifiers": "public", "return": "AxisState", "signature": "AxisState draw(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "full_signature": "public AxisState draw(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "class_method_signature": "CyclicNumberAxis.draw(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "reserveSpace", "parameters": "(Graphics2D g2,\n                                  Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge,\n                                  AxisSpace space)", "modifiers": "public", "return": "AxisSpace", "signature": "AxisSpace reserveSpace(Graphics2D g2,\n                                  Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge,\n                                  AxisSpace space)", "full_signature": "public AxisSpace reserveSpace(Graphics2D g2,\n                                  Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge,\n                                  AxisSpace space)", "class_method_signature": "CyclicNumberAxis.reserveSpace(Graphics2D g2,\n                                  Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge,\n                                  AxisSpace space)", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "CyclicNumberAxis.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "CyclicNumberAxis.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CyclicNumberAxis.equals(Object obj)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/CyclicNumberAxis.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.advanceLineStroke,\n                that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CyclicNumberAxis.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}