{"test_class": {"identifier": "XYDifferenceRendererTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.java"}, "test_case": {"identifier": "testHashcode", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testHashcode() {\n        XYDifferenceRenderer r1\n            = new XYDifferenceRenderer(Color.red, Color.blue, false);\n        XYDifferenceRenderer r2\n            = new XYDifferenceRenderer(Color.red, Color.blue, false);\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }", "signature": "void testHashcode()", "full_signature": "public void testHashcode()", "class_method_signature": "XYDifferenceRendererTests.testHashcode()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "hashCode", "hashCode", "assertEquals"]}, "focal_class": {"identifier": "XYDifferenceRenderer", "superclass": "extends AbstractXYItemRenderer", "interfaces": "implements XYItemRenderer, PublicCloneable", "fields": [{"original_string": "private static final long serialVersionUID = -8447915602375584857L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8447915602375584857L", "var_name": "serialVersionUID"}, {"original_string": "private transient Paint positivePaint;", "modifier": "private transient", "type": "Paint", "declarator": "positivePaint", "var_name": "positivePaint"}, {"original_string": "private transient Paint negativePaint;", "modifier": "private transient", "type": "Paint", "declarator": "negativePaint", "var_name": "negativePaint"}, {"original_string": "private boolean shapesVisible;", "modifier": "private", "type": "boolean", "declarator": "shapesVisible", "var_name": "shapesVisible"}, {"original_string": "private transient Shape legendLine;", "modifier": "private transient", "type": "Shape", "declarator": "legendLine", "var_name": "legendLine"}, {"original_string": "private boolean roundXCoordinates;", "modifier": "private", "type": "boolean", "declarator": "roundXCoordinates", "var_name": "roundXCoordinates"}], "methods": [{"identifier": "XYDifferenceRenderer", "parameters": "()", "modifiers": "public", "return": "", "signature": " XYDifferenceRenderer()", "full_signature": "public  XYDifferenceRenderer()", "class_method_signature": "XYDifferenceRenderer.XYDifferenceRenderer()", "testcase": false, "constructor": true}, {"identifier": "XYDifferenceRenderer", "parameters": "(Paint positivePaint, Paint negativePaint,\n                                boolean shapes)", "modifiers": "public", "return": "", "signature": " XYDifferenceRenderer(Paint positivePaint, Paint negativePaint,\n                                boolean shapes)", "full_signature": "public  XYDifferenceRenderer(Paint positivePaint, Paint negativePaint,\n                                boolean shapes)", "class_method_signature": "XYDifferenceRenderer.XYDifferenceRenderer(Paint positivePaint, Paint negativePaint,\n                                boolean shapes)", "testcase": false, "constructor": true}, {"identifier": "getPositivePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getPositivePaint()", "full_signature": "public Paint getPositivePaint()", "class_method_signature": "XYDifferenceRenderer.getPositivePaint()", "testcase": false, "constructor": false}, {"identifier": "setPositivePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setPositivePaint(Paint paint)", "full_signature": "public void setPositivePaint(Paint paint)", "class_method_signature": "XYDifferenceRenderer.setPositivePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getNegativePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getNegativePaint()", "full_signature": "public Paint getNegativePaint()", "class_method_signature": "XYDifferenceRenderer.getNegativePaint()", "testcase": false, "constructor": false}, {"identifier": "setNegativePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setNegativePaint(Paint paint)", "full_signature": "public void setNegativePaint(Paint paint)", "class_method_signature": "XYDifferenceRenderer.setNegativePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getShapesVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getShapesVisible()", "full_signature": "public boolean getShapesVisible()", "class_method_signature": "XYDifferenceRenderer.getShapesVisible()", "testcase": false, "constructor": false}, {"identifier": "setShapesVisible", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setShapesVisible(boolean flag)", "full_signature": "public void setShapesVisible(boolean flag)", "class_method_signature": "XYDifferenceRenderer.setShapesVisible(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getLegendLine", "parameters": "()", "modifiers": "public", "return": "Shape", "signature": "Shape getLegendLine()", "full_signature": "public Shape getLegendLine()", "class_method_signature": "XYDifferenceRenderer.getLegendLine()", "testcase": false, "constructor": false}, {"identifier": "setLegendLine", "parameters": "(Shape line)", "modifiers": "public", "return": "void", "signature": "void setLegendLine(Shape line)", "full_signature": "public void setLegendLine(Shape line)", "class_method_signature": "XYDifferenceRenderer.setLegendLine(Shape line)", "testcase": false, "constructor": false}, {"identifier": "getRoundXCoordinates", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getRoundXCoordinates()", "full_signature": "public boolean getRoundXCoordinates()", "class_method_signature": "XYDifferenceRenderer.getRoundXCoordinates()", "testcase": false, "constructor": false}, {"identifier": "setRoundXCoordinates", "parameters": "(boolean round)", "modifiers": "public", "return": "void", "signature": "void setRoundXCoordinates(boolean round)", "full_signature": "public void setRoundXCoordinates(boolean round)", "class_method_signature": "XYDifferenceRenderer.setRoundXCoordinates(boolean round)", "testcase": false, "constructor": false}, {"identifier": "initialise", "parameters": "(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          XYPlot plot,\n                                          XYDataset data,\n                                          PlotRenderingInfo info)", "modifiers": "public", "return": "XYItemRendererState", "signature": "XYItemRendererState initialise(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          XYPlot plot,\n                                          XYDataset data,\n                                          PlotRenderingInfo info)", "full_signature": "public XYItemRendererState initialise(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          XYPlot plot,\n                                          XYDataset data,\n                                          PlotRenderingInfo info)", "class_method_signature": "XYDifferenceRenderer.initialise(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          XYPlot plot,\n                                          XYDataset data,\n                                          PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "getPassCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPassCount()", "full_signature": "public int getPassCount()", "class_method_signature": "XYDifferenceRenderer.getPassCount()", "testcase": false, "constructor": false}, {"identifier": "drawItem", "parameters": "(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series, int item,\n            boolean selected, int pass)", "modifiers": "public", "return": "void", "signature": "void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series, int item,\n            boolean selected, int pass)", "full_signature": "public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series, int item,\n            boolean selected, int pass)", "class_method_signature": "XYDifferenceRenderer.drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis,\n            ValueAxis rangeAxis, XYDataset dataset, int series, int item,\n            boolean selected, int pass)", "testcase": false, "constructor": false}, {"identifier": "drawItemPass0", "parameters": "(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea,\n            XYPlot x_plot, ValueAxis x_domainAxis, ValueAxis x_rangeAxis,\n            XYDataset x_dataset, int x_series, int x_item, boolean selected)", "modifiers": "protected", "return": "void", "signature": "void drawItemPass0(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea,\n            XYPlot x_plot, ValueAxis x_domainAxis, ValueAxis x_rangeAxis,\n            XYDataset x_dataset, int x_series, int x_item, boolean selected)", "full_signature": "protected void drawItemPass0(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea,\n            XYPlot x_plot, ValueAxis x_domainAxis, ValueAxis x_rangeAxis,\n            XYDataset x_dataset, int x_series, int x_item, boolean selected)", "class_method_signature": "XYDifferenceRenderer.drawItemPass0(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea,\n            XYPlot x_plot, ValueAxis x_domainAxis, ValueAxis x_rangeAxis,\n            XYDataset x_dataset, int x_series, int x_item, boolean selected)", "testcase": false, "constructor": false}, {"identifier": "drawItemPass1", "parameters": "(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea, XYPlot x_plot,\n            ValueAxis x_domainAxis, ValueAxis x_rangeAxis, XYDataset x_dataset,\n            int x_series, int x_item, boolean selected)", "modifiers": "protected", "return": "void", "signature": "void drawItemPass1(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea, XYPlot x_plot,\n            ValueAxis x_domainAxis, ValueAxis x_rangeAxis, XYDataset x_dataset,\n            int x_series, int x_item, boolean selected)", "full_signature": "protected void drawItemPass1(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea, XYPlot x_plot,\n            ValueAxis x_domainAxis, ValueAxis x_rangeAxis, XYDataset x_dataset,\n            int x_series, int x_item, boolean selected)", "class_method_signature": "XYDifferenceRenderer.drawItemPass1(Graphics2D x_graphics, \n            XYItemRendererState state, Rectangle2D x_dataArea, XYPlot x_plot,\n            ValueAxis x_domainAxis, ValueAxis x_rangeAxis, XYDataset x_dataset,\n            int x_series, int x_item, boolean selected)", "testcase": false, "constructor": false}, {"identifier": "isEitherSeriesDegenerate", "parameters": "(XYDataset x_dataset,\n            boolean x_impliedZeroSubtrahend)", "modifiers": "private", "return": "boolean", "signature": "boolean isEitherSeriesDegenerate(XYDataset x_dataset,\n            boolean x_impliedZeroSubtrahend)", "full_signature": "private boolean isEitherSeriesDegenerate(XYDataset x_dataset,\n            boolean x_impliedZeroSubtrahend)", "class_method_signature": "XYDifferenceRenderer.isEitherSeriesDegenerate(XYDataset x_dataset,\n            boolean x_impliedZeroSubtrahend)", "testcase": false, "constructor": false}, {"identifier": "areSeriesDisjoint", "parameters": "(XYDataset x_dataset)", "modifiers": "private", "return": "boolean", "signature": "boolean areSeriesDisjoint(XYDataset x_dataset)", "full_signature": "private boolean areSeriesDisjoint(XYDataset x_dataset)", "class_method_signature": "XYDifferenceRenderer.areSeriesDisjoint(XYDataset x_dataset)", "testcase": false, "constructor": false}, {"identifier": "createPolygon", "parameters": "(Graphics2D x_graphics,\n                                Rectangle2D x_dataArea,\n                                XYPlot x_plot,\n                                ValueAxis x_domainAxis,\n                                ValueAxis x_rangeAxis,\n                                boolean x_positive,\n                                LinkedList x_xValues,\n                                LinkedList x_yValues)", "modifiers": "private", "return": "void", "signature": "void createPolygon(Graphics2D x_graphics,\n                                Rectangle2D x_dataArea,\n                                XYPlot x_plot,\n                                ValueAxis x_domainAxis,\n                                ValueAxis x_rangeAxis,\n                                boolean x_positive,\n                                LinkedList x_xValues,\n                                LinkedList x_yValues)", "full_signature": "private void createPolygon(Graphics2D x_graphics,\n                                Rectangle2D x_dataArea,\n                                XYPlot x_plot,\n                                ValueAxis x_domainAxis,\n                                ValueAxis x_rangeAxis,\n                                boolean x_positive,\n                                LinkedList x_xValues,\n                                LinkedList x_yValues)", "class_method_signature": "XYDifferenceRenderer.createPolygon(Graphics2D x_graphics,\n                                Rectangle2D x_dataArea,\n                                XYPlot x_plot,\n                                ValueAxis x_domainAxis,\n                                ValueAxis x_rangeAxis,\n                                boolean x_positive,\n                                LinkedList x_xValues,\n                                LinkedList x_yValues)", "testcase": false, "constructor": false}, {"identifier": "getLegendItem", "parameters": "(int datasetIndex, int series)", "modifiers": "public", "return": "LegendItem", "signature": "LegendItem getLegendItem(int datasetIndex, int series)", "full_signature": "public LegendItem getLegendItem(int datasetIndex, int series)", "class_method_signature": "XYDifferenceRenderer.getLegendItem(int datasetIndex, int series)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "XYDifferenceRenderer.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "XYDifferenceRenderer.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "XYDifferenceRenderer.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "XYDifferenceRenderer.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof XYDifferenceRenderer)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        XYDifferenceRenderer that = (XYDifferenceRenderer) obj;\n        if (!PaintUtilities.equal(this.positivePaint, that.positivePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.negativePaint, that.negativePaint)) {\n            return false;\n        }\n        if (this.shapesVisible != that.shapesVisible) {\n            return false;\n        }\n        if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {\n            return false;\n        }\n        if (this.roundXCoordinates != that.roundXCoordinates) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "XYDifferenceRenderer.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}