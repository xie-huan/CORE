{"test_class": {"identifier": "BlockBorderTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/block/junit/BlockBorderTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        BlockBorder b1 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0,\n                4.0), Color.red);\n        BlockBorder b2 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0,\n                4.0), Color.red);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n\n        // insets\n        b1 = new BlockBorder(new RectangleInsets(UnitType.RELATIVE, 1.0, 2.0,\n                3.0, 4.0), Color.red);\n        assertFalse(b1.equals(b2));\n        b2 = new BlockBorder(new RectangleInsets(UnitType.RELATIVE, 1.0, 2.0,\n                3.0, 4.0), Color.red);\n        assertTrue(b1.equals(b2));\n\n        // paint\n        b1 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, 4.0),\n                Color.blue);\n        assertFalse(b1.equals(b2));\n        b2 = new BlockBorder(new RectangleInsets(1.0, 2.0, 3.0, 4.0),\n                Color.blue);\n        assertTrue(b1.equals(b2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "BlockBorderTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "BlockBorder", "superclass": "", "interfaces": "implements BlockFrame, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 4961579220410228283L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4961579220410228283L", "var_name": "serialVersionUID"}, {"original_string": "public static final BlockBorder NONE = new BlockBorder(\n            RectangleInsets.ZERO_INSETS, Color.white);", "modifier": "public static final", "type": "BlockBorder", "declarator": "NONE = new BlockBorder(\n            RectangleInsets.ZERO_INSETS, Color.white)", "var_name": "NONE"}, {"original_string": "private RectangleInsets insets;", "modifier": "private", "type": "RectangleInsets", "declarator": "insets", "var_name": "insets"}, {"original_string": "private transient Paint paint;", "modifier": "private transient", "type": "Paint", "declarator": "paint", "var_name": "paint"}], "methods": [{"identifier": "BlockBorder", "parameters": "()", "modifiers": "public", "return": "", "signature": " BlockBorder()", "full_signature": "public  BlockBorder()", "class_method_signature": "BlockBorder.BlockBorder()", "testcase": false, "constructor": true}, {"identifier": "BlockBorder", "parameters": "(Paint paint)", "modifiers": "public", "return": "", "signature": " BlockBorder(Paint paint)", "full_signature": "public  BlockBorder(Paint paint)", "class_method_signature": "BlockBorder.BlockBorder(Paint paint)", "testcase": false, "constructor": true}, {"identifier": "BlockBorder", "parameters": "(double top, double left, double bottom, double right)", "modifiers": "public", "return": "", "signature": " BlockBorder(double top, double left, double bottom, double right)", "full_signature": "public  BlockBorder(double top, double left, double bottom, double right)", "class_method_signature": "BlockBorder.BlockBorder(double top, double left, double bottom, double right)", "testcase": false, "constructor": true}, {"identifier": "BlockBorder", "parameters": "(double top, double left, double bottom, double right,\n                       Paint paint)", "modifiers": "public", "return": "", "signature": " BlockBorder(double top, double left, double bottom, double right,\n                       Paint paint)", "full_signature": "public  BlockBorder(double top, double left, double bottom, double right,\n                       Paint paint)", "class_method_signature": "BlockBorder.BlockBorder(double top, double left, double bottom, double right,\n                       Paint paint)", "testcase": false, "constructor": true}, {"identifier": "BlockBorder", "parameters": "(RectangleInsets insets, Paint paint)", "modifiers": "public", "return": "", "signature": " BlockBorder(RectangleInsets insets, Paint paint)", "full_signature": "public  BlockBorder(RectangleInsets insets, Paint paint)", "class_method_signature": "BlockBorder.BlockBorder(RectangleInsets insets, Paint paint)", "testcase": false, "constructor": true}, {"identifier": "getInsets", "parameters": "()", "modifiers": "public", "return": "RectangleInsets", "signature": "RectangleInsets getInsets()", "full_signature": "public RectangleInsets getInsets()", "class_method_signature": "BlockBorder.getInsets()", "testcase": false, "constructor": false}, {"identifier": "getPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getPaint()", "full_signature": "public Paint getPaint()", "class_method_signature": "BlockBorder.getPaint()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area)", "class_method_signature": "BlockBorder.draw(Graphics2D g2, Rectangle2D area)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "BlockBorder.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "BlockBorder.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "BlockBorder.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/block/BlockBorder.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof BlockBorder)) {\n            return false;\n        }\n        BlockBorder that = (BlockBorder) obj;\n        if (!this.insets.equals(that.insets)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.paint, that.paint)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "BlockBorder.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}