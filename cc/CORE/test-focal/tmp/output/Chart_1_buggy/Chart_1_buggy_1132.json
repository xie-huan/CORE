{"test_class": {"identifier": "StatisticsTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "static final double EPSILON = 0.0000000001;", "modifier": "static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/statistics/junit/StatisticsTests.java"}, "test_case": {"identifier": "testGetStdDev", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testGetStdDev() {\n\n        // try null argument\n        boolean pass = false;\n        try {\n            Statistics.getStdDev(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // try zero length array\n        pass = false;\n        try {\n            Statistics.getStdDev(new Double[0]);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        // try single value\n        assertTrue(Double.isNaN(Statistics.getStdDev(new Double[]\n                {new Double(1.0)})));\n    }", "signature": "void testGetStdDev()", "full_signature": "public void testGetStdDev()", "class_method_signature": "StatisticsTests.testGetStdDev()", "testcase": true, "constructor": false, "invocations": ["getStdDev", "assertTrue", "getStdDev", "assertTrue", "assertTrue", "isNaN", "getStdDev"]}, "focal_class": {"identifier": "Statistics", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculateMean", "parameters": "(Number[] values)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Number[] values)", "full_signature": "public static double calculateMean(Number[] values)", "class_method_signature": "Statistics.calculateMean(Number[] values)", "testcase": false, "constructor": false}, {"identifier": "calculateMean", "parameters": "(Number[] values,\n            boolean includeNullAndNaN)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Number[] values,\n            boolean includeNullAndNaN)", "full_signature": "public static double calculateMean(Number[] values,\n            boolean includeNullAndNaN)", "class_method_signature": "Statistics.calculateMean(Number[] values,\n            boolean includeNullAndNaN)", "testcase": false, "constructor": false}, {"identifier": "calculateMean", "parameters": "(Collection values)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Collection values)", "full_signature": "public static double calculateMean(Collection values)", "class_method_signature": "Statistics.calculateMean(Collection values)", "testcase": false, "constructor": false}, {"identifier": "calculateMean", "parameters": "(Collection values,\n            boolean includeNullAndNaN)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Collection values,\n            boolean includeNullAndNaN)", "full_signature": "public static double calculateMean(Collection values,\n            boolean includeNullAndNaN)", "class_method_signature": "Statistics.calculateMean(Collection values,\n            boolean includeNullAndNaN)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values)", "full_signature": "public static double calculateMedian(List values)", "class_method_signature": "Statistics.calculateMedian(List values)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values, boolean copyAndSort)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values, boolean copyAndSort)", "full_signature": "public static double calculateMedian(List values, boolean copyAndSort)", "class_method_signature": "Statistics.calculateMedian(List values, boolean copyAndSort)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values, int start, int end)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values, int start, int end)", "full_signature": "public static double calculateMedian(List values, int start, int end)", "class_method_signature": "Statistics.calculateMedian(List values, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values, int start, int end,\n                                         boolean copyAndSort)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort)", "full_signature": "public static double calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort)", "class_method_signature": "Statistics.calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort)", "testcase": false, "constructor": false}, {"identifier": "getStdDev", "parameters": "(Number[] data)", "modifiers": "public static", "return": "double", "signature": "double getStdDev(Number[] data)", "full_signature": "public static double getStdDev(Number[] data)", "class_method_signature": "Statistics.getStdDev(Number[] data)", "testcase": false, "constructor": false}, {"identifier": "getLinearFit", "parameters": "(Number[] xData, Number[] yData)", "modifiers": "public static", "return": "double[]", "signature": "double[] getLinearFit(Number[] xData, Number[] yData)", "full_signature": "public static double[] getLinearFit(Number[] xData, Number[] yData)", "class_method_signature": "Statistics.getLinearFit(Number[] xData, Number[] yData)", "testcase": false, "constructor": false}, {"identifier": "getSlope", "parameters": "(Number[] xData, Number[] yData)", "modifiers": "public static", "return": "double", "signature": "double getSlope(Number[] xData, Number[] yData)", "full_signature": "public static double getSlope(Number[] xData, Number[] yData)", "class_method_signature": "Statistics.getSlope(Number[] xData, Number[] yData)", "testcase": false, "constructor": false}, {"identifier": "getCorrelation", "parameters": "(Number[] data1, Number[] data2)", "modifiers": "public static", "return": "double", "signature": "double getCorrelation(Number[] data1, Number[] data2)", "full_signature": "public static double getCorrelation(Number[] data1, Number[] data2)", "class_method_signature": "Statistics.getCorrelation(Number[] data1, Number[] data2)", "testcase": false, "constructor": false}, {"identifier": "getMovingAverage", "parameters": "(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] getMovingAverage(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "full_signature": "public static double[][] getMovingAverage(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "class_method_signature": "Statistics.getMovingAverage(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/statistics/Statistics.java"}, "focal_method": {"identifier": "getStdDev", "parameters": "(Number[] data)", "modifiers": "public static", "return": "double", "body": "public static double getStdDev(Number[] data) {\n        if (data == null) {\n            throw new IllegalArgumentException(\"Null 'data' array.\");\n        }\n        if (data.length == 0) {\n            throw new IllegalArgumentException(\"Zero length 'data' array.\");\n        }\n        double avg = calculateMean(data);\n        double sum = 0.0;\n\n        for (int counter = 0; counter < data.length; counter++) {\n            double diff = data[counter].doubleValue() - avg;\n            sum = sum + diff * diff;\n        }\n        return Math.sqrt(sum / (data.length - 1));\n    }", "signature": "double getStdDev(Number[] data)", "full_signature": "public static double getStdDev(Number[] data)", "class_method_signature": "Statistics.getStdDev(Number[] data)", "testcase": false, "constructor": false, "invocations": ["calculateMean", "doubleValue", "sqrt"]}, "repository": {"repo_id": "Chart_1_buggy"}}