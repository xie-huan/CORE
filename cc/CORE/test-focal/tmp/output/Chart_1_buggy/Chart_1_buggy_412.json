{"test_class": {"identifier": "MonthDateFormatTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/MonthDateFormatTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        MonthDateFormat mf1 = new MonthDateFormat();\n        MonthDateFormat mf2 = new MonthDateFormat();\n        assertTrue(mf1.equals(mf2));\n        assertTrue(mf2.equals(mf1));\n\n        boolean[] showYear1 = new boolean [12];\n        showYear1[0] = true;\n        boolean[] showYear2 = new boolean [12];\n        showYear1[1] = true;\n\n        // time zone\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.US, 1,\n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.US, 1,\n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n\n        // locale\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 1,\n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 1,\n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n\n        // chars\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2,\n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2,\n            showYear1, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n\n        // showYear[]\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2,\n            showYear2, new SimpleDateFormat(\"yy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2,\n            showYear2, new SimpleDateFormat(\"yy\"));\n        assertTrue(mf1.equals(mf2));\n\n        // yearFormatter\n        mf1 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2,\n            showYear2, new SimpleDateFormat(\"yyyy\"));\n        assertFalse(mf1.equals(mf2));\n        mf2 = new MonthDateFormat(TimeZone.getTimeZone(\"PST\"), Locale.FRANCE, 2,\n            showYear2, new SimpleDateFormat(\"yyyy\"));\n        assertTrue(mf1.equals(mf2));\n\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "MonthDateFormatTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "getTimeZone", "assertFalse", "equals", "getTimeZone", "assertTrue", "equals", "getTimeZone", "assertFalse", "equals", "getTimeZone", "assertTrue", "equals", "getTimeZone", "assertFalse", "equals", "getTimeZone", "assertTrue", "equals", "getTimeZone", "assertFalse", "equals", "getTimeZone", "assertTrue", "equals", "getTimeZone", "assertFalse", "equals", "getTimeZone", "assertTrue", "equals"]}, "focal_class": {"identifier": "MonthDateFormat", "superclass": "extends DateFormat", "interfaces": "", "fields": [{"original_string": "private String[] months;", "modifier": "private", "type": "String[]", "declarator": "months", "var_name": "months"}, {"original_string": "private boolean[] showYear;", "modifier": "private", "type": "boolean[]", "declarator": "showYear", "var_name": "showYear"}, {"original_string": "private DateFormat yearFormatter;", "modifier": "private", "type": "DateFormat", "declarator": "yearFormatter", "var_name": "yearFormatter"}], "methods": [{"identifier": "MonthDateFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " MonthDateFormat()", "full_signature": "public  MonthDateFormat()", "class_method_signature": "MonthDateFormat.MonthDateFormat()", "testcase": false, "constructor": true}, {"identifier": "MonthDateFormat", "parameters": "(TimeZone zone)", "modifiers": "public", "return": "", "signature": " MonthDateFormat(TimeZone zone)", "full_signature": "public  MonthDateFormat(TimeZone zone)", "class_method_signature": "MonthDateFormat.MonthDateFormat(TimeZone zone)", "testcase": false, "constructor": true}, {"identifier": "MonthDateFormat", "parameters": "(Locale locale)", "modifiers": "public", "return": "", "signature": " MonthDateFormat(Locale locale)", "full_signature": "public  MonthDateFormat(Locale locale)", "class_method_signature": "MonthDateFormat.MonthDateFormat(Locale locale)", "testcase": false, "constructor": true}, {"identifier": "MonthDateFormat", "parameters": "(TimeZone zone, int chars)", "modifiers": "public", "return": "", "signature": " MonthDateFormat(TimeZone zone, int chars)", "full_signature": "public  MonthDateFormat(TimeZone zone, int chars)", "class_method_signature": "MonthDateFormat.MonthDateFormat(TimeZone zone, int chars)", "testcase": false, "constructor": true}, {"identifier": "MonthDateFormat", "parameters": "(Locale locale, int chars)", "modifiers": "public", "return": "", "signature": " MonthDateFormat(Locale locale, int chars)", "full_signature": "public  MonthDateFormat(Locale locale, int chars)", "class_method_signature": "MonthDateFormat.MonthDateFormat(Locale locale, int chars)", "testcase": false, "constructor": true}, {"identifier": "MonthDateFormat", "parameters": "(TimeZone zone, Locale locale, int chars,\n                           boolean showYearForJan, boolean showYearForDec)", "modifiers": "public", "return": "", "signature": " MonthDateFormat(TimeZone zone, Locale locale, int chars,\n                           boolean showYearForJan, boolean showYearForDec)", "full_signature": "public  MonthDateFormat(TimeZone zone, Locale locale, int chars,\n                           boolean showYearForJan, boolean showYearForDec)", "class_method_signature": "MonthDateFormat.MonthDateFormat(TimeZone zone, Locale locale, int chars,\n                           boolean showYearForJan, boolean showYearForDec)", "testcase": false, "constructor": true}, {"identifier": "MonthDateFormat", "parameters": "(TimeZone zone, Locale locale, int chars,\n                           boolean[] showYear, DateFormat yearFormatter)", "modifiers": "public", "return": "", "signature": " MonthDateFormat(TimeZone zone, Locale locale, int chars,\n                           boolean[] showYear, DateFormat yearFormatter)", "full_signature": "public  MonthDateFormat(TimeZone zone, Locale locale, int chars,\n                           boolean[] showYear, DateFormat yearFormatter)", "class_method_signature": "MonthDateFormat.MonthDateFormat(TimeZone zone, Locale locale, int chars,\n                           boolean[] showYear, DateFormat yearFormatter)", "testcase": false, "constructor": true}, {"identifier": "format", "parameters": "(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer format(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "full_signature": "public StringBuffer format(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "class_method_signature": "MonthDateFormat.format(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String source, ParsePosition pos)", "modifiers": "public", "return": "Date", "signature": "Date parse(String source, ParsePosition pos)", "full_signature": "public Date parse(String source, ParsePosition pos)", "class_method_signature": "MonthDateFormat.parse(String source, ParsePosition pos)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "MonthDateFormat.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "MonthDateFormat.main(String[] args)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/MonthDateFormat.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof MonthDateFormat)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        MonthDateFormat that = (MonthDateFormat) obj;\n        if (!Arrays.equals(this.months, that.months)) {\n            return false;\n        }\n        if (!Arrays.equals(this.showYear, that.showYear)) {\n            return false;\n        }\n        if (!this.yearFormatter.equals(that.yearFormatter)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "MonthDateFormat.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}