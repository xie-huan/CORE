{"test_class": {"identifier": "SegmentedTimelineTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final int TEST_CYCLE_START = 0;", "modifier": "private static final", "type": "int", "declarator": "TEST_CYCLE_START = 0", "var_name": "TEST_CYCLE_START"}, {"original_string": "private static final int TEST_CYCLE_END   = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_CYCLE_END   = 1000", "var_name": "TEST_CYCLE_END"}, {"original_string": "private static final int TEST_CYCLE_INC   = 55;", "modifier": "private static final", "type": "int", "declarator": "TEST_CYCLE_INC   = 55", "var_name": "TEST_CYCLE_INC"}, {"original_string": "private static final long FIVE_YEARS = 5 * 365\n            * SegmentedTimeline.DAY_SEGMENT_SIZE;", "modifier": "private static final", "type": "long", "declarator": "FIVE_YEARS = 5 * 365\n            * SegmentedTimeline.DAY_SEGMENT_SIZE", "var_name": "FIVE_YEARS"}, {"original_string": "private static final NumberFormat NUMBER_FORMAT\n            = NumberFormat.getNumberInstance();", "modifier": "private static final", "type": "NumberFormat", "declarator": "NUMBER_FORMAT\n            = NumberFormat.getNumberInstance()", "var_name": "NUMBER_FORMAT"}, {"original_string": "private static final SimpleDateFormat DATE_FORMAT;", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "DATE_FORMAT", "var_name": "DATE_FORMAT"}, {"original_string": "private static final SimpleDateFormat DATE_TIME_FORMAT;", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "DATE_TIME_FORMAT", "var_name": "DATE_TIME_FORMAT"}, {"original_string": "private static final String[] MS_EXCEPTIONS = {\"0\", \"2\", \"4\", \"10\", \"15\",\n        \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"47\", \"58\",\n        \"100\", \"101\"};", "modifier": "private static final", "type": "String[]", "declarator": "MS_EXCEPTIONS = {\"0\", \"2\", \"4\", \"10\", \"15\",\n        \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"47\", \"58\",\n        \"100\", \"101\"}", "var_name": "MS_EXCEPTIONS"}, {"original_string": "private static final String[] MS2_BASE_TIMELINE_EXCEPTIONS = {\"0\", \"8\",\n         \"16\", \"24\", \"32\", \"40\", \"48\", \"56\", \"64\", \"72\", \"80\", \"88\", \"96\",\n         \"104\", \"112\", \"120\", \"128\", \"136\"};", "modifier": "private static final", "type": "String[]", "declarator": "MS2_BASE_TIMELINE_EXCEPTIONS = {\"0\", \"8\",\n         \"16\", \"24\", \"32\", \"40\", \"48\", \"56\", \"64\", \"72\", \"80\", \"88\", \"96\",\n         \"104\", \"112\", \"120\", \"128\", \"136\"}", "var_name": "MS2_BASE_TIMELINE_EXCEPTIONS"}, {"original_string": "private static final String[] US_HOLIDAYS = {\"2000-01-17\", \"2000-02-21\",\n        \"2000-04-21\", \"2000-05-29\", \"2000-07-04\", \"2000-09-04\", \"2000-11-23\",\n        \"2000-12-25\", \"2001-01-01\", \"2001-01-15\", \"2001-02-19\", \"2001-04-13\",\n        \"2001-05-28\", \"2001-07-04\", \"2001-09-03\", \"2001-09-11\", \"2001-09-12\",\n        \"2001-09-13\", \"2001-09-14\", \"2001-11-22\", \"2001-12-25\", \"2002-01-01\",\n        \"2002-01-21\", \"2002-02-18\", \"2002-03-29\", \"2002-05-27\", \"2002-07-04\",\n        \"2002-09-02\", \"2002-11-28\", \"2002-12-25\"};", "modifier": "private static final", "type": "String[]", "declarator": "US_HOLIDAYS = {\"2000-01-17\", \"2000-02-21\",\n        \"2000-04-21\", \"2000-05-29\", \"2000-07-04\", \"2000-09-04\", \"2000-11-23\",\n        \"2000-12-25\", \"2001-01-01\", \"2001-01-15\", \"2001-02-19\", \"2001-04-13\",\n        \"2001-05-28\", \"2001-07-04\", \"2001-09-03\", \"2001-09-11\", \"2001-09-12\",\n        \"2001-09-13\", \"2001-09-14\", \"2001-11-22\", \"2001-12-25\", \"2002-01-01\",\n        \"2002-01-21\", \"2002-02-18\", \"2002-03-29\", \"2002-05-27\", \"2002-07-04\",\n        \"2002-09-02\", \"2002-11-28\", \"2002-12-25\"}", "var_name": "US_HOLIDAYS"}, {"original_string": "private static final String[] FIFTEEN_MIN_EXCEPTIONS = {\n         \"2000-01-10 09:00:00\", \"2000-01-10 09:15:00\", \"2000-01-10 09:30:00\",\n         \"2000-01-10 09:45:00\", \"2000-01-10 10:00:00\", \"2000-01-10 10:15:00\",\n         \"2000-02-15 09:00:00\", \"2000-02-15 09:15:00\", \"2000-02-15 09:30:00\",\n         \"2000-02-15 09:45:00\", \"2000-02-15 10:00:00\", \"2000-02-15 10:15:00\",\n         \"2000-02-16 11:00:00\", \"2000-02-16 11:15:00\", \"2000-02-16 11:30:00\",\n         \"2000-02-16 11:45:00\", \"2000-02-16 12:00:00\", \"2000-02-16 12:15:00\",\n         \"2000-02-16 12:30:00\", \"2000-02-16 12:45:00\", \"2000-02-16 01:00:00\",\n         \"2000-02-16 01:15:00\", \"2000-02-16 01:30:00\", \"2000-02-16 01:45:00\",\n         \"2000-05-17 11:45:00\", \"2000-05-17 12:00:00\", \"2000-05-17 12:15:00\",\n         \"2000-05-17 12:30:00\", \"2000-05-17 12:45:00\", \"2000-05-17 01:00:00\",\n         \"2000-05-17 01:15:00\", \"2000-05-17 01:30:00\", \"2000-05-17 01:45:00\",\n         \"2000-05-17 02:00:00\", \"2000-05-17 02:15:00\", \"2000-05-17 02:30:00\",\n         \"2000-05-17 02:45:00\", \"2000-05-17 03:00:00\", \"2000-05-17 03:15:00\",\n         \"2000-05-17 03:30:00\", \"2000-05-17 03:45:00\", \"2000-05-17 04:00:00\"};", "modifier": "private static final", "type": "String[]", "declarator": "FIFTEEN_MIN_EXCEPTIONS = {\n         \"2000-01-10 09:00:00\", \"2000-01-10 09:15:00\", \"2000-01-10 09:30:00\",\n         \"2000-01-10 09:45:00\", \"2000-01-10 10:00:00\", \"2000-01-10 10:15:00\",\n         \"2000-02-15 09:00:00\", \"2000-02-15 09:15:00\", \"2000-02-15 09:30:00\",\n         \"2000-02-15 09:45:00\", \"2000-02-15 10:00:00\", \"2000-02-15 10:15:00\",\n         \"2000-02-16 11:00:00\", \"2000-02-16 11:15:00\", \"2000-02-16 11:30:00\",\n         \"2000-02-16 11:45:00\", \"2000-02-16 12:00:00\", \"2000-02-16 12:15:00\",\n         \"2000-02-16 12:30:00\", \"2000-02-16 12:45:00\", \"2000-02-16 01:00:00\",\n         \"2000-02-16 01:15:00\", \"2000-02-16 01:30:00\", \"2000-02-16 01:45:00\",\n         \"2000-05-17 11:45:00\", \"2000-05-17 12:00:00\", \"2000-05-17 12:15:00\",\n         \"2000-05-17 12:30:00\", \"2000-05-17 12:45:00\", \"2000-05-17 01:00:00\",\n         \"2000-05-17 01:15:00\", \"2000-05-17 01:30:00\", \"2000-05-17 01:45:00\",\n         \"2000-05-17 02:00:00\", \"2000-05-17 02:15:00\", \"2000-05-17 02:30:00\",\n         \"2000-05-17 02:45:00\", \"2000-05-17 03:00:00\", \"2000-05-17 03:15:00\",\n         \"2000-05-17 03:30:00\", \"2000-05-17 03:45:00\", \"2000-05-17 04:00:00\"}", "var_name": "FIFTEEN_MIN_EXCEPTIONS"}, {"original_string": "private SegmentedTimeline msTimeline;", "modifier": "private", "type": "SegmentedTimeline", "declarator": "msTimeline", "var_name": "msTimeline"}, {"original_string": "private SegmentedTimeline ms2Timeline;", "modifier": "private", "type": "SegmentedTimeline", "declarator": "ms2Timeline", "var_name": "ms2Timeline"}, {"original_string": "private SegmentedTimeline ms2BaseTimeline;", "modifier": "private", "type": "SegmentedTimeline", "declarator": "ms2BaseTimeline", "var_name": "ms2BaseTimeline"}, {"original_string": "private SegmentedTimeline mondayFridayTimeline;", "modifier": "private", "type": "SegmentedTimeline", "declarator": "mondayFridayTimeline", "var_name": "mondayFridayTimeline"}, {"original_string": "private SegmentedTimeline fifteenMinTimeline;", "modifier": "private", "type": "SegmentedTimeline", "declarator": "fifteenMinTimeline", "var_name": "fifteenMinTimeline"}, {"original_string": "private Calendar monday;", "modifier": "private", "type": "Calendar", "declarator": "monday", "var_name": "monday"}, {"original_string": "private Calendar monday9am;", "modifier": "private", "type": "Calendar", "declarator": "monday9am", "var_name": "monday9am"}], "file": "tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java"}, "test_case": {"identifier": "testFifteenMinTranslations", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testFifteenMinTranslations() throws ParseException {\n        verifyFillInExceptions(this.fifteenMinTimeline,\n                FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT);\n        fillInBaseTimelineExceptions(this.fifteenMinTimeline,\n                US_HOLIDAYS, DATE_FORMAT);\n        fillInBaseTimelineExclusionsAsExceptions(this.fifteenMinTimeline,\n                this.monday9am.getTime().getTime(),\n                this.monday9am.getTime().getTime() + FIVE_YEARS);\n        verifyTranslations(this.fifteenMinTimeline,\n                this.monday9am.getTime().getTime());\n    }", "signature": "void testFifteenMinTranslations()", "full_signature": "public void testFifteenMinTranslations()", "class_method_signature": "SegmentedTimelineTests.testFifteenMinTranslations()", "testcase": true, "constructor": false, "invocations": ["verifyFillInExceptions", "fillInBaseTimelineExceptions", "fillInBaseTimelineExclusionsAsExceptions", "getTime", "getTime", "getTime", "getTime", "verifyTranslations", "getTime", "getTime"]}, "focal_class": {"identifier": "SegmentedTimeline", "superclass": "", "interfaces": "implements Timeline, Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1093779862539903110L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1093779862539903110L", "var_name": "serialVersionUID"}, {"original_string": "public static final long DAY_SEGMENT_SIZE = 24 * 60 * 60 * 1000;", "modifier": "public static final", "type": "long", "declarator": "DAY_SEGMENT_SIZE = 24 * 60 * 60 * 1000", "var_name": "DAY_SEGMENT_SIZE"}, {"original_string": "public static final long HOUR_SEGMENT_SIZE = 60 * 60 * 1000;", "modifier": "public static final", "type": "long", "declarator": "HOUR_SEGMENT_SIZE = 60 * 60 * 1000", "var_name": "HOUR_SEGMENT_SIZE"}, {"original_string": "public static final long FIFTEEN_MINUTE_SEGMENT_SIZE = 15 * 60 * 1000;", "modifier": "public static final", "type": "long", "declarator": "FIFTEEN_MINUTE_SEGMENT_SIZE = 15 * 60 * 1000", "var_name": "FIFTEEN_MINUTE_SEGMENT_SIZE"}, {"original_string": "public static final long MINUTE_SEGMENT_SIZE = 60 * 1000;", "modifier": "public static final", "type": "long", "declarator": "MINUTE_SEGMENT_SIZE = 60 * 1000", "var_name": "MINUTE_SEGMENT_SIZE"}, {"original_string": "public static long FIRST_MONDAY_AFTER_1900;", "modifier": "public static", "type": "long", "declarator": "FIRST_MONDAY_AFTER_1900", "var_name": "FIRST_MONDAY_AFTER_1900"}, {"original_string": "public static TimeZone NO_DST_TIME_ZONE;", "modifier": "public static", "type": "TimeZone", "declarator": "NO_DST_TIME_ZONE", "var_name": "NO_DST_TIME_ZONE"}, {"original_string": "public static TimeZone DEFAULT_TIME_ZONE = TimeZone.getDefault();", "modifier": "public static", "type": "TimeZone", "declarator": "DEFAULT_TIME_ZONE = TimeZone.getDefault()", "var_name": "DEFAULT_TIME_ZONE"}, {"original_string": "private Calendar workingCalendarNoDST;", "modifier": "private", "type": "Calendar", "declarator": "workingCalendarNoDST", "var_name": "workingCalendarNoDST"}, {"original_string": "private Calendar workingCalendar = Calendar.getInstance();", "modifier": "private", "type": "Calendar", "declarator": "workingCalendar = Calendar.getInstance()", "var_name": "workingCalendar"}, {"original_string": "private long segmentSize;", "modifier": "private", "type": "long", "declarator": "segmentSize", "var_name": "segmentSize"}, {"original_string": "private int segmentsIncluded;", "modifier": "private", "type": "int", "declarator": "segmentsIncluded", "var_name": "segmentsIncluded"}, {"original_string": "private int segmentsExcluded;", "modifier": "private", "type": "int", "declarator": "segmentsExcluded", "var_name": "segmentsExcluded"}, {"original_string": "private int groupSegmentCount;", "modifier": "private", "type": "int", "declarator": "groupSegmentCount", "var_name": "groupSegmentCount"}, {"original_string": "private long startTime;", "modifier": "private", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private long segmentsIncludedSize;", "modifier": "private", "type": "long", "declarator": "segmentsIncludedSize", "var_name": "segmentsIncludedSize"}, {"original_string": "private long segmentsExcludedSize;", "modifier": "private", "type": "long", "declarator": "segmentsExcludedSize", "var_name": "segmentsExcludedSize"}, {"original_string": "private long segmentsGroupSize;", "modifier": "private", "type": "long", "declarator": "segmentsGroupSize", "var_name": "segmentsGroupSize"}, {"original_string": "private List exceptionSegments = new ArrayList();", "modifier": "private", "type": "List", "declarator": "exceptionSegments = new ArrayList()", "var_name": "exceptionSegments"}, {"original_string": "private SegmentedTimeline baseTimeline;", "modifier": "private", "type": "SegmentedTimeline", "declarator": "baseTimeline", "var_name": "baseTimeline"}, {"original_string": "private boolean adjustForDaylightSaving = false;", "modifier": "private", "type": "boolean", "declarator": "adjustForDaylightSaving = false", "var_name": "adjustForDaylightSaving"}], "methods": [{"identifier": "SegmentedTimeline", "parameters": "(long segmentSize,\n                             int segmentsIncluded,\n                             int segmentsExcluded)", "modifiers": "public", "return": "", "signature": " SegmentedTimeline(long segmentSize,\n                             int segmentsIncluded,\n                             int segmentsExcluded)", "full_signature": "public  SegmentedTimeline(long segmentSize,\n                             int segmentsIncluded,\n                             int segmentsExcluded)", "class_method_signature": "SegmentedTimeline.SegmentedTimeline(long segmentSize,\n                             int segmentsIncluded,\n                             int segmentsExcluded)", "testcase": false, "constructor": true}, {"identifier": "firstMondayAfter1900", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long firstMondayAfter1900()", "full_signature": "public static long firstMondayAfter1900()", "class_method_signature": "SegmentedTimeline.firstMondayAfter1900()", "testcase": false, "constructor": false}, {"identifier": "newMondayThroughFridayTimeline", "parameters": "()", "modifiers": "public static", "return": "SegmentedTimeline", "signature": "SegmentedTimeline newMondayThroughFridayTimeline()", "full_signature": "public static SegmentedTimeline newMondayThroughFridayTimeline()", "class_method_signature": "SegmentedTimeline.newMondayThroughFridayTimeline()", "testcase": false, "constructor": false}, {"identifier": "newFifteenMinuteTimeline", "parameters": "()", "modifiers": "public static", "return": "SegmentedTimeline", "signature": "SegmentedTimeline newFifteenMinuteTimeline()", "full_signature": "public static SegmentedTimeline newFifteenMinuteTimeline()", "class_method_signature": "SegmentedTimeline.newFifteenMinuteTimeline()", "testcase": false, "constructor": false}, {"identifier": "getAdjustForDaylightSaving", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAdjustForDaylightSaving()", "full_signature": "public boolean getAdjustForDaylightSaving()", "class_method_signature": "SegmentedTimeline.getAdjustForDaylightSaving()", "testcase": false, "constructor": false}, {"identifier": "setAdjustForDaylightSaving", "parameters": "(boolean adjust)", "modifiers": "public", "return": "void", "signature": "void setAdjustForDaylightSaving(boolean adjust)", "full_signature": "public void setAdjustForDaylightSaving(boolean adjust)", "class_method_signature": "SegmentedTimeline.setAdjustForDaylightSaving(boolean adjust)", "testcase": false, "constructor": false}, {"identifier": "setStartTime", "parameters": "(long millisecond)", "modifiers": "public", "return": "void", "signature": "void setStartTime(long millisecond)", "full_signature": "public void setStartTime(long millisecond)", "class_method_signature": "SegmentedTimeline.setStartTime(long millisecond)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartTime()", "full_signature": "public long getStartTime()", "class_method_signature": "SegmentedTimeline.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsExcluded", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSegmentsExcluded()", "full_signature": "public int getSegmentsExcluded()", "class_method_signature": "SegmentedTimeline.getSegmentsExcluded()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsExcludedSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSegmentsExcludedSize()", "full_signature": "public long getSegmentsExcludedSize()", "class_method_signature": "SegmentedTimeline.getSegmentsExcludedSize()", "testcase": false, "constructor": false}, {"identifier": "getGroupSegmentCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGroupSegmentCount()", "full_signature": "public int getGroupSegmentCount()", "class_method_signature": "SegmentedTimeline.getGroupSegmentCount()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsGroupSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSegmentsGroupSize()", "full_signature": "public long getSegmentsGroupSize()", "class_method_signature": "SegmentedTimeline.getSegmentsGroupSize()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsIncluded", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSegmentsIncluded()", "full_signature": "public int getSegmentsIncluded()", "class_method_signature": "SegmentedTimeline.getSegmentsIncluded()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsIncludedSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSegmentsIncludedSize()", "full_signature": "public long getSegmentsIncludedSize()", "class_method_signature": "SegmentedTimeline.getSegmentsIncludedSize()", "testcase": false, "constructor": false}, {"identifier": "getSegmentSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSegmentSize()", "full_signature": "public long getSegmentSize()", "class_method_signature": "SegmentedTimeline.getSegmentSize()", "testcase": false, "constructor": false}, {"identifier": "getExceptionSegments", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getExceptionSegments()", "full_signature": "public List getExceptionSegments()", "class_method_signature": "SegmentedTimeline.getExceptionSegments()", "testcase": false, "constructor": false}, {"identifier": "setExceptionSegments", "parameters": "(List exceptionSegments)", "modifiers": "public", "return": "void", "signature": "void setExceptionSegments(List exceptionSegments)", "full_signature": "public void setExceptionSegments(List exceptionSegments)", "class_method_signature": "SegmentedTimeline.setExceptionSegments(List exceptionSegments)", "testcase": false, "constructor": false}, {"identifier": "getBaseTimeline", "parameters": "()", "modifiers": "public", "return": "SegmentedTimeline", "signature": "SegmentedTimeline getBaseTimeline()", "full_signature": "public SegmentedTimeline getBaseTimeline()", "class_method_signature": "SegmentedTimeline.getBaseTimeline()", "testcase": false, "constructor": false}, {"identifier": "setBaseTimeline", "parameters": "(SegmentedTimeline baseTimeline)", "modifiers": "public", "return": "void", "signature": "void setBaseTimeline(SegmentedTimeline baseTimeline)", "full_signature": "public void setBaseTimeline(SegmentedTimeline baseTimeline)", "class_method_signature": "SegmentedTimeline.setBaseTimeline(SegmentedTimeline baseTimeline)", "testcase": false, "constructor": false}, {"identifier": "toTimelineValue", "parameters": "(long millisecond)", "modifiers": "public", "return": "long", "signature": "long toTimelineValue(long millisecond)", "full_signature": "public long toTimelineValue(long millisecond)", "class_method_signature": "SegmentedTimeline.toTimelineValue(long millisecond)", "testcase": false, "constructor": false}, {"identifier": "toTimelineValue", "parameters": "(Date date)", "modifiers": "public", "return": "long", "signature": "long toTimelineValue(Date date)", "full_signature": "public long toTimelineValue(Date date)", "class_method_signature": "SegmentedTimeline.toTimelineValue(Date date)", "testcase": false, "constructor": false}, {"identifier": "toMillisecond", "parameters": "(long timelineValue)", "modifiers": "public", "return": "long", "signature": "long toMillisecond(long timelineValue)", "full_signature": "public long toMillisecond(long timelineValue)", "class_method_signature": "SegmentedTimeline.toMillisecond(long timelineValue)", "testcase": false, "constructor": false}, {"identifier": "getTimeFromLong", "parameters": "(long date)", "modifiers": "public", "return": "long", "signature": "long getTimeFromLong(long date)", "full_signature": "public long getTimeFromLong(long date)", "class_method_signature": "SegmentedTimeline.getTimeFromLong(long date)", "testcase": false, "constructor": false}, {"identifier": "containsDomainValue", "parameters": "(long millisecond)", "modifiers": "public", "return": "boolean", "signature": "boolean containsDomainValue(long millisecond)", "full_signature": "public boolean containsDomainValue(long millisecond)", "class_method_signature": "SegmentedTimeline.containsDomainValue(long millisecond)", "testcase": false, "constructor": false}, {"identifier": "containsDomainValue", "parameters": "(Date date)", "modifiers": "public", "return": "boolean", "signature": "boolean containsDomainValue(Date date)", "full_signature": "public boolean containsDomainValue(Date date)", "class_method_signature": "SegmentedTimeline.containsDomainValue(Date date)", "testcase": false, "constructor": false}, {"identifier": "containsDomainRange", "parameters": "(long domainValueStart,\n                                       long domainValueEnd)", "modifiers": "public", "return": "boolean", "signature": "boolean containsDomainRange(long domainValueStart,\n                                       long domainValueEnd)", "full_signature": "public boolean containsDomainRange(long domainValueStart,\n                                       long domainValueEnd)", "class_method_signature": "SegmentedTimeline.containsDomainRange(long domainValueStart,\n                                       long domainValueEnd)", "testcase": false, "constructor": false}, {"identifier": "containsDomainRange", "parameters": "(Date dateDomainValueStart,\n                                       Date dateDomainValueEnd)", "modifiers": "public", "return": "boolean", "signature": "boolean containsDomainRange(Date dateDomainValueStart,\n                                       Date dateDomainValueEnd)", "full_signature": "public boolean containsDomainRange(Date dateDomainValueStart,\n                                       Date dateDomainValueEnd)", "class_method_signature": "SegmentedTimeline.containsDomainRange(Date dateDomainValueStart,\n                                       Date dateDomainValueEnd)", "testcase": false, "constructor": false}, {"identifier": "addException", "parameters": "(long millisecond)", "modifiers": "public", "return": "void", "signature": "void addException(long millisecond)", "full_signature": "public void addException(long millisecond)", "class_method_signature": "SegmentedTimeline.addException(long millisecond)", "testcase": false, "constructor": false}, {"identifier": "addException", "parameters": "(long fromDomainValue, long toDomainValue)", "modifiers": "public", "return": "void", "signature": "void addException(long fromDomainValue, long toDomainValue)", "full_signature": "public void addException(long fromDomainValue, long toDomainValue)", "class_method_signature": "SegmentedTimeline.addException(long fromDomainValue, long toDomainValue)", "testcase": false, "constructor": false}, {"identifier": "addException", "parameters": "(Date exceptionDate)", "modifiers": "public", "return": "void", "signature": "void addException(Date exceptionDate)", "full_signature": "public void addException(Date exceptionDate)", "class_method_signature": "SegmentedTimeline.addException(Date exceptionDate)", "testcase": false, "constructor": false}, {"identifier": "addExceptions", "parameters": "(List exceptionList)", "modifiers": "public", "return": "void", "signature": "void addExceptions(List exceptionList)", "full_signature": "public void addExceptions(List exceptionList)", "class_method_signature": "SegmentedTimeline.addExceptions(List exceptionList)", "testcase": false, "constructor": false}, {"identifier": "addException", "parameters": "(Segment segment)", "modifiers": "private", "return": "void", "signature": "void addException(Segment segment)", "full_signature": "private void addException(Segment segment)", "class_method_signature": "SegmentedTimeline.addException(Segment segment)", "testcase": false, "constructor": false}, {"identifier": "addBaseTimelineException", "parameters": "(long domainValue)", "modifiers": "public", "return": "void", "signature": "void addBaseTimelineException(long domainValue)", "full_signature": "public void addBaseTimelineException(long domainValue)", "class_method_signature": "SegmentedTimeline.addBaseTimelineException(long domainValue)", "testcase": false, "constructor": false}, {"identifier": "addBaseTimelineException", "parameters": "(Date date)", "modifiers": "public", "return": "void", "signature": "void addBaseTimelineException(Date date)", "full_signature": "public void addBaseTimelineException(Date date)", "class_method_signature": "SegmentedTimeline.addBaseTimelineException(Date date)", "testcase": false, "constructor": false}, {"identifier": "addBaseTimelineExclusions", "parameters": "(long fromBaseDomainValue,\n                                          long toBaseDomainValue)", "modifiers": "public", "return": "void", "signature": "void addBaseTimelineExclusions(long fromBaseDomainValue,\n                                          long toBaseDomainValue)", "full_signature": "public void addBaseTimelineExclusions(long fromBaseDomainValue,\n                                          long toBaseDomainValue)", "class_method_signature": "SegmentedTimeline.addBaseTimelineExclusions(long fromBaseDomainValue,\n                                          long toBaseDomainValue)", "testcase": false, "constructor": false}, {"identifier": "getExceptionSegmentCount", "parameters": "(long fromMillisecond,\n                                         long toMillisecond)", "modifiers": "public", "return": "long", "signature": "long getExceptionSegmentCount(long fromMillisecond,\n                                         long toMillisecond)", "full_signature": "public long getExceptionSegmentCount(long fromMillisecond,\n                                         long toMillisecond)", "class_method_signature": "SegmentedTimeline.getExceptionSegmentCount(long fromMillisecond,\n                                         long toMillisecond)", "testcase": false, "constructor": false}, {"identifier": "getSegment", "parameters": "(long millisecond)", "modifiers": "public", "return": "Segment", "signature": "Segment getSegment(long millisecond)", "full_signature": "public Segment getSegment(long millisecond)", "class_method_signature": "SegmentedTimeline.getSegment(long millisecond)", "testcase": false, "constructor": false}, {"identifier": "getSegment", "parameters": "(Date date)", "modifiers": "public", "return": "Segment", "signature": "Segment getSegment(Date date)", "full_signature": "public Segment getSegment(Date date)", "class_method_signature": "SegmentedTimeline.getSegment(Date date)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o, Object p)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(Object o, Object p)", "full_signature": "private boolean equals(Object o, Object p)", "class_method_signature": "SegmentedTimeline.equals(Object o, Object p)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "SegmentedTimeline.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "SegmentedTimeline.hashCode()", "testcase": false, "constructor": false}, {"identifier": "binarySearchExceptionSegments", "parameters": "(Segment segment)", "modifiers": "private", "return": "int", "signature": "int binarySearchExceptionSegments(Segment segment)", "full_signature": "private int binarySearchExceptionSegments(Segment segment)", "class_method_signature": "SegmentedTimeline.binarySearchExceptionSegments(Segment segment)", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "(Date date)", "modifiers": "public", "return": "long", "signature": "long getTime(Date date)", "full_signature": "public long getTime(Date date)", "class_method_signature": "SegmentedTimeline.getTime(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(long value)", "modifiers": "public", "return": "Date", "signature": "Date getDate(long value)", "full_signature": "public Date getDate(long value)", "class_method_signature": "SegmentedTimeline.getDate(long value)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "SegmentedTimeline.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/SegmentedTimeline.java"}, "focal_method": {"identifier": "getTime", "parameters": "(Date date)", "modifiers": "public", "return": "long", "body": "public long getTime(Date date) {\n        long result = date.getTime();\n        if (this.adjustForDaylightSaving) {\n            this.workingCalendar.setTime(date);\n            this.workingCalendarNoDST.set(\n                    this.workingCalendar.get(Calendar.YEAR),\n                    this.workingCalendar.get(Calendar.MONTH),\n                    this.workingCalendar.get(Calendar.DATE),\n                    this.workingCalendar.get(Calendar.HOUR_OF_DAY),\n                    this.workingCalendar.get(Calendar.MINUTE),\n                    this.workingCalendar.get(Calendar.SECOND));\n            this.workingCalendarNoDST.set(Calendar.MILLISECOND,\n                    this.workingCalendar.get(Calendar.MILLISECOND));\n            Date revisedDate = this.workingCalendarNoDST.getTime();\n            result = revisedDate.getTime();\n        }\n\n        return result;\n    }", "signature": "long getTime(Date date)", "full_signature": "public long getTime(Date date)", "class_method_signature": "SegmentedTimeline.getTime(Date date)", "testcase": false, "constructor": false, "invocations": ["getTime", "setTime", "set", "get", "get", "get", "get", "get", "get", "set", "get", "getTime", "getTime"]}, "repository": {"repo_id": "Chart_1_buggy"}}