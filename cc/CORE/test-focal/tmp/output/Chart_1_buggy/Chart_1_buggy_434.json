{"test_class": {"identifier": "DateAxisTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/DateAxisTests.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testHashCode() {\n        DateAxis a1 = new DateAxis(\"Test\");\n        DateAxis a2 = new DateAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }", "signature": "void testHashCode()", "full_signature": "public void testHashCode()", "class_method_signature": "DateAxisTests.testHashCode()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "hashCode", "hashCode", "assertEquals"]}, "focal_class": {"identifier": "DateAxis", "superclass": "extends ValueAxis", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -1013460999649007604L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1013460999649007604L", "var_name": "serialVersionUID"}, {"original_string": "public static final DateRange DEFAULT_DATE_RANGE = new DateRange();", "modifier": "public static final", "type": "DateRange", "declarator": "DEFAULT_DATE_RANGE = new DateRange()", "var_name": "DEFAULT_DATE_RANGE"}, {"original_string": "public static final double\n            DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS = 2.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS = 2.0", "var_name": "DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS"}, {"original_string": "public static final DateTickUnit DEFAULT_DATE_TICK_UNIT\n            = new DateTickUnit(DateTickUnitType.DAY, 1, new SimpleDateFormat());", "modifier": "public static final", "type": "DateTickUnit", "declarator": "DEFAULT_DATE_TICK_UNIT\n            = new DateTickUnit(DateTickUnitType.DAY, 1, new SimpleDateFormat())", "var_name": "DEFAULT_DATE_TICK_UNIT"}, {"original_string": "public static final Date DEFAULT_ANCHOR_DATE = new Date();", "modifier": "public static final", "type": "Date", "declarator": "DEFAULT_ANCHOR_DATE = new Date()", "var_name": "DEFAULT_ANCHOR_DATE"}, {"original_string": "private DateTickUnit tickUnit;", "modifier": "private", "type": "DateTickUnit", "declarator": "tickUnit", "var_name": "tickUnit"}, {"original_string": "private DateFormat dateFormatOverride;", "modifier": "private", "type": "DateFormat", "declarator": "dateFormatOverride", "var_name": "dateFormatOverride"}, {"original_string": "private DateTickMarkPosition tickMarkPosition = DateTickMarkPosition.START;", "modifier": "private", "type": "DateTickMarkPosition", "declarator": "tickMarkPosition = DateTickMarkPosition.START", "var_name": "tickMarkPosition"}, {"original_string": "private static final Timeline DEFAULT_TIMELINE = new DefaultTimeline();", "modifier": "private static final", "type": "Timeline", "declarator": "DEFAULT_TIMELINE = new DefaultTimeline()", "var_name": "DEFAULT_TIMELINE"}, {"original_string": "private TimeZone timeZone;", "modifier": "private", "type": "TimeZone", "declarator": "timeZone", "var_name": "timeZone"}, {"original_string": "private Locale locale;", "modifier": "private", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "private Timeline timeline;", "modifier": "private", "type": "Timeline", "declarator": "timeline", "var_name": "timeline"}], "methods": [{"identifier": "DateAxis", "parameters": "()", "modifiers": "public", "return": "", "signature": " DateAxis()", "full_signature": "public  DateAxis()", "class_method_signature": "DateAxis.DateAxis()", "testcase": false, "constructor": true}, {"identifier": "DateAxis", "parameters": "(String label)", "modifiers": "public", "return": "", "signature": " DateAxis(String label)", "full_signature": "public  DateAxis(String label)", "class_method_signature": "DateAxis.DateAxis(String label)", "testcase": false, "constructor": true}, {"identifier": "DateAxis", "parameters": "(String label, TimeZone zone)", "modifiers": "public", "return": "", "signature": " DateAxis(String label, TimeZone zone)", "full_signature": "public  DateAxis(String label, TimeZone zone)", "class_method_signature": "DateAxis.DateAxis(String label, TimeZone zone)", "testcase": false, "constructor": true}, {"identifier": "DateAxis", "parameters": "(String label, TimeZone zone, Locale locale)", "modifiers": "public", "return": "", "signature": " DateAxis(String label, TimeZone zone, Locale locale)", "full_signature": "public  DateAxis(String label, TimeZone zone, Locale locale)", "class_method_signature": "DateAxis.DateAxis(String label, TimeZone zone, Locale locale)", "testcase": false, "constructor": true}, {"identifier": "getTimeZone", "parameters": "()", "modifiers": "public", "return": "TimeZone", "signature": "TimeZone getTimeZone()", "full_signature": "public TimeZone getTimeZone()", "class_method_signature": "DateAxis.getTimeZone()", "testcase": false, "constructor": false}, {"identifier": "setTimeZone", "parameters": "(TimeZone zone)", "modifiers": "public", "return": "void", "signature": "void setTimeZone(TimeZone zone)", "full_signature": "public void setTimeZone(TimeZone zone)", "class_method_signature": "DateAxis.setTimeZone(TimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "getTimeline", "parameters": "()", "modifiers": "public", "return": "Timeline", "signature": "Timeline getTimeline()", "full_signature": "public Timeline getTimeline()", "class_method_signature": "DateAxis.getTimeline()", "testcase": false, "constructor": false}, {"identifier": "setTimeline", "parameters": "(Timeline timeline)", "modifiers": "public", "return": "void", "signature": "void setTimeline(Timeline timeline)", "full_signature": "public void setTimeline(Timeline timeline)", "class_method_signature": "DateAxis.setTimeline(Timeline timeline)", "testcase": false, "constructor": false}, {"identifier": "getTickUnit", "parameters": "()", "modifiers": "public", "return": "DateTickUnit", "signature": "DateTickUnit getTickUnit()", "full_signature": "public DateTickUnit getTickUnit()", "class_method_signature": "DateAxis.getTickUnit()", "testcase": false, "constructor": false}, {"identifier": "setTickUnit", "parameters": "(DateTickUnit unit)", "modifiers": "public", "return": "void", "signature": "void setTickUnit(DateTickUnit unit)", "full_signature": "public void setTickUnit(DateTickUnit unit)", "class_method_signature": "DateAxis.setTickUnit(DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "setTickUnit", "parameters": "(DateTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelection)", "modifiers": "public", "return": "void", "signature": "void setTickUnit(DateTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelection)", "full_signature": "public void setTickUnit(DateTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelection)", "class_method_signature": "DateAxis.setTickUnit(DateTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelection)", "testcase": false, "constructor": false}, {"identifier": "getDateFormatOverride", "parameters": "()", "modifiers": "public", "return": "DateFormat", "signature": "DateFormat getDateFormatOverride()", "full_signature": "public DateFormat getDateFormatOverride()", "class_method_signature": "DateAxis.getDateFormatOverride()", "testcase": false, "constructor": false}, {"identifier": "setDateFormatOverride", "parameters": "(DateFormat formatter)", "modifiers": "public", "return": "void", "signature": "void setDateFormatOverride(DateFormat formatter)", "full_signature": "public void setDateFormatOverride(DateFormat formatter)", "class_method_signature": "DateAxis.setDateFormatOverride(DateFormat formatter)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(Range range)", "modifiers": "public", "return": "void", "signature": "void setRange(Range range)", "full_signature": "public void setRange(Range range)", "class_method_signature": "DateAxis.setRange(Range range)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "modifiers": "public", "return": "void", "signature": "void setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "full_signature": "public void setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "class_method_signature": "DateAxis.setRange(Range range, boolean turnOffAutoRange,\n                         boolean notify)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(Date lower, Date upper)", "modifiers": "public", "return": "void", "signature": "void setRange(Date lower, Date upper)", "full_signature": "public void setRange(Date lower, Date upper)", "class_method_signature": "DateAxis.setRange(Date lower, Date upper)", "testcase": false, "constructor": false}, {"identifier": "setRange", "parameters": "(double lower, double upper)", "modifiers": "public", "return": "void", "signature": "void setRange(double lower, double upper)", "full_signature": "public void setRange(double lower, double upper)", "class_method_signature": "DateAxis.setRange(double lower, double upper)", "testcase": false, "constructor": false}, {"identifier": "getMinimumDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getMinimumDate()", "full_signature": "public Date getMinimumDate()", "class_method_signature": "DateAxis.getMinimumDate()", "testcase": false, "constructor": false}, {"identifier": "setMinimumDate", "parameters": "(Date date)", "modifiers": "public", "return": "void", "signature": "void setMinimumDate(Date date)", "full_signature": "public void setMinimumDate(Date date)", "class_method_signature": "DateAxis.setMinimumDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "getMaximumDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getMaximumDate()", "full_signature": "public Date getMaximumDate()", "class_method_signature": "DateAxis.getMaximumDate()", "testcase": false, "constructor": false}, {"identifier": "setMaximumDate", "parameters": "(Date maximumDate)", "modifiers": "public", "return": "void", "signature": "void setMaximumDate(Date maximumDate)", "full_signature": "public void setMaximumDate(Date maximumDate)", "class_method_signature": "DateAxis.setMaximumDate(Date maximumDate)", "testcase": false, "constructor": false}, {"identifier": "getTickMarkPosition", "parameters": "()", "modifiers": "public", "return": "DateTickMarkPosition", "signature": "DateTickMarkPosition getTickMarkPosition()", "full_signature": "public DateTickMarkPosition getTickMarkPosition()", "class_method_signature": "DateAxis.getTickMarkPosition()", "testcase": false, "constructor": false}, {"identifier": "setTickMarkPosition", "parameters": "(DateTickMarkPosition position)", "modifiers": "public", "return": "void", "signature": "void setTickMarkPosition(DateTickMarkPosition position)", "full_signature": "public void setTickMarkPosition(DateTickMarkPosition position)", "class_method_signature": "DateAxis.setTickMarkPosition(DateTickMarkPosition position)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void configure()", "full_signature": "public void configure()", "class_method_signature": "DateAxis.configure()", "testcase": false, "constructor": false}, {"identifier": "isHiddenValue", "parameters": "(long millis)", "modifiers": "public", "return": "boolean", "signature": "boolean isHiddenValue(long millis)", "full_signature": "public boolean isHiddenValue(long millis)", "class_method_signature": "DateAxis.isHiddenValue(long millis)", "testcase": false, "constructor": false}, {"identifier": "valueToJava2D", "parameters": "(double value, Rectangle2D area,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double valueToJava2D(double value, Rectangle2D area,\n                                RectangleEdge edge)", "full_signature": "public double valueToJava2D(double value, Rectangle2D area,\n                                RectangleEdge edge)", "class_method_signature": "DateAxis.valueToJava2D(double value, Rectangle2D area,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "dateToJava2D", "parameters": "(Date date, Rectangle2D area,\n                               RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double dateToJava2D(Date date, Rectangle2D area,\n                               RectangleEdge edge)", "full_signature": "public double dateToJava2D(Date date, Rectangle2D area,\n                               RectangleEdge edge)", "class_method_signature": "DateAxis.dateToJava2D(Date date, Rectangle2D area,\n                               RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "java2DToValue", "parameters": "(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "full_signature": "public double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "class_method_signature": "DateAxis.java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "calculateLowestVisibleTickValue", "parameters": "(DateTickUnit unit)", "modifiers": "public", "return": "Date", "signature": "Date calculateLowestVisibleTickValue(DateTickUnit unit)", "full_signature": "public Date calculateLowestVisibleTickValue(DateTickUnit unit)", "class_method_signature": "DateAxis.calculateLowestVisibleTickValue(DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "calculateHighestVisibleTickValue", "parameters": "(DateTickUnit unit)", "modifiers": "public", "return": "Date", "signature": "Date calculateHighestVisibleTickValue(DateTickUnit unit)", "full_signature": "public Date calculateHighestVisibleTickValue(DateTickUnit unit)", "class_method_signature": "DateAxis.calculateHighestVisibleTickValue(DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "previousStandardDate", "parameters": "(Date date, DateTickUnit unit)", "modifiers": "protected", "return": "Date", "signature": "Date previousStandardDate(Date date, DateTickUnit unit)", "full_signature": "protected Date previousStandardDate(Date date, DateTickUnit unit)", "class_method_signature": "DateAxis.previousStandardDate(Date date, DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "calculateDateForPosition", "parameters": "(RegularTimePeriod period,\n                                          DateTickMarkPosition position)", "modifiers": "private", "return": "Date", "signature": "Date calculateDateForPosition(RegularTimePeriod period,\n                                          DateTickMarkPosition position)", "full_signature": "private Date calculateDateForPosition(RegularTimePeriod period,\n                                          DateTickMarkPosition position)", "class_method_signature": "DateAxis.calculateDateForPosition(RegularTimePeriod period,\n                                          DateTickMarkPosition position)", "testcase": false, "constructor": false}, {"identifier": "nextStandardDate", "parameters": "(Date date, DateTickUnit unit)", "modifiers": "protected", "return": "Date", "signature": "Date nextStandardDate(Date date, DateTickUnit unit)", "full_signature": "protected Date nextStandardDate(Date date, DateTickUnit unit)", "class_method_signature": "DateAxis.nextStandardDate(Date date, DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "createStandardDateTickUnits", "parameters": "()", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createStandardDateTickUnits()", "full_signature": "public static TickUnitSource createStandardDateTickUnits()", "class_method_signature": "DateAxis.createStandardDateTickUnits()", "testcase": false, "constructor": false}, {"identifier": "createStandardDateTickUnits", "parameters": "(TimeZone zone)", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createStandardDateTickUnits(TimeZone zone)", "full_signature": "public static TickUnitSource createStandardDateTickUnits(TimeZone zone)", "class_method_signature": "DateAxis.createStandardDateTickUnits(TimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "createStandardDateTickUnits", "parameters": "(TimeZone zone,\n    \t\tLocale locale)", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createStandardDateTickUnits(TimeZone zone,\n    \t\tLocale locale)", "full_signature": "public static TickUnitSource createStandardDateTickUnits(TimeZone zone,\n    \t\tLocale locale)", "class_method_signature": "DateAxis.createStandardDateTickUnits(TimeZone zone,\n    \t\tLocale locale)", "testcase": false, "constructor": false}, {"identifier": "autoAdjustRange", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void autoAdjustRange()", "full_signature": "protected void autoAdjustRange()", "class_method_signature": "DateAxis.autoAdjustRange()", "testcase": false, "constructor": false}, {"identifier": "selectAutoTickUnit", "parameters": "(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "full_signature": "protected void selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "class_method_signature": "DateAxis.selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectHorizontalAutoTickUnit", "parameters": "(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectHorizontalAutoTickUnit(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "protected void selectHorizontalAutoTickUnit(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "DateAxis.selectHorizontalAutoTickUnit(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectVerticalAutoTickUnit", "parameters": "(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "full_signature": "protected void selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "class_method_signature": "DateAxis.selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "estimateMaximumTickLabelWidth", "parameters": "(Graphics2D g2,\n                                                 DateTickUnit unit)", "modifiers": "private", "return": "double", "signature": "double estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                 DateTickUnit unit)", "full_signature": "private double estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                 DateTickUnit unit)", "class_method_signature": "DateAxis.estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                 DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "estimateMaximumTickLabelHeight", "parameters": "(Graphics2D g2,\n                                                  DateTickUnit unit)", "modifiers": "private", "return": "double", "signature": "double estimateMaximumTickLabelHeight(Graphics2D g2,\n                                                  DateTickUnit unit)", "full_signature": "private double estimateMaximumTickLabelHeight(Graphics2D g2,\n                                                  DateTickUnit unit)", "class_method_signature": "DateAxis.estimateMaximumTickLabelHeight(Graphics2D g2,\n                                                  DateTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "refreshTicks", "parameters": "(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "modifiers": "public", "return": "List", "signature": "List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "full_signature": "public List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "class_method_signature": "DateAxis.refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "correctTickDateForPosition", "parameters": "(Date time, DateTickUnit unit,\n            DateTickMarkPosition position)", "modifiers": "private", "return": "Date", "signature": "Date correctTickDateForPosition(Date time, DateTickUnit unit,\n            DateTickMarkPosition position)", "full_signature": "private Date correctTickDateForPosition(Date time, DateTickUnit unit,\n            DateTickMarkPosition position)", "class_method_signature": "DateAxis.correctTickDateForPosition(Date time, DateTickUnit unit,\n            DateTickMarkPosition position)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksHorizontal", "parameters": "(Graphics2D g2,\n                Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksHorizontal(Graphics2D g2,\n                Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "protected List refreshTicksHorizontal(Graphics2D g2,\n                Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "DateAxis.refreshTicksHorizontal(Graphics2D g2,\n                Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksVertical", "parameters": "(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "protected List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "DateAxis.refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "modifiers": "public", "return": "AxisState", "signature": "AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "full_signature": "public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "class_method_signature": "DateAxis.draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "zoomRange", "parameters": "(double lowerPercent, double upperPercent)", "modifiers": "public", "return": "void", "signature": "void zoomRange(double lowerPercent, double upperPercent)", "full_signature": "public void zoomRange(double lowerPercent, double upperPercent)", "class_method_signature": "DateAxis.zoomRange(double lowerPercent, double upperPercent)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DateAxis.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "DateAxis.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "DateAxis.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/DateAxis.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int hashCode() {\n        if (getLabel() != null) {\n            return getLabel().hashCode();\n        }\n        else {\n            return 0;\n        }\n    }", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "DateAxis.hashCode()", "testcase": false, "constructor": false, "invocations": ["getLabel", "hashCode", "getLabel"]}, "repository": {"repo_id": "Chart_1_buggy"}}