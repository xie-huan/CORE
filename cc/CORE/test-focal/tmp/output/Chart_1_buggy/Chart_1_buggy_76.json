{"test_class": {"identifier": "PiePlotTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/plot/junit/PiePlotTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n\n        PiePlot plot1 = new PiePlot();\n        PiePlot plot2 = new PiePlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        // pieIndex...\n        plot1.setPieIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setPieIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        // interiorGap...\n        plot1.setInteriorGap(0.15);\n        assertFalse(plot1.equals(plot2));\n        plot2.setInteriorGap(0.15);\n        assertTrue(plot1.equals(plot2));\n\n        // circular\n        plot1.setCircular(!plot1.isCircular());\n        assertFalse(plot1.equals(plot2));\n        plot2.setCircular(false);\n        assertTrue(plot1.equals(plot2));\n\n        // startAngle\n        plot1.setStartAngle(Math.PI);\n        assertFalse(plot1.equals(plot2));\n        plot2.setStartAngle(Math.PI);\n        assertTrue(plot1.equals(plot2));\n\n        // direction\n        plot1.setDirection(Rotation.ANTICLOCKWISE);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDirection(Rotation.ANTICLOCKWISE);\n        assertTrue(plot1.equals(plot2));\n\n        // ignoreZeroValues\n        plot1.setIgnoreZeroValues(true);\n        plot2.setIgnoreZeroValues(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setIgnoreZeroValues(true);\n        assertTrue(plot1.equals(plot2));\n\n        // ignoreNullValues\n        plot1.setIgnoreNullValues(true);\n        plot2.setIgnoreNullValues(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setIgnoreNullValues(true);\n        assertTrue(plot1.equals(plot2));\n\n        // sectionPaintMap\n        plot1.setSectionPaint(\"A\", new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionPaint(\"A\", new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // baseSectionPaint\n        plot1.setBaseSectionPaint(new GradientPaint(1.0f, 2.0f, Color.black,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBaseSectionPaint(new GradientPaint(1.0f, 2.0f, Color.black,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // sectionOutlinesVisible\n        plot1.setSectionOutlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionOutlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // sectionOutlinePaintList\n        plot1.setSectionOutlinePaint(\"A\", new GradientPaint(1.0f, 2.0f,\n                Color.green, 3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionOutlinePaint(\"A\", new GradientPaint(1.0f, 2.0f,\n                Color.green, 3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // baseSectionOutlinePaint\n        plot1.setBaseSectionOutlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.gray, 3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBaseSectionOutlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.gray, 3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // sectionOutlineStrokeList\n        plot1.setSectionOutlineStroke(\"A\", new BasicStroke(1.0f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setSectionOutlineStroke(\"A\", new BasicStroke(1.0f));\n        assertTrue(plot1.equals(plot2));\n\n        // baseSectionOutlineStroke\n        plot1.setBaseSectionOutlineStroke(new BasicStroke(1.0f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setBaseSectionOutlineStroke(new BasicStroke(1.0f));\n        assertTrue(plot1.equals(plot2));\n\n        // shadowPaint\n        plot1.setShadowPaint(new GradientPaint(1.0f, 2.0f, Color.orange,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowPaint(new GradientPaint(1.0f, 2.0f, Color.orange,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // shadowXOffset\n        plot1.setShadowXOffset(4.4);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowXOffset(4.4);\n        assertTrue(plot1.equals(plot2));\n\n        // shadowYOffset\n        plot1.setShadowYOffset(4.4);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowYOffset(4.4);\n        assertTrue(plot1.equals(plot2));\n\n        // labelFont\n        plot1.setLabelFont(new Font(\"Serif\", Font.PLAIN, 18));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelFont(new Font(\"Serif\", Font.PLAIN, 18));\n        assertTrue(plot1.equals(plot2));\n\n        // labelPaint\n        plot1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.darkGray,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.darkGray,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // labelBackgroundPaint\n        plot1.setLabelBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // labelOutlinePaint\n        plot1.setLabelOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // labelOutlineStroke\n        Stroke s = new BasicStroke(1.1f);\n        plot1.setLabelOutlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelOutlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        // labelShadowPaint\n        plot1.setLabelShadowPaint(new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelShadowPaint(new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // explodePercentages\n        plot1.setExplodePercent(\"A\", 0.33);\n        assertFalse(plot1.equals(plot2));\n        plot2.setExplodePercent(\"A\", 0.33);\n        assertTrue(plot1.equals(plot2));\n\n        // labelGenerator\n        plot1.setLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{2}{1}{0}\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{2}{1}{0}\"));\n        assertTrue(plot1.equals(plot2));\n\n        // labelFont\n        Font f = new Font(\"SansSerif\", Font.PLAIN, 20);\n        plot1.setLabelFont(f);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelFont(f);\n        assertTrue(plot1.equals(plot2));\n\n        // labelPaint\n        plot1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.magenta,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.magenta,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // maximumLabelWidth\n        plot1.setMaximumLabelWidth(0.33);\n        assertFalse(plot1.equals(plot2));\n        plot2.setMaximumLabelWidth(0.33);\n        assertTrue(plot1.equals(plot2));\n\n        // labelGap\n        plot1.setLabelGap(0.11);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelGap(0.11);\n        assertTrue(plot1.equals(plot2));\n\n        // links visible\n        plot1.setLabelLinksVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinksVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setLabelLinkStyle(PieLabelLinkStyle.QUAD_CURVE);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkStyle(PieLabelLinkStyle.QUAD_CURVE);\n        assertTrue(plot1.equals(plot2));\n\n        // linkMargin\n        plot1.setLabelLinkMargin(0.11);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkMargin(0.11);\n        assertTrue(plot1.equals(plot2));\n\n        // labelLinkPaint\n        plot1.setLabelLinkPaint(new GradientPaint(1.0f, 2.0f, Color.magenta,\n                3.0f, 4.0f, Color.white));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkPaint(new GradientPaint(1.0f, 2.0f, Color.magenta,\n                3.0f, 4.0f, Color.white));\n        assertTrue(plot1.equals(plot2));\n\n        // labelLinkStroke\n        plot1.setLabelLinkStroke(new BasicStroke(1.0f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelLinkStroke(new BasicStroke(1.0f));\n        assertTrue(plot1.equals(plot2));\n\n        // toolTipGenerator\n        plot1.setToolTipGenerator(\n            new StandardPieToolTipGenerator(\"{2}{1}{0}\")\n        );\n        assertFalse(plot1.equals(plot2));\n        plot2.setToolTipGenerator(\n            new StandardPieToolTipGenerator(\"{2}{1}{0}\")\n        );\n        assertTrue(plot1.equals(plot2));\n\n        // urlGenerator\n        plot1.setURLGenerator(new StandardPieURLGenerator(\"xx\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setURLGenerator(new StandardPieURLGenerator(\"xx\"));\n        assertTrue(plot1.equals(plot2));\n\n        // minimumArcAngleToDraw\n        plot1.setMinimumArcAngleToDraw(1.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setMinimumArcAngleToDraw(1.0);\n        assertTrue(plot1.equals(plot2));\n\n        // legendItemShape\n        plot1.setLegendItemShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendItemShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(plot1.equals(plot2));\n\n        // legendLabelGenerator\n        plot1.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{0} --> {1}\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(\n                \"{0} --> {1}\"));\n        assertTrue(plot1.equals(plot2));\n\n        // legendLabelToolTipGenerator\n        plot1.setLegendLabelToolTipGenerator(\n                new StandardPieSectionLabelGenerator(\"{0} is {1}\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendLabelToolTipGenerator(\n                new StandardPieSectionLabelGenerator(\"{0} is {1}\"));\n        assertTrue(plot1.equals(plot2));\n\n        // legendLabelURLGenerator\n        plot1.setLegendLabelURLGenerator(new StandardPieURLGenerator(\n                \"index.html\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLegendLabelURLGenerator(new StandardPieURLGenerator(\n                \"index.html\"));\n        assertTrue(plot1.equals(plot2));\n\n        // autoPopulateSectionPaint\n        plot1.setAutoPopulateSectionPaint(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAutoPopulateSectionPaint(false);\n        assertTrue(plot1.equals(plot2));\n\n        // autoPopulateSectionOutlinePaint\n        plot1.setAutoPopulateSectionOutlinePaint(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAutoPopulateSectionOutlinePaint(true);\n        assertTrue(plot1.equals(plot2));\n\n        // autoPopulateSectionOutlineStroke\n        plot1.setAutoPopulateSectionOutlineStroke(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAutoPopulateSectionOutlineStroke(true);\n        assertTrue(plot1.equals(plot2));\n\n        // shadowGenerator\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "PiePlotTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "setPieIndex", "assertFalse", "equals", "setPieIndex", "assertTrue", "equals", "setInteriorGap", "assertFalse", "equals", "setInteriorGap", "assertTrue", "equals", "setCircular", "isCircular", "assertFalse", "equals", "setCircular", "assertTrue", "equals", "setStartAngle", "assertFalse", "equals", "setStartAngle", "assertTrue", "equals", "setDirection", "assertFalse", "equals", "setDirection", "assertTrue", "equals", "setIgnoreZeroValues", "setIgnoreZeroValues", "assertFalse", "equals", "setIgnoreZeroValues", "assertTrue", "equals", "setIgnoreNullValues", "setIgnoreNullValues", "assertFalse", "equals", "setIgnoreNullValues", "assertTrue", "equals", "setSectionPaint", "assertFalse", "equals", "setSectionPaint", "assertTrue", "equals", "setBaseSectionPaint", "assertFalse", "equals", "setBaseSectionPaint", "assertTrue", "equals", "setSectionOutlinesVisible", "assertFalse", "equals", "setSectionOutlinesVisible", "assertTrue", "equals", "setSectionOutlinePaint", "assertFalse", "equals", "setSectionOutlinePaint", "assertTrue", "equals", "setBaseSectionOutlinePaint", "assertFalse", "equals", "setBaseSectionOutlinePaint", "assertTrue", "equals", "setSectionOutlineStroke", "assertFalse", "equals", "setSectionOutlineStroke", "assertTrue", "equals", "setBaseSectionOutlineStroke", "assertFalse", "equals", "setBaseSectionOutlineStroke", "assertTrue", "equals", "setShadowPaint", "assertFalse", "equals", "setShadowPaint", "assertTrue", "equals", "setShadowXOffset", "assertFalse", "equals", "setShadowXOffset", "assertTrue", "equals", "setShadowYOffset", "assertFalse", "equals", "setShadowYOffset", "assertTrue", "equals", "setLabelFont", "assertFalse", "equals", "setLabelFont", "assertTrue", "equals", "setLabelPaint", "assertFalse", "equals", "setLabelPaint", "assertTrue", "equals", "setLabelBackgroundPaint", "assertFalse", "equals", "setLabelBackgroundPaint", "assertTrue", "equals", "setLabelOutlinePaint", "assertFalse", "equals", "setLabelOutlinePaint", "assertTrue", "equals", "setLabelOutlineStroke", "assertFalse", "equals", "setLabelOutlineStroke", "assertTrue", "equals", "setLabelShadowPaint", "assertFalse", "equals", "setLabelShadowPaint", "assertTrue", "equals", "setExplodePercent", "assertFalse", "equals", "setExplodePercent", "assertTrue", "equals", "setLabelGenerator", "assertFalse", "equals", "setLabelGenerator", "assertTrue", "equals", "setLabelFont", "assertFalse", "equals", "setLabelFont", "assertTrue", "equals", "setLabelPaint", "assertFalse", "equals", "setLabelPaint", "assertTrue", "equals", "setMaximumLabelWidth", "assertFalse", "equals", "setMaximumLabelWidth", "assertTrue", "equals", "setLabelGap", "assertFalse", "equals", "setLabelGap", "assertTrue", "equals", "setLabelLinksVisible", "assertFalse", "equals", "setLabelLinksVisible", "assertTrue", "equals", "setLabelLinkStyle", "assertFalse", "equals", "setLabelLinkStyle", "assertTrue", "equals", "setLabelLinkMargin", "assertFalse", "equals", "setLabelLinkMargin", "assertTrue", "equals", "setLabelLinkPaint", "assertFalse", "equals", "setLabelLinkPaint", "assertTrue", "equals", "setLabelLinkStroke", "assertFalse", "equals", "setLabelLinkStroke", "assertTrue", "equals", "setToolTipGenerator", "assertFalse", "equals", "setToolTipGenerator", "assertTrue", "equals", "setURLGenerator", "assertFalse", "equals", "setURLGenerator", "assertTrue", "equals", "setMinimumArcAngleToDraw", "assertFalse", "equals", "setMinimumArcAngleToDraw", "assertTrue", "equals", "setLegendItemShape", "assertFalse", "equals", "setLegendItemShape", "assertTrue", "equals", "setLegendLabelGenerator", "assertFalse", "equals", "setLegendLabelGenerator", "assertTrue", "equals", "setLegendLabelToolTipGenerator", "assertFalse", "equals", "setLegendLabelToolTipGenerator", "assertTrue", "equals", "setLegendLabelURLGenerator", "assertFalse", "equals", "setLegendLabelURLGenerator", "assertTrue", "equals", "setAutoPopulateSectionPaint", "assertFalse", "equals", "setAutoPopulateSectionPaint", "assertTrue", "equals", "setAutoPopulateSectionOutlinePaint", "assertFalse", "equals", "setAutoPopulateSectionOutlinePaint", "assertTrue", "equals", "setAutoPopulateSectionOutlineStroke", "assertFalse", "equals", "setAutoPopulateSectionOutlineStroke", "assertTrue", "equals", "setShadowGenerator", "assertFalse", "equals", "setShadowGenerator", "assertTrue", "equals", "setShadowGenerator", "assertFalse", "equals", "setShadowGenerator", "assertTrue", "equals"]}, "focal_class": {"identifier": "PiePlot", "superclass": "extends Plot", "interfaces": "implements Selectable, Cloneable,\n        Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -795612466005590431L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -795612466005590431L", "var_name": "serialVersionUID"}, {"original_string": "public static final double DEFAULT_INTERIOR_GAP = 0.08;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_INTERIOR_GAP = 0.08", "var_name": "DEFAULT_INTERIOR_GAP"}, {"original_string": "public static final double MAX_INTERIOR_GAP = 0.40;", "modifier": "public static final", "type": "double", "declarator": "MAX_INTERIOR_GAP = 0.40", "var_name": "MAX_INTERIOR_GAP"}, {"original_string": "public static final double DEFAULT_START_ANGLE = 90.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_START_ANGLE = 90.0", "var_name": "DEFAULT_START_ANGLE"}, {"original_string": "public static final Font DEFAULT_LABEL_FONT = new Font(\"Tahoma\",\n            Font.PLAIN, 10);", "modifier": "public static final", "type": "Font", "declarator": "DEFAULT_LABEL_FONT = new Font(\"Tahoma\",\n            Font.PLAIN, 10)", "var_name": "DEFAULT_LABEL_FONT"}, {"original_string": "public static final Paint DEFAULT_LABEL_PAINT = Color.black;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_PAINT = Color.black", "var_name": "DEFAULT_LABEL_PAINT"}, {"original_string": "public static final Paint DEFAULT_LABEL_BACKGROUND_PAINT = new Color(255,\n            255, 192);", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_BACKGROUND_PAINT = new Color(255,\n            255, 192)", "var_name": "DEFAULT_LABEL_BACKGROUND_PAINT"}, {"original_string": "public static final Paint DEFAULT_LABEL_OUTLINE_PAINT = Color.black;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_OUTLINE_PAINT = Color.black", "var_name": "DEFAULT_LABEL_OUTLINE_PAINT"}, {"original_string": "public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE = new BasicStroke(\n            0.5f);", "modifier": "public static final", "type": "Stroke", "declarator": "DEFAULT_LABEL_OUTLINE_STROKE = new BasicStroke(\n            0.5f)", "var_name": "DEFAULT_LABEL_OUTLINE_STROKE"}, {"original_string": "public static final Paint DEFAULT_LABEL_SHADOW_PAINT = new Color(151, 151,\n            151, 128);", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_SHADOW_PAINT = new Color(151, 151,\n            151, 128)", "var_name": "DEFAULT_LABEL_SHADOW_PAINT"}, {"original_string": "public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW = 0.00001", "var_name": "DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW"}, {"original_string": "private PieDataset dataset;", "modifier": "private", "type": "PieDataset", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private int pieIndex;", "modifier": "private", "type": "int", "declarator": "pieIndex", "var_name": "pieIndex"}, {"original_string": "private double interiorGap;", "modifier": "private", "type": "double", "declarator": "interiorGap", "var_name": "interiorGap"}, {"original_string": "private boolean circular;", "modifier": "private", "type": "boolean", "declarator": "circular", "var_name": "circular"}, {"original_string": "private double startAngle;", "modifier": "private", "type": "double", "declarator": "startAngle", "var_name": "startAngle"}, {"original_string": "private Rotation direction;", "modifier": "private", "type": "Rotation", "declarator": "direction", "var_name": "direction"}, {"original_string": "private PaintMap sectionPaintMap;", "modifier": "private", "type": "PaintMap", "declarator": "sectionPaintMap", "var_name": "sectionPaintMap"}, {"original_string": "private transient Paint baseSectionPaint;", "modifier": "private transient", "type": "Paint", "declarator": "baseSectionPaint", "var_name": "baseSectionPaint"}, {"original_string": "private boolean autoPopulateSectionPaint;", "modifier": "private", "type": "boolean", "declarator": "autoPopulateSectionPaint", "var_name": "autoPopulateSectionPaint"}, {"original_string": "private boolean sectionOutlinesVisible;", "modifier": "private", "type": "boolean", "declarator": "sectionOutlinesVisible", "var_name": "sectionOutlinesVisible"}, {"original_string": "private PaintMap sectionOutlinePaintMap;", "modifier": "private", "type": "PaintMap", "declarator": "sectionOutlinePaintMap", "var_name": "sectionOutlinePaintMap"}, {"original_string": "private transient Paint baseSectionOutlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "baseSectionOutlinePaint", "var_name": "baseSectionOutlinePaint"}, {"original_string": "private boolean autoPopulateSectionOutlinePaint;", "modifier": "private", "type": "boolean", "declarator": "autoPopulateSectionOutlinePaint", "var_name": "autoPopulateSectionOutlinePaint"}, {"original_string": "private StrokeMap sectionOutlineStrokeMap;", "modifier": "private", "type": "StrokeMap", "declarator": "sectionOutlineStrokeMap", "var_name": "sectionOutlineStrokeMap"}, {"original_string": "private transient Stroke baseSectionOutlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "baseSectionOutlineStroke", "var_name": "baseSectionOutlineStroke"}, {"original_string": "private boolean autoPopulateSectionOutlineStroke;", "modifier": "private", "type": "boolean", "declarator": "autoPopulateSectionOutlineStroke", "var_name": "autoPopulateSectionOutlineStroke"}, {"original_string": "private transient Paint shadowPaint = Color.gray;", "modifier": "private transient", "type": "Paint", "declarator": "shadowPaint = Color.gray", "var_name": "shadowPaint"}, {"original_string": "private double shadowXOffset = 4.0f;", "modifier": "private", "type": "double", "declarator": "shadowXOffset = 4.0f", "var_name": "shadowXOffset"}, {"original_string": "private double shadowYOffset = 4.0f;", "modifier": "private", "type": "double", "declarator": "shadowYOffset = 4.0f", "var_name": "shadowYOffset"}, {"original_string": "private Map explodePercentages;", "modifier": "private", "type": "Map", "declarator": "explodePercentages", "var_name": "explodePercentages"}, {"original_string": "private PieSectionLabelGenerator labelGenerator;", "modifier": "private", "type": "PieSectionLabelGenerator", "declarator": "labelGenerator", "var_name": "labelGenerator"}, {"original_string": "private Font labelFont;", "modifier": "private", "type": "Font", "declarator": "labelFont", "var_name": "labelFont"}, {"original_string": "private transient Paint labelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelPaint", "var_name": "labelPaint"}, {"original_string": "private transient Paint labelBackgroundPaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelBackgroundPaint", "var_name": "labelBackgroundPaint"}, {"original_string": "private transient Paint labelOutlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelOutlinePaint", "var_name": "labelOutlinePaint"}, {"original_string": "private transient Stroke labelOutlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "labelOutlineStroke", "var_name": "labelOutlineStroke"}, {"original_string": "private transient Paint labelShadowPaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelShadowPaint", "var_name": "labelShadowPaint"}, {"original_string": "private boolean simpleLabels = true;", "modifier": "private", "type": "boolean", "declarator": "simpleLabels = true", "var_name": "simpleLabels"}, {"original_string": "private RectangleInsets labelPadding;", "modifier": "private", "type": "RectangleInsets", "declarator": "labelPadding", "var_name": "labelPadding"}, {"original_string": "private RectangleInsets simpleLabelOffset;", "modifier": "private", "type": "RectangleInsets", "declarator": "simpleLabelOffset", "var_name": "simpleLabelOffset"}, {"original_string": "private double maximumLabelWidth = 0.14;", "modifier": "private", "type": "double", "declarator": "maximumLabelWidth = 0.14", "var_name": "maximumLabelWidth"}, {"original_string": "private double labelGap = 0.025;", "modifier": "private", "type": "double", "declarator": "labelGap = 0.025", "var_name": "labelGap"}, {"original_string": "private boolean labelLinksVisible;", "modifier": "private", "type": "boolean", "declarator": "labelLinksVisible", "var_name": "labelLinksVisible"}, {"original_string": "private PieLabelLinkStyle labelLinkStyle = PieLabelLinkStyle.STANDARD;", "modifier": "private", "type": "PieLabelLinkStyle", "declarator": "labelLinkStyle = PieLabelLinkStyle.STANDARD", "var_name": "labelLinkStyle"}, {"original_string": "private double labelLinkMargin = 0.025;", "modifier": "private", "type": "double", "declarator": "labelLinkMargin = 0.025", "var_name": "labelLinkMargin"}, {"original_string": "private transient Paint labelLinkPaint = Color.black;", "modifier": "private transient", "type": "Paint", "declarator": "labelLinkPaint = Color.black", "var_name": "labelLinkPaint"}, {"original_string": "private transient Stroke labelLinkStroke = new BasicStroke(0.5f);", "modifier": "private transient", "type": "Stroke", "declarator": "labelLinkStroke = new BasicStroke(0.5f)", "var_name": "labelLinkStroke"}, {"original_string": "private AbstractPieLabelDistributor labelDistributor;", "modifier": "private", "type": "AbstractPieLabelDistributor", "declarator": "labelDistributor", "var_name": "labelDistributor"}, {"original_string": "private PieToolTipGenerator toolTipGenerator;", "modifier": "private", "type": "PieToolTipGenerator", "declarator": "toolTipGenerator", "var_name": "toolTipGenerator"}, {"original_string": "private PieURLGenerator urlGenerator;", "modifier": "private", "type": "PieURLGenerator", "declarator": "urlGenerator", "var_name": "urlGenerator"}, {"original_string": "private PieSectionLabelGenerator legendLabelGenerator;", "modifier": "private", "type": "PieSectionLabelGenerator", "declarator": "legendLabelGenerator", "var_name": "legendLabelGenerator"}, {"original_string": "private PieSectionLabelGenerator legendLabelToolTipGenerator;", "modifier": "private", "type": "PieSectionLabelGenerator", "declarator": "legendLabelToolTipGenerator", "var_name": "legendLabelToolTipGenerator"}, {"original_string": "private PieURLGenerator legendLabelURLGenerator;", "modifier": "private", "type": "PieURLGenerator", "declarator": "legendLabelURLGenerator", "var_name": "legendLabelURLGenerator"}, {"original_string": "private boolean ignoreNullValues;", "modifier": "private", "type": "boolean", "declarator": "ignoreNullValues", "var_name": "ignoreNullValues"}, {"original_string": "private boolean ignoreZeroValues;", "modifier": "private", "type": "boolean", "declarator": "ignoreZeroValues", "var_name": "ignoreZeroValues"}, {"original_string": "private transient Shape legendItemShape;", "modifier": "private transient", "type": "Shape", "declarator": "legendItemShape", "var_name": "legendItemShape"}, {"original_string": "private double minimumArcAngleToDraw;", "modifier": "private", "type": "double", "declarator": "minimumArcAngleToDraw", "var_name": "minimumArcAngleToDraw"}, {"original_string": "private ShadowGenerator shadowGenerator;", "modifier": "private", "type": "ShadowGenerator", "declarator": "shadowGenerator", "var_name": "shadowGenerator"}, {"original_string": "protected static ResourceBundle localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\");", "modifier": "protected static", "type": "ResourceBundle", "declarator": "localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\")", "var_name": "localizationResources"}, {"original_string": "private PieSelectionAttributes selectedItemAttributes;", "modifier": "private", "type": "PieSelectionAttributes", "declarator": "selectedItemAttributes", "var_name": "selectedItemAttributes"}, {"original_string": "static final boolean DEBUG_DRAW_INTERIOR = false;", "modifier": "static final", "type": "boolean", "declarator": "DEBUG_DRAW_INTERIOR = false", "var_name": "DEBUG_DRAW_INTERIOR"}, {"original_string": "static final boolean DEBUG_DRAW_LINK_AREA = false;", "modifier": "static final", "type": "boolean", "declarator": "DEBUG_DRAW_LINK_AREA = false", "var_name": "DEBUG_DRAW_LINK_AREA"}, {"original_string": "static final boolean DEBUG_DRAW_PIE_AREA = false;", "modifier": "static final", "type": "boolean", "declarator": "DEBUG_DRAW_PIE_AREA = false", "var_name": "DEBUG_DRAW_PIE_AREA"}], "methods": [{"identifier": "PiePlot", "parameters": "()", "modifiers": "public", "return": "", "signature": " PiePlot()", "full_signature": "public  PiePlot()", "class_method_signature": "PiePlot.PiePlot()", "testcase": false, "constructor": true}, {"identifier": "PiePlot", "parameters": "(PieDataset dataset)", "modifiers": "public", "return": "", "signature": " PiePlot(PieDataset dataset)", "full_signature": "public  PiePlot(PieDataset dataset)", "class_method_signature": "PiePlot.PiePlot(PieDataset dataset)", "testcase": false, "constructor": true}, {"identifier": "getDataset", "parameters": "()", "modifiers": "public", "return": "PieDataset", "signature": "PieDataset getDataset()", "full_signature": "public PieDataset getDataset()", "class_method_signature": "PiePlot.getDataset()", "testcase": false, "constructor": false}, {"identifier": "setDataset", "parameters": "(PieDataset dataset)", "modifiers": "public", "return": "void", "signature": "void setDataset(PieDataset dataset)", "full_signature": "public void setDataset(PieDataset dataset)", "class_method_signature": "PiePlot.setDataset(PieDataset dataset)", "testcase": false, "constructor": false}, {"identifier": "getPieIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPieIndex()", "full_signature": "public int getPieIndex()", "class_method_signature": "PiePlot.getPieIndex()", "testcase": false, "constructor": false}, {"identifier": "setPieIndex", "parameters": "(int index)", "modifiers": "public", "return": "void", "signature": "void setPieIndex(int index)", "full_signature": "public void setPieIndex(int index)", "class_method_signature": "PiePlot.setPieIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "getStartAngle", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStartAngle()", "full_signature": "public double getStartAngle()", "class_method_signature": "PiePlot.getStartAngle()", "testcase": false, "constructor": false}, {"identifier": "setStartAngle", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void setStartAngle(double angle)", "full_signature": "public void setStartAngle(double angle)", "class_method_signature": "PiePlot.setStartAngle(double angle)", "testcase": false, "constructor": false}, {"identifier": "getDirection", "parameters": "()", "modifiers": "public", "return": "Rotation", "signature": "Rotation getDirection()", "full_signature": "public Rotation getDirection()", "class_method_signature": "PiePlot.getDirection()", "testcase": false, "constructor": false}, {"identifier": "setDirection", "parameters": "(Rotation direction)", "modifiers": "public", "return": "void", "signature": "void setDirection(Rotation direction)", "full_signature": "public void setDirection(Rotation direction)", "class_method_signature": "PiePlot.setDirection(Rotation direction)", "testcase": false, "constructor": false}, {"identifier": "getInteriorGap", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getInteriorGap()", "full_signature": "public double getInteriorGap()", "class_method_signature": "PiePlot.getInteriorGap()", "testcase": false, "constructor": false}, {"identifier": "setInteriorGap", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void setInteriorGap(double percent)", "full_signature": "public void setInteriorGap(double percent)", "class_method_signature": "PiePlot.setInteriorGap(double percent)", "testcase": false, "constructor": false}, {"identifier": "isCircular", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCircular()", "full_signature": "public boolean isCircular()", "class_method_signature": "PiePlot.isCircular()", "testcase": false, "constructor": false}, {"identifier": "setCircular", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setCircular(boolean flag)", "full_signature": "public void setCircular(boolean flag)", "class_method_signature": "PiePlot.setCircular(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "setCircular", "parameters": "(boolean circular, boolean notify)", "modifiers": "public", "return": "void", "signature": "void setCircular(boolean circular, boolean notify)", "full_signature": "public void setCircular(boolean circular, boolean notify)", "class_method_signature": "PiePlot.setCircular(boolean circular, boolean notify)", "testcase": false, "constructor": false}, {"identifier": "getIgnoreNullValues", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIgnoreNullValues()", "full_signature": "public boolean getIgnoreNullValues()", "class_method_signature": "PiePlot.getIgnoreNullValues()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreNullValues", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setIgnoreNullValues(boolean flag)", "full_signature": "public void setIgnoreNullValues(boolean flag)", "class_method_signature": "PiePlot.setIgnoreNullValues(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getIgnoreZeroValues", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIgnoreZeroValues()", "full_signature": "public boolean getIgnoreZeroValues()", "class_method_signature": "PiePlot.getIgnoreZeroValues()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreZeroValues", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setIgnoreZeroValues(boolean flag)", "full_signature": "public void setIgnoreZeroValues(boolean flag)", "class_method_signature": "PiePlot.setIgnoreZeroValues(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "lookupSectionPaint", "parameters": "(Comparable key, boolean selected)", "modifiers": "protected", "return": "Paint", "signature": "Paint lookupSectionPaint(Comparable key, boolean selected)", "full_signature": "protected Paint lookupSectionPaint(Comparable key, boolean selected)", "class_method_signature": "PiePlot.lookupSectionPaint(Comparable key, boolean selected)", "testcase": false, "constructor": false}, {"identifier": "lookupSectionPaint", "parameters": "(Comparable key, boolean selected, \n            boolean autoPopulate)", "modifiers": "protected", "return": "Paint", "signature": "Paint lookupSectionPaint(Comparable key, boolean selected, \n            boolean autoPopulate)", "full_signature": "protected Paint lookupSectionPaint(Comparable key, boolean selected, \n            boolean autoPopulate)", "class_method_signature": "PiePlot.lookupSectionPaint(Comparable key, boolean selected, \n            boolean autoPopulate)", "testcase": false, "constructor": false}, {"identifier": "getSectionKey", "parameters": "(int section)", "modifiers": "protected", "return": "Comparable", "signature": "Comparable getSectionKey(int section)", "full_signature": "protected Comparable getSectionKey(int section)", "class_method_signature": "PiePlot.getSectionKey(int section)", "testcase": false, "constructor": false}, {"identifier": "getSectionPaint", "parameters": "(Comparable key, boolean selected)", "modifiers": "public", "return": "Paint", "signature": "Paint getSectionPaint(Comparable key, boolean selected)", "full_signature": "public Paint getSectionPaint(Comparable key, boolean selected)", "class_method_signature": "PiePlot.getSectionPaint(Comparable key, boolean selected)", "testcase": false, "constructor": false}, {"identifier": "setSectionPaint", "parameters": "(Comparable key, Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSectionPaint(Comparable key, Paint paint)", "full_signature": "public void setSectionPaint(Comparable key, Paint paint)", "class_method_signature": "PiePlot.setSectionPaint(Comparable key, Paint paint)", "testcase": false, "constructor": false}, {"identifier": "clearSectionPaints", "parameters": "(boolean notify)", "modifiers": "public", "return": "void", "signature": "void clearSectionPaints(boolean notify)", "full_signature": "public void clearSectionPaints(boolean notify)", "class_method_signature": "PiePlot.clearSectionPaints(boolean notify)", "testcase": false, "constructor": false}, {"identifier": "getBaseSectionPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getBaseSectionPaint()", "full_signature": "public Paint getBaseSectionPaint()", "class_method_signature": "PiePlot.getBaseSectionPaint()", "testcase": false, "constructor": false}, {"identifier": "setBaseSectionPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setBaseSectionPaint(Paint paint)", "full_signature": "public void setBaseSectionPaint(Paint paint)", "class_method_signature": "PiePlot.setBaseSectionPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getAutoPopulateSectionPaint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoPopulateSectionPaint()", "full_signature": "public boolean getAutoPopulateSectionPaint()", "class_method_signature": "PiePlot.getAutoPopulateSectionPaint()", "testcase": false, "constructor": false}, {"identifier": "setAutoPopulateSectionPaint", "parameters": "(boolean auto)", "modifiers": "public", "return": "void", "signature": "void setAutoPopulateSectionPaint(boolean auto)", "full_signature": "public void setAutoPopulateSectionPaint(boolean auto)", "class_method_signature": "PiePlot.setAutoPopulateSectionPaint(boolean auto)", "testcase": false, "constructor": false}, {"identifier": "getSectionOutlinesVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSectionOutlinesVisible()", "full_signature": "public boolean getSectionOutlinesVisible()", "class_method_signature": "PiePlot.getSectionOutlinesVisible()", "testcase": false, "constructor": false}, {"identifier": "setSectionOutlinesVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setSectionOutlinesVisible(boolean visible)", "full_signature": "public void setSectionOutlinesVisible(boolean visible)", "class_method_signature": "PiePlot.setSectionOutlinesVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "lookupSectionOutlinePaint", "parameters": "(Comparable key,\n            boolean selected)", "modifiers": "protected", "return": "Paint", "signature": "Paint lookupSectionOutlinePaint(Comparable key,\n            boolean selected)", "full_signature": "protected Paint lookupSectionOutlinePaint(Comparable key,\n            boolean selected)", "class_method_signature": "PiePlot.lookupSectionOutlinePaint(Comparable key,\n            boolean selected)", "testcase": false, "constructor": false}, {"identifier": "lookupSectionOutlinePaint", "parameters": "(Comparable key, boolean selected,\n            boolean autoPopulate)", "modifiers": "protected", "return": "Paint", "signature": "Paint lookupSectionOutlinePaint(Comparable key, boolean selected,\n            boolean autoPopulate)", "full_signature": "protected Paint lookupSectionOutlinePaint(Comparable key, boolean selected,\n            boolean autoPopulate)", "class_method_signature": "PiePlot.lookupSectionOutlinePaint(Comparable key, boolean selected,\n            boolean autoPopulate)", "testcase": false, "constructor": false}, {"identifier": "getSectionOutlinePaint", "parameters": "(Comparable key)", "modifiers": "public", "return": "Paint", "signature": "Paint getSectionOutlinePaint(Comparable key)", "full_signature": "public Paint getSectionOutlinePaint(Comparable key)", "class_method_signature": "PiePlot.getSectionOutlinePaint(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "setSectionOutlinePaint", "parameters": "(Comparable key, Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSectionOutlinePaint(Comparable key, Paint paint)", "full_signature": "public void setSectionOutlinePaint(Comparable key, Paint paint)", "class_method_signature": "PiePlot.setSectionOutlinePaint(Comparable key, Paint paint)", "testcase": false, "constructor": false}, {"identifier": "clearSectionOutlinePaints", "parameters": "(boolean notify)", "modifiers": "public", "return": "void", "signature": "void clearSectionOutlinePaints(boolean notify)", "full_signature": "public void clearSectionOutlinePaints(boolean notify)", "class_method_signature": "PiePlot.clearSectionOutlinePaints(boolean notify)", "testcase": false, "constructor": false}, {"identifier": "getBaseSectionOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getBaseSectionOutlinePaint()", "full_signature": "public Paint getBaseSectionOutlinePaint()", "class_method_signature": "PiePlot.getBaseSectionOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setBaseSectionOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setBaseSectionOutlinePaint(Paint paint)", "full_signature": "public void setBaseSectionOutlinePaint(Paint paint)", "class_method_signature": "PiePlot.setBaseSectionOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getAutoPopulateSectionOutlinePaint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoPopulateSectionOutlinePaint()", "full_signature": "public boolean getAutoPopulateSectionOutlinePaint()", "class_method_signature": "PiePlot.getAutoPopulateSectionOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setAutoPopulateSectionOutlinePaint", "parameters": "(boolean auto)", "modifiers": "public", "return": "void", "signature": "void setAutoPopulateSectionOutlinePaint(boolean auto)", "full_signature": "public void setAutoPopulateSectionOutlinePaint(boolean auto)", "class_method_signature": "PiePlot.setAutoPopulateSectionOutlinePaint(boolean auto)", "testcase": false, "constructor": false}, {"identifier": "lookupSectionOutlineStroke", "parameters": "(Comparable key, \n            boolean selected)", "modifiers": "protected", "return": "Stroke", "signature": "Stroke lookupSectionOutlineStroke(Comparable key, \n            boolean selected)", "full_signature": "protected Stroke lookupSectionOutlineStroke(Comparable key, \n            boolean selected)", "class_method_signature": "PiePlot.lookupSectionOutlineStroke(Comparable key, \n            boolean selected)", "testcase": false, "constructor": false}, {"identifier": "lookupSectionOutlineStroke", "parameters": "(Comparable key,\n            boolean selected, boolean autoPopulate)", "modifiers": "protected", "return": "Stroke", "signature": "Stroke lookupSectionOutlineStroke(Comparable key,\n            boolean selected, boolean autoPopulate)", "full_signature": "protected Stroke lookupSectionOutlineStroke(Comparable key,\n            boolean selected, boolean autoPopulate)", "class_method_signature": "PiePlot.lookupSectionOutlineStroke(Comparable key,\n            boolean selected, boolean autoPopulate)", "testcase": false, "constructor": false}, {"identifier": "getSectionOutlineStroke", "parameters": "(Comparable key)", "modifiers": "public", "return": "Stroke", "signature": "Stroke getSectionOutlineStroke(Comparable key)", "full_signature": "public Stroke getSectionOutlineStroke(Comparable key)", "class_method_signature": "PiePlot.getSectionOutlineStroke(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "setSectionOutlineStroke", "parameters": "(Comparable key, Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setSectionOutlineStroke(Comparable key, Stroke stroke)", "full_signature": "public void setSectionOutlineStroke(Comparable key, Stroke stroke)", "class_method_signature": "PiePlot.setSectionOutlineStroke(Comparable key, Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "clearSectionOutlineStrokes", "parameters": "(boolean notify)", "modifiers": "public", "return": "void", "signature": "void clearSectionOutlineStrokes(boolean notify)", "full_signature": "public void clearSectionOutlineStrokes(boolean notify)", "class_method_signature": "PiePlot.clearSectionOutlineStrokes(boolean notify)", "testcase": false, "constructor": false}, {"identifier": "getBaseSectionOutlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getBaseSectionOutlineStroke()", "full_signature": "public Stroke getBaseSectionOutlineStroke()", "class_method_signature": "PiePlot.getBaseSectionOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setBaseSectionOutlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setBaseSectionOutlineStroke(Stroke stroke)", "full_signature": "public void setBaseSectionOutlineStroke(Stroke stroke)", "class_method_signature": "PiePlot.setBaseSectionOutlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getAutoPopulateSectionOutlineStroke", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoPopulateSectionOutlineStroke()", "full_signature": "public boolean getAutoPopulateSectionOutlineStroke()", "class_method_signature": "PiePlot.getAutoPopulateSectionOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setAutoPopulateSectionOutlineStroke", "parameters": "(boolean auto)", "modifiers": "public", "return": "void", "signature": "void setAutoPopulateSectionOutlineStroke(boolean auto)", "full_signature": "public void setAutoPopulateSectionOutlineStroke(boolean auto)", "class_method_signature": "PiePlot.setAutoPopulateSectionOutlineStroke(boolean auto)", "testcase": false, "constructor": false}, {"identifier": "getShadowPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getShadowPaint()", "full_signature": "public Paint getShadowPaint()", "class_method_signature": "PiePlot.getShadowPaint()", "testcase": false, "constructor": false}, {"identifier": "setShadowPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setShadowPaint(Paint paint)", "full_signature": "public void setShadowPaint(Paint paint)", "class_method_signature": "PiePlot.setShadowPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getShadowXOffset", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getShadowXOffset()", "full_signature": "public double getShadowXOffset()", "class_method_signature": "PiePlot.getShadowXOffset()", "testcase": false, "constructor": false}, {"identifier": "setShadowXOffset", "parameters": "(double offset)", "modifiers": "public", "return": "void", "signature": "void setShadowXOffset(double offset)", "full_signature": "public void setShadowXOffset(double offset)", "class_method_signature": "PiePlot.setShadowXOffset(double offset)", "testcase": false, "constructor": false}, {"identifier": "getShadowYOffset", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getShadowYOffset()", "full_signature": "public double getShadowYOffset()", "class_method_signature": "PiePlot.getShadowYOffset()", "testcase": false, "constructor": false}, {"identifier": "setShadowYOffset", "parameters": "(double offset)", "modifiers": "public", "return": "void", "signature": "void setShadowYOffset(double offset)", "full_signature": "public void setShadowYOffset(double offset)", "class_method_signature": "PiePlot.setShadowYOffset(double offset)", "testcase": false, "constructor": false}, {"identifier": "getExplodePercent", "parameters": "(Comparable key)", "modifiers": "public", "return": "double", "signature": "double getExplodePercent(Comparable key)", "full_signature": "public double getExplodePercent(Comparable key)", "class_method_signature": "PiePlot.getExplodePercent(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "setExplodePercent", "parameters": "(Comparable key, double percent)", "modifiers": "public", "return": "void", "signature": "void setExplodePercent(Comparable key, double percent)", "full_signature": "public void setExplodePercent(Comparable key, double percent)", "class_method_signature": "PiePlot.setExplodePercent(Comparable key, double percent)", "testcase": false, "constructor": false}, {"identifier": "getMaximumExplodePercent", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaximumExplodePercent()", "full_signature": "public double getMaximumExplodePercent()", "class_method_signature": "PiePlot.getMaximumExplodePercent()", "testcase": false, "constructor": false}, {"identifier": "getLabelGenerator", "parameters": "()", "modifiers": "public", "return": "PieSectionLabelGenerator", "signature": "PieSectionLabelGenerator getLabelGenerator()", "full_signature": "public PieSectionLabelGenerator getLabelGenerator()", "class_method_signature": "PiePlot.getLabelGenerator()", "testcase": false, "constructor": false}, {"identifier": "setLabelGenerator", "parameters": "(PieSectionLabelGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setLabelGenerator(PieSectionLabelGenerator generator)", "full_signature": "public void setLabelGenerator(PieSectionLabelGenerator generator)", "class_method_signature": "PiePlot.setLabelGenerator(PieSectionLabelGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getLabelGap", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLabelGap()", "full_signature": "public double getLabelGap()", "class_method_signature": "PiePlot.getLabelGap()", "testcase": false, "constructor": false}, {"identifier": "setLabelGap", "parameters": "(double gap)", "modifiers": "public", "return": "void", "signature": "void setLabelGap(double gap)", "full_signature": "public void setLabelGap(double gap)", "class_method_signature": "PiePlot.setLabelGap(double gap)", "testcase": false, "constructor": false}, {"identifier": "getMaximumLabelWidth", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaximumLabelWidth()", "full_signature": "public double getMaximumLabelWidth()", "class_method_signature": "PiePlot.getMaximumLabelWidth()", "testcase": false, "constructor": false}, {"identifier": "setMaximumLabelWidth", "parameters": "(double width)", "modifiers": "public", "return": "void", "signature": "void setMaximumLabelWidth(double width)", "full_signature": "public void setMaximumLabelWidth(double width)", "class_method_signature": "PiePlot.setMaximumLabelWidth(double width)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinksVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getLabelLinksVisible()", "full_signature": "public boolean getLabelLinksVisible()", "class_method_signature": "PiePlot.getLabelLinksVisible()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinksVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setLabelLinksVisible(boolean visible)", "full_signature": "public void setLabelLinksVisible(boolean visible)", "class_method_signature": "PiePlot.setLabelLinksVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkStyle", "parameters": "()", "modifiers": "public", "return": "PieLabelLinkStyle", "signature": "PieLabelLinkStyle getLabelLinkStyle()", "full_signature": "public PieLabelLinkStyle getLabelLinkStyle()", "class_method_signature": "PiePlot.getLabelLinkStyle()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinkStyle", "parameters": "(PieLabelLinkStyle style)", "modifiers": "public", "return": "void", "signature": "void setLabelLinkStyle(PieLabelLinkStyle style)", "full_signature": "public void setLabelLinkStyle(PieLabelLinkStyle style)", "class_method_signature": "PiePlot.setLabelLinkStyle(PieLabelLinkStyle style)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkMargin", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLabelLinkMargin()", "full_signature": "public double getLabelLinkMargin()", "class_method_signature": "PiePlot.getLabelLinkMargin()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinkMargin", "parameters": "(double margin)", "modifiers": "public", "return": "void", "signature": "void setLabelLinkMargin(double margin)", "full_signature": "public void setLabelLinkMargin(double margin)", "class_method_signature": "PiePlot.setLabelLinkMargin(double margin)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelLinkPaint()", "full_signature": "public Paint getLabelLinkPaint()", "class_method_signature": "PiePlot.getLabelLinkPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinkPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelLinkPaint(Paint paint)", "full_signature": "public void setLabelLinkPaint(Paint paint)", "class_method_signature": "PiePlot.setLabelLinkPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getLabelLinkStroke()", "full_signature": "public Stroke getLabelLinkStroke()", "class_method_signature": "PiePlot.getLabelLinkStroke()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinkStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setLabelLinkStroke(Stroke stroke)", "full_signature": "public void setLabelLinkStroke(Stroke stroke)", "class_method_signature": "PiePlot.setLabelLinkStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkDepth", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double getLabelLinkDepth()", "full_signature": "protected double getLabelLinkDepth()", "class_method_signature": "PiePlot.getLabelLinkDepth()", "testcase": false, "constructor": false}, {"identifier": "getLabelFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getLabelFont()", "full_signature": "public Font getLabelFont()", "class_method_signature": "PiePlot.getLabelFont()", "testcase": false, "constructor": false}, {"identifier": "setLabelFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setLabelFont(Font font)", "full_signature": "public void setLabelFont(Font font)", "class_method_signature": "PiePlot.setLabelFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelPaint()", "full_signature": "public Paint getLabelPaint()", "class_method_signature": "PiePlot.getLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelPaint(Paint paint)", "full_signature": "public void setLabelPaint(Paint paint)", "class_method_signature": "PiePlot.setLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelBackgroundPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelBackgroundPaint()", "full_signature": "public Paint getLabelBackgroundPaint()", "class_method_signature": "PiePlot.getLabelBackgroundPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelBackgroundPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelBackgroundPaint(Paint paint)", "full_signature": "public void setLabelBackgroundPaint(Paint paint)", "class_method_signature": "PiePlot.setLabelBackgroundPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelOutlinePaint()", "full_signature": "public Paint getLabelOutlinePaint()", "class_method_signature": "PiePlot.getLabelOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelOutlinePaint(Paint paint)", "full_signature": "public void setLabelOutlinePaint(Paint paint)", "class_method_signature": "PiePlot.setLabelOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelOutlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getLabelOutlineStroke()", "full_signature": "public Stroke getLabelOutlineStroke()", "class_method_signature": "PiePlot.getLabelOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setLabelOutlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setLabelOutlineStroke(Stroke stroke)", "full_signature": "public void setLabelOutlineStroke(Stroke stroke)", "class_method_signature": "PiePlot.setLabelOutlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getLabelShadowPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelShadowPaint()", "full_signature": "public Paint getLabelShadowPaint()", "class_method_signature": "PiePlot.getLabelShadowPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelShadowPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelShadowPaint(Paint paint)", "full_signature": "public void setLabelShadowPaint(Paint paint)", "class_method_signature": "PiePlot.setLabelShadowPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelPadding", "parameters": "()", "modifiers": "public", "return": "RectangleInsets", "signature": "RectangleInsets getLabelPadding()", "full_signature": "public RectangleInsets getLabelPadding()", "class_method_signature": "PiePlot.getLabelPadding()", "testcase": false, "constructor": false}, {"identifier": "setLabelPadding", "parameters": "(RectangleInsets padding)", "modifiers": "public", "return": "void", "signature": "void setLabelPadding(RectangleInsets padding)", "full_signature": "public void setLabelPadding(RectangleInsets padding)", "class_method_signature": "PiePlot.setLabelPadding(RectangleInsets padding)", "testcase": false, "constructor": false}, {"identifier": "getSimpleLabels", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSimpleLabels()", "full_signature": "public boolean getSimpleLabels()", "class_method_signature": "PiePlot.getSimpleLabels()", "testcase": false, "constructor": false}, {"identifier": "setSimpleLabels", "parameters": "(boolean simple)", "modifiers": "public", "return": "void", "signature": "void setSimpleLabels(boolean simple)", "full_signature": "public void setSimpleLabels(boolean simple)", "class_method_signature": "PiePlot.setSimpleLabels(boolean simple)", "testcase": false, "constructor": false}, {"identifier": "getSimpleLabelOffset", "parameters": "()", "modifiers": "public", "return": "RectangleInsets", "signature": "RectangleInsets getSimpleLabelOffset()", "full_signature": "public RectangleInsets getSimpleLabelOffset()", "class_method_signature": "PiePlot.getSimpleLabelOffset()", "testcase": false, "constructor": false}, {"identifier": "setSimpleLabelOffset", "parameters": "(RectangleInsets offset)", "modifiers": "public", "return": "void", "signature": "void setSimpleLabelOffset(RectangleInsets offset)", "full_signature": "public void setSimpleLabelOffset(RectangleInsets offset)", "class_method_signature": "PiePlot.setSimpleLabelOffset(RectangleInsets offset)", "testcase": false, "constructor": false}, {"identifier": "getLabelDistributor", "parameters": "()", "modifiers": "public", "return": "AbstractPieLabelDistributor", "signature": "AbstractPieLabelDistributor getLabelDistributor()", "full_signature": "public AbstractPieLabelDistributor getLabelDistributor()", "class_method_signature": "PiePlot.getLabelDistributor()", "testcase": false, "constructor": false}, {"identifier": "setLabelDistributor", "parameters": "(AbstractPieLabelDistributor distributor)", "modifiers": "public", "return": "void", "signature": "void setLabelDistributor(AbstractPieLabelDistributor distributor)", "full_signature": "public void setLabelDistributor(AbstractPieLabelDistributor distributor)", "class_method_signature": "PiePlot.setLabelDistributor(AbstractPieLabelDistributor distributor)", "testcase": false, "constructor": false}, {"identifier": "getToolTipGenerator", "parameters": "()", "modifiers": "public", "return": "PieToolTipGenerator", "signature": "PieToolTipGenerator getToolTipGenerator()", "full_signature": "public PieToolTipGenerator getToolTipGenerator()", "class_method_signature": "PiePlot.getToolTipGenerator()", "testcase": false, "constructor": false}, {"identifier": "setToolTipGenerator", "parameters": "(PieToolTipGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setToolTipGenerator(PieToolTipGenerator generator)", "full_signature": "public void setToolTipGenerator(PieToolTipGenerator generator)", "class_method_signature": "PiePlot.setToolTipGenerator(PieToolTipGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getURLGenerator", "parameters": "()", "modifiers": "public", "return": "PieURLGenerator", "signature": "PieURLGenerator getURLGenerator()", "full_signature": "public PieURLGenerator getURLGenerator()", "class_method_signature": "PiePlot.getURLGenerator()", "testcase": false, "constructor": false}, {"identifier": "setURLGenerator", "parameters": "(PieURLGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setURLGenerator(PieURLGenerator generator)", "full_signature": "public void setURLGenerator(PieURLGenerator generator)", "class_method_signature": "PiePlot.setURLGenerator(PieURLGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getMinimumArcAngleToDraw", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinimumArcAngleToDraw()", "full_signature": "public double getMinimumArcAngleToDraw()", "class_method_signature": "PiePlot.getMinimumArcAngleToDraw()", "testcase": false, "constructor": false}, {"identifier": "setMinimumArcAngleToDraw", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void setMinimumArcAngleToDraw(double angle)", "full_signature": "public void setMinimumArcAngleToDraw(double angle)", "class_method_signature": "PiePlot.setMinimumArcAngleToDraw(double angle)", "testcase": false, "constructor": false}, {"identifier": "getLegendItemShape", "parameters": "()", "modifiers": "public", "return": "Shape", "signature": "Shape getLegendItemShape()", "full_signature": "public Shape getLegendItemShape()", "class_method_signature": "PiePlot.getLegendItemShape()", "testcase": false, "constructor": false}, {"identifier": "setLegendItemShape", "parameters": "(Shape shape)", "modifiers": "public", "return": "void", "signature": "void setLegendItemShape(Shape shape)", "full_signature": "public void setLegendItemShape(Shape shape)", "class_method_signature": "PiePlot.setLegendItemShape(Shape shape)", "testcase": false, "constructor": false}, {"identifier": "getLegendLabelGenerator", "parameters": "()", "modifiers": "public", "return": "PieSectionLabelGenerator", "signature": "PieSectionLabelGenerator getLegendLabelGenerator()", "full_signature": "public PieSectionLabelGenerator getLegendLabelGenerator()", "class_method_signature": "PiePlot.getLegendLabelGenerator()", "testcase": false, "constructor": false}, {"identifier": "setLegendLabelGenerator", "parameters": "(PieSectionLabelGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setLegendLabelGenerator(PieSectionLabelGenerator generator)", "full_signature": "public void setLegendLabelGenerator(PieSectionLabelGenerator generator)", "class_method_signature": "PiePlot.setLegendLabelGenerator(PieSectionLabelGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getLegendLabelToolTipGenerator", "parameters": "()", "modifiers": "public", "return": "PieSectionLabelGenerator", "signature": "PieSectionLabelGenerator getLegendLabelToolTipGenerator()", "full_signature": "public PieSectionLabelGenerator getLegendLabelToolTipGenerator()", "class_method_signature": "PiePlot.getLegendLabelToolTipGenerator()", "testcase": false, "constructor": false}, {"identifier": "setLegendLabelToolTipGenerator", "parameters": "(\n            PieSectionLabelGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setLegendLabelToolTipGenerator(\n            PieSectionLabelGenerator generator)", "full_signature": "public void setLegendLabelToolTipGenerator(\n            PieSectionLabelGenerator generator)", "class_method_signature": "PiePlot.setLegendLabelToolTipGenerator(\n            PieSectionLabelGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getLegendLabelURLGenerator", "parameters": "()", "modifiers": "public", "return": "PieURLGenerator", "signature": "PieURLGenerator getLegendLabelURLGenerator()", "full_signature": "public PieURLGenerator getLegendLabelURLGenerator()", "class_method_signature": "PiePlot.getLegendLabelURLGenerator()", "testcase": false, "constructor": false}, {"identifier": "setLegendLabelURLGenerator", "parameters": "(PieURLGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setLegendLabelURLGenerator(PieURLGenerator generator)", "full_signature": "public void setLegendLabelURLGenerator(PieURLGenerator generator)", "class_method_signature": "PiePlot.setLegendLabelURLGenerator(PieURLGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getShadowGenerator", "parameters": "()", "modifiers": "public", "return": "ShadowGenerator", "signature": "ShadowGenerator getShadowGenerator()", "full_signature": "public ShadowGenerator getShadowGenerator()", "class_method_signature": "PiePlot.getShadowGenerator()", "testcase": false, "constructor": false}, {"identifier": "setShadowGenerator", "parameters": "(ShadowGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setShadowGenerator(ShadowGenerator generator)", "full_signature": "public void setShadowGenerator(ShadowGenerator generator)", "class_method_signature": "PiePlot.setShadowGenerator(ShadowGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "handleMouseWheelRotation", "parameters": "(int rotateClicks)", "modifiers": "public", "return": "void", "signature": "void handleMouseWheelRotation(int rotateClicks)", "full_signature": "public void handleMouseWheelRotation(int rotateClicks)", "class_method_signature": "PiePlot.handleMouseWheelRotation(int rotateClicks)", "testcase": false, "constructor": false}, {"identifier": "initialise", "parameters": "(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info)", "modifiers": "public", "return": "PiePlotState", "signature": "PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info)", "full_signature": "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info)", "class_method_signature": "PiePlot.initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState, PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState, PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState, PlotRenderingInfo info)", "class_method_signature": "PiePlot.draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState, PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "calculateLinkAndExplodeAreas", "parameters": "(Graphics2D g2,\n            Rectangle2D plotArea)", "modifiers": "private", "return": "Rectangle2D[]", "signature": "Rectangle2D[] calculateLinkAndExplodeAreas(Graphics2D g2,\n            Rectangle2D plotArea)", "full_signature": "private Rectangle2D[] calculateLinkAndExplodeAreas(Graphics2D g2,\n            Rectangle2D plotArea)", "class_method_signature": "PiePlot.calculateLinkAndExplodeAreas(Graphics2D g2,\n            Rectangle2D plotArea)", "testcase": false, "constructor": false}, {"identifier": "drawPie", "parameters": "(Graphics2D g2, Rectangle2D plotArea,\n                           PlotRenderingInfo info)", "modifiers": "protected", "return": "void", "signature": "void drawPie(Graphics2D g2, Rectangle2D plotArea,\n                           PlotRenderingInfo info)", "full_signature": "protected void drawPie(Graphics2D g2, Rectangle2D plotArea,\n                           PlotRenderingInfo info)", "class_method_signature": "PiePlot.drawPie(Graphics2D g2, Rectangle2D plotArea,\n                           PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "drawItem", "parameters": "(Graphics2D g2, int section, boolean selected, \n            Rectangle2D dataArea, PiePlotState state, int currentPass)", "modifiers": "protected", "return": "void", "signature": "void drawItem(Graphics2D g2, int section, boolean selected, \n            Rectangle2D dataArea, PiePlotState state, int currentPass)", "full_signature": "protected void drawItem(Graphics2D g2, int section, boolean selected, \n            Rectangle2D dataArea, PiePlotState state, int currentPass)", "class_method_signature": "PiePlot.drawItem(Graphics2D g2, int section, boolean selected, \n            Rectangle2D dataArea, PiePlotState state, int currentPass)", "testcase": false, "constructor": false}, {"identifier": "drawSimpleLabels", "parameters": "(Graphics2D g2, List keys,\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea,\n            PiePlotState state)", "modifiers": "protected", "return": "void", "signature": "void drawSimpleLabels(Graphics2D g2, List keys,\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea,\n            PiePlotState state)", "full_signature": "protected void drawSimpleLabels(Graphics2D g2, List keys,\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea,\n            PiePlotState state)", "class_method_signature": "PiePlot.drawSimpleLabels(Graphics2D g2, List keys,\n            double totalValue, Rectangle2D plotArea, Rectangle2D pieArea,\n            PiePlotState state)", "testcase": false, "constructor": false}, {"identifier": "drawLabels", "parameters": "(Graphics2D g2, List keys, double totalValue,\n                              Rectangle2D plotArea, Rectangle2D linkArea,\n                              PiePlotState state)", "modifiers": "protected", "return": "void", "signature": "void drawLabels(Graphics2D g2, List keys, double totalValue,\n                              Rectangle2D plotArea, Rectangle2D linkArea,\n                              PiePlotState state)", "full_signature": "protected void drawLabels(Graphics2D g2, List keys, double totalValue,\n                              Rectangle2D plotArea, Rectangle2D linkArea,\n                              PiePlotState state)", "class_method_signature": "PiePlot.drawLabels(Graphics2D g2, List keys, double totalValue,\n                              Rectangle2D plotArea, Rectangle2D linkArea,\n                              PiePlotState state)", "testcase": false, "constructor": false}, {"identifier": "drawLeftLabels", "parameters": "(KeyedValues leftKeys, Graphics2D g2,\n                                  Rectangle2D plotArea, Rectangle2D linkArea,\n                                  float maxLabelWidth, PiePlotState state)", "modifiers": "protected", "return": "void", "signature": "void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2,\n                                  Rectangle2D plotArea, Rectangle2D linkArea,\n                                  float maxLabelWidth, PiePlotState state)", "full_signature": "protected void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2,\n                                  Rectangle2D plotArea, Rectangle2D linkArea,\n                                  float maxLabelWidth, PiePlotState state)", "class_method_signature": "PiePlot.drawLeftLabels(KeyedValues leftKeys, Graphics2D g2,\n                                  Rectangle2D plotArea, Rectangle2D linkArea,\n                                  float maxLabelWidth, PiePlotState state)", "testcase": false, "constructor": false}, {"identifier": "drawRightLabels", "parameters": "(KeyedValues keys, Graphics2D g2,\n                                   Rectangle2D plotArea, Rectangle2D linkArea,\n                                   float maxLabelWidth, PiePlotState state)", "modifiers": "protected", "return": "void", "signature": "void drawRightLabels(KeyedValues keys, Graphics2D g2,\n                                   Rectangle2D plotArea, Rectangle2D linkArea,\n                                   float maxLabelWidth, PiePlotState state)", "full_signature": "protected void drawRightLabels(KeyedValues keys, Graphics2D g2,\n                                   Rectangle2D plotArea, Rectangle2D linkArea,\n                                   float maxLabelWidth, PiePlotState state)", "class_method_signature": "PiePlot.drawRightLabels(KeyedValues keys, Graphics2D g2,\n                                   Rectangle2D plotArea, Rectangle2D linkArea,\n                                   float maxLabelWidth, PiePlotState state)", "testcase": false, "constructor": false}, {"identifier": "getLegendItems", "parameters": "()", "modifiers": "public", "return": "LegendItemCollection", "signature": "LegendItemCollection getLegendItems()", "full_signature": "public LegendItemCollection getLegendItems()", "class_method_signature": "PiePlot.getLegendItems()", "testcase": false, "constructor": false}, {"identifier": "getPlotType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPlotType()", "full_signature": "public String getPlotType()", "class_method_signature": "PiePlot.getPlotType()", "testcase": false, "constructor": false}, {"identifier": "getArcBounds", "parameters": "(Rectangle2D unexploded,\n                                       Rectangle2D exploded,\n                                       double angle, double extent,\n                                       double explodePercent)", "modifiers": "protected", "return": "Rectangle2D", "signature": "Rectangle2D getArcBounds(Rectangle2D unexploded,\n                                       Rectangle2D exploded,\n                                       double angle, double extent,\n                                       double explodePercent)", "full_signature": "protected Rectangle2D getArcBounds(Rectangle2D unexploded,\n                                       Rectangle2D exploded,\n                                       double angle, double extent,\n                                       double explodePercent)", "class_method_signature": "PiePlot.getArcBounds(Rectangle2D unexploded,\n                                       Rectangle2D exploded,\n                                       double angle, double extent,\n                                       double explodePercent)", "testcase": false, "constructor": false}, {"identifier": "drawLeftLabel", "parameters": "(Graphics2D g2, PiePlotState state,\n                                 PieLabelRecord record)", "modifiers": "protected", "return": "void", "signature": "void drawLeftLabel(Graphics2D g2, PiePlotState state,\n                                 PieLabelRecord record)", "full_signature": "protected void drawLeftLabel(Graphics2D g2, PiePlotState state,\n                                 PieLabelRecord record)", "class_method_signature": "PiePlot.drawLeftLabel(Graphics2D g2, PiePlotState state,\n                                 PieLabelRecord record)", "testcase": false, "constructor": false}, {"identifier": "drawRightLabel", "parameters": "(Graphics2D g2, PiePlotState state,\n                                  PieLabelRecord record)", "modifiers": "protected", "return": "void", "signature": "void drawRightLabel(Graphics2D g2, PiePlotState state,\n                                  PieLabelRecord record)", "full_signature": "protected void drawRightLabel(Graphics2D g2, PiePlotState state,\n                                  PieLabelRecord record)", "class_method_signature": "PiePlot.drawRightLabel(Graphics2D g2, PiePlotState state,\n                                  PieLabelRecord record)", "testcase": false, "constructor": false}, {"identifier": "findSelectionStateForDataset", "parameters": "(\n            PieDataset dataset, Object source)", "modifiers": "private", "return": "PieDatasetSelectionState", "signature": "PieDatasetSelectionState findSelectionStateForDataset(\n            PieDataset dataset, Object source)", "full_signature": "private PieDatasetSelectionState findSelectionStateForDataset(\n            PieDataset dataset, Object source)", "class_method_signature": "PiePlot.findSelectionStateForDataset(\n            PieDataset dataset, Object source)", "testcase": false, "constructor": false}, {"identifier": "canSelectByPoint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSelectByPoint()", "full_signature": "public boolean canSelectByPoint()", "class_method_signature": "PiePlot.canSelectByPoint()", "testcase": false, "constructor": false}, {"identifier": "canSelectByRegion", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSelectByRegion()", "full_signature": "public boolean canSelectByRegion()", "class_method_signature": "PiePlot.canSelectByRegion()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(double x, double y, Rectangle2D dataArea,\n            RenderingSource source)", "modifiers": "public", "return": "void", "signature": "void select(double x, double y, Rectangle2D dataArea,\n            RenderingSource source)", "full_signature": "public void select(double x, double y, Rectangle2D dataArea,\n            RenderingSource source)", "class_method_signature": "PiePlot.select(double x, double y, Rectangle2D dataArea,\n            RenderingSource source)", "testcase": false, "constructor": false}, {"identifier": "calculateAngleForValue", "parameters": "(double value, double total)", "modifiers": "private", "return": "double", "signature": "double calculateAngleForValue(double value, double total)", "full_signature": "private double calculateAngleForValue(double value, double total)", "class_method_signature": "PiePlot.calculateAngleForValue(double value, double total)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(GeneralPath region, Rectangle2D dataArea,\n            RenderingSource source)", "modifiers": "public", "return": "void", "signature": "void select(GeneralPath region, Rectangle2D dataArea,\n            RenderingSource source)", "full_signature": "public void select(GeneralPath region, Rectangle2D dataArea,\n            RenderingSource source)", "class_method_signature": "PiePlot.select(GeneralPath region, Rectangle2D dataArea,\n            RenderingSource source)", "testcase": false, "constructor": false}, {"identifier": "clearSelection", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearSelection()", "full_signature": "public void clearSelection()", "class_method_signature": "PiePlot.clearSelection()", "testcase": false, "constructor": false}, {"identifier": "createHotSpotShape", "parameters": "(Graphics2D g2, Rectangle2D dataArea,\n            int section, boolean selected)", "modifiers": "public", "return": "Shape", "signature": "Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            int section, boolean selected)", "full_signature": "public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            int section, boolean selected)", "class_method_signature": "PiePlot.createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            int section, boolean selected)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PiePlot.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "PiePlot.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "PiePlot.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "PiePlot.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getSelectedItemAttributes", "parameters": "()", "modifiers": "public", "return": "PieSelectionAttributes", "signature": "PieSelectionAttributes getSelectedItemAttributes()", "full_signature": "public PieSelectionAttributes getSelectedItemAttributes()", "class_method_signature": "PiePlot.getSelectedItemAttributes()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/PiePlot.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        PiePlot that = (PiePlot) obj;\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.sectionPaintMap,\n                that.sectionPaintMap)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseSectionPaint,\n                that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.sectionOutlinePaintMap,\n                that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseSectionOutlinePaint,\n                that.baseSectionOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap,\n                that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseSectionOutlineStroke,\n                that.baseSectionOutlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.explodePercentages,\n                that.explodePercentages)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelGenerator,\n                that.labelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelBackgroundPaint,\n                that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelOutlinePaint,\n                that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelOutlineStroke,\n                that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelShadowPaint,\n                that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!this.labelLinkStyle.equals(that.labelLinkStyle)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelLinkStroke,\n                that.labelLinkStroke)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGenerator,\n                that.toolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendLabelGenerator,\n                that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator,\n                that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendLabelURLGenerator,\n                that.legendLabelURLGenerator)) {\n            return false;\n        }\n        if (this.autoPopulateSectionPaint != that.autoPopulateSectionPaint) {\n            return false;\n        }\n        if (this.autoPopulateSectionOutlinePaint\n                != that.autoPopulateSectionOutlinePaint) {\n            return false;\n        }\n        if (this.autoPopulateSectionOutlineStroke\n                != that.autoPopulateSectionOutlineStroke) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.shadowGenerator,\n                that.shadowGenerator)) {\n            return false;\n        }\n        // can't find any difference...\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PiePlot.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equals", "equals", "equals", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}