{"test_class": {"identifier": "HistogramDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.0000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        double[] values = {1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5};\n        HistogramDataset d1 = new HistogramDataset();\n        d1.addSeries(\"Series 1\", values, 5);\n        HistogramDataset d2 = new HistogramDataset();\n        d2.addSeries(\"Series 1\", values, 5);\n\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        d1.addSeries(\"Series 2\", new double[] {1.0, 2.0, 3.0}, 2);\n        assertFalse(d1.equals(d2));\n        d2.addSeries(\"Series 2\", new double[] {1.0, 2.0, 3.0}, 2);\n        assertTrue(d1.equals(d2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "HistogramDatasetTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["addSeries", "addSeries", "assertTrue", "equals", "assertTrue", "equals", "addSeries", "assertFalse", "equals", "addSeries", "assertTrue", "equals"]}, "focal_class": {"identifier": "HistogramDataset", "superclass": "extends AbstractIntervalXYDataset", "interfaces": "implements IntervalXYDataset, Cloneable, PublicCloneable,\n                   Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -6341668077370231153L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6341668077370231153L", "var_name": "serialVersionUID"}, {"original_string": "private List list;", "modifier": "private", "type": "List", "declarator": "list", "var_name": "list"}, {"original_string": "private HistogramType type;", "modifier": "private", "type": "HistogramType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "HistogramDataset", "parameters": "()", "modifiers": "public", "return": "", "signature": " HistogramDataset()", "full_signature": "public  HistogramDataset()", "class_method_signature": "HistogramDataset.HistogramDataset()", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "HistogramType", "signature": "HistogramType getType()", "full_signature": "public HistogramType getType()", "class_method_signature": "HistogramDataset.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(HistogramType type)", "modifiers": "public", "return": "void", "signature": "void setType(HistogramType type)", "full_signature": "public void setType(HistogramType type)", "class_method_signature": "HistogramDataset.setType(HistogramType type)", "testcase": false, "constructor": false}, {"identifier": "addSeries", "parameters": "(Comparable key, double[] values, int bins)", "modifiers": "public", "return": "void", "signature": "void addSeries(Comparable key, double[] values, int bins)", "full_signature": "public void addSeries(Comparable key, double[] values, int bins)", "class_method_signature": "HistogramDataset.addSeries(Comparable key, double[] values, int bins)", "testcase": false, "constructor": false}, {"identifier": "addSeries", "parameters": "(Comparable key,\n                          double[] values,\n                          int bins,\n                          double minimum,\n                          double maximum)", "modifiers": "public", "return": "void", "signature": "void addSeries(Comparable key,\n                          double[] values,\n                          int bins,\n                          double minimum,\n                          double maximum)", "full_signature": "public void addSeries(Comparable key,\n                          double[] values,\n                          int bins,\n                          double minimum,\n                          double maximum)", "class_method_signature": "HistogramDataset.addSeries(Comparable key,\n                          double[] values,\n                          int bins,\n                          double minimum,\n                          double maximum)", "testcase": false, "constructor": false}, {"identifier": "getMinimum", "parameters": "(double[] values)", "modifiers": "private", "return": "double", "signature": "double getMinimum(double[] values)", "full_signature": "private double getMinimum(double[] values)", "class_method_signature": "HistogramDataset.getMinimum(double[] values)", "testcase": false, "constructor": false}, {"identifier": "getMaximum", "parameters": "(double[] values)", "modifiers": "private", "return": "double", "signature": "double getMaximum(double[] values)", "full_signature": "private double getMaximum(double[] values)", "class_method_signature": "HistogramDataset.getMaximum(double[] values)", "testcase": false, "constructor": false}, {"identifier": "getBins", "parameters": "(int series)", "modifiers": "", "return": "List", "signature": "List getBins(int series)", "full_signature": " List getBins(int series)", "class_method_signature": "HistogramDataset.getBins(int series)", "testcase": false, "constructor": false}, {"identifier": "getTotal", "parameters": "(int series)", "modifiers": "private", "return": "int", "signature": "int getTotal(int series)", "full_signature": "private int getTotal(int series)", "class_method_signature": "HistogramDataset.getTotal(int series)", "testcase": false, "constructor": false}, {"identifier": "getBinWidth", "parameters": "(int series)", "modifiers": "private", "return": "double", "signature": "double getBinWidth(int series)", "full_signature": "private double getBinWidth(int series)", "class_method_signature": "HistogramDataset.getBinWidth(int series)", "testcase": false, "constructor": false}, {"identifier": "getSeriesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSeriesCount()", "full_signature": "public int getSeriesCount()", "class_method_signature": "HistogramDataset.getSeriesCount()", "testcase": false, "constructor": false}, {"identifier": "getSeriesKey", "parameters": "(int series)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getSeriesKey(int series)", "full_signature": "public Comparable getSeriesKey(int series)", "class_method_signature": "HistogramDataset.getSeriesKey(int series)", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "(int series)", "modifiers": "public", "return": "int", "signature": "int getItemCount(int series)", "full_signature": "public int getItemCount(int series)", "class_method_signature": "HistogramDataset.getItemCount(int series)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getX(int series, int item)", "full_signature": "public Number getX(int series, int item)", "class_method_signature": "HistogramDataset.getX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getY(int series, int item)", "full_signature": "public Number getY(int series, int item)", "class_method_signature": "HistogramDataset.getY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getStartX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getStartX(int series, int item)", "full_signature": "public Number getStartX(int series, int item)", "class_method_signature": "HistogramDataset.getStartX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getEndX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getEndX(int series, int item)", "full_signature": "public Number getEndX(int series, int item)", "class_method_signature": "HistogramDataset.getEndX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getStartY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getStartY(int series, int item)", "full_signature": "public Number getStartY(int series, int item)", "class_method_signature": "HistogramDataset.getStartY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getEndY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getEndY(int series, int item)", "full_signature": "public Number getEndY(int series, int item)", "class_method_signature": "HistogramDataset.getEndY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "HistogramDataset.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "HistogramDataset.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/statistics/HistogramDataset.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof HistogramDataset)) {\n            return false;\n        }\n        HistogramDataset that = (HistogramDataset) obj;\n        if (!ObjectUtilities.equal(this.type, that.type)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.list, that.list)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "HistogramDataset.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}