{"test_class": {"identifier": "RegressionTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/statistics/junit/RegressionTests.java"}, "test_case": {"identifier": "testPowerRegression1b", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testPowerRegression1b() {\n\n        double[][] data = createSampleData1();\n\n        XYSeries series = new XYSeries(\"Test\");\n        for (int i = 0; i < 11; i++) {\n            series.add(data[i][0], data[i][1]);\n        }\n        XYDataset ds = new XYSeriesCollection(series);\n        double[] result = Regression.getPowerRegression(ds, 0);\n\n        assertEquals(0.91045813, result[0], 0.0000001);\n        assertEquals(0.88918346, result[1], 0.0000001);\n\n    }", "signature": "void testPowerRegression1b()", "full_signature": "public void testPowerRegression1b()", "class_method_signature": "RegressionTests.testPowerRegression1b()", "testcase": true, "constructor": false, "invocations": ["createSampleData1", "add", "getPowerRegression", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Regression", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getOLSRegression", "parameters": "(double[][] data)", "modifiers": "public static", "return": "double[]", "signature": "double[] getOLSRegression(double[][] data)", "full_signature": "public static double[] getOLSRegression(double[][] data)", "class_method_signature": "Regression.getOLSRegression(double[][] data)", "testcase": false, "constructor": false}, {"identifier": "getOLSRegression", "parameters": "(XYDataset data, int series)", "modifiers": "public static", "return": "double[]", "signature": "double[] getOLSRegression(XYDataset data, int series)", "full_signature": "public static double[] getOLSRegression(XYDataset data, int series)", "class_method_signature": "Regression.getOLSRegression(XYDataset data, int series)", "testcase": false, "constructor": false}, {"identifier": "getPowerRegression", "parameters": "(double[][] data)", "modifiers": "public static", "return": "double[]", "signature": "double[] getPowerRegression(double[][] data)", "full_signature": "public static double[] getPowerRegression(double[][] data)", "class_method_signature": "Regression.getPowerRegression(double[][] data)", "testcase": false, "constructor": false}, {"identifier": "getPowerRegression", "parameters": "(XYDataset data, int series)", "modifiers": "public static", "return": "double[]", "signature": "double[] getPowerRegression(XYDataset data, int series)", "full_signature": "public static double[] getPowerRegression(XYDataset data, int series)", "class_method_signature": "Regression.getPowerRegression(XYDataset data, int series)", "testcase": false, "constructor": false}, {"identifier": "getPolynomialRegression", "parameters": "(XYDataset dataset, int series, int order)", "modifiers": "public static", "return": "double[]", "signature": "double[] getPolynomialRegression(XYDataset dataset, int series, int order)", "full_signature": "public static double[] getPolynomialRegression(XYDataset dataset, int series, int order)", "class_method_signature": "Regression.getPolynomialRegression(XYDataset dataset, int series, int order)", "testcase": false, "constructor": false}, {"identifier": "calculateSubMatrix", "parameters": "(double[][] matrix)", "modifiers": "private static", "return": "double[][]", "signature": "double[][] calculateSubMatrix(double[][] matrix)", "full_signature": "private static double[][] calculateSubMatrix(double[][] matrix)", "class_method_signature": "Regression.calculateSubMatrix(double[][] matrix)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/statistics/Regression.java"}, "focal_method": {"identifier": "getPowerRegression", "parameters": "(double[][] data)", "modifiers": "public static", "return": "double[]", "body": "public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }", "signature": "double[] getPowerRegression(double[][] data)", "full_signature": "public static double[] getPowerRegression(double[][] data)", "class_method_signature": "Regression.getPowerRegression(double[][] data)", "testcase": false, "constructor": false, "invocations": ["log", "log", "pow", "exp"]}, "repository": {"repo_id": "Chart_1_buggy"}}