{"test_class": {"identifier": "PolarPlotTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/plot/junit/PolarPlotTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        PolarPlot plot1 = new PolarPlot();\n        PolarPlot plot2 = new PolarPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.23f);\n        plot1.setAngleGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setAngleTickUnit(new NumberTickUnit(11.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleTickUnit(new NumberTickUnit(11.0));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setAngleGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setAngleLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setAngleLabelPaint(new GradientPaint(9.0f, 8.0f, Color.blue,\n                7.0f, 6.0f, Color.red));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleLabelPaint(new GradientPaint(9.0f, 8.0f, Color.blue,\n                7.0f, 6.0f, Color.red));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setAngleLabelsVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAngleLabelsVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setAxis(new NumberAxis(\"Test\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxis(new NumberAxis(\"Test\"));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.black));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.black));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRadiusGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRadiusGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRadiusGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRadiusGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addCornerTextItem(\"XYZ\");\n        assertFalse(plot1.equals(plot2));\n        plot2.addCornerTextItem(\"XYZ\");\n        assertTrue(plot1.equals(plot2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "PolarPlotTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "setAngleGridlinePaint", "assertFalse", "equals", "setAngleGridlinePaint", "assertTrue", "equals", "setAngleGridlineStroke", "assertFalse", "equals", "setAngleGridlineStroke", "assertTrue", "equals", "setAngleTickUnit", "assertFalse", "equals", "setAngleTickUnit", "assertTrue", "equals", "setAngleGridlinesVisible", "assertFalse", "equals", "setAngleGridlinesVisible", "assertTrue", "equals", "setAngleLabelFont", "assertFalse", "equals", "setAngleLabelFont", "assertTrue", "equals", "setAngleLabelPaint", "assertFalse", "equals", "setAngleLabelPaint", "assertTrue", "equals", "setAngleLabelsVisible", "assertFalse", "equals", "setAngleLabelsVisible", "assertTrue", "equals", "setAxis", "assertFalse", "equals", "setAxis", "assertTrue", "equals", "setRadiusGridlinePaint", "assertFalse", "equals", "setRadiusGridlinePaint", "assertTrue", "equals", "setRadiusGridlineStroke", "assertFalse", "equals", "setRadiusGridlineStroke", "assertTrue", "equals", "setRadiusGridlinesVisible", "assertFalse", "equals", "setRadiusGridlinesVisible", "assertTrue", "equals", "addCornerTextItem", "assertFalse", "equals", "addCornerTextItem", "assertTrue", "equals"]}, "focal_class": {"identifier": "PolarPlot", "superclass": "extends Plot", "interfaces": "implements ValueAxisPlot, Zoomable,\n        RendererChangeListener, Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 3794383185924179525L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3794383185924179525L", "var_name": "serialVersionUID"}, {"original_string": "private static final int MARGIN = 20;", "modifier": "private static final", "type": "int", "declarator": "MARGIN = 20", "var_name": "MARGIN"}, {"original_string": "private static final double ANNOTATION_MARGIN = 7.0;", "modifier": "private static final", "type": "double", "declarator": "ANNOTATION_MARGIN = 7.0", "var_name": "ANNOTATION_MARGIN"}, {"original_string": "public static final double DEFAULT_ANGLE_TICK_UNIT_SIZE = 45.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_ANGLE_TICK_UNIT_SIZE = 45.0", "var_name": "DEFAULT_ANGLE_TICK_UNIT_SIZE"}, {"original_string": "public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(\n            0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,\n            0.0f, new float[]{2.0f, 2.0f}, 0.0f);", "modifier": "public static final", "type": "Stroke", "declarator": "DEFAULT_GRIDLINE_STROKE = new BasicStroke(\n            0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,\n            0.0f, new float[]{2.0f, 2.0f}, 0.0f)", "var_name": "DEFAULT_GRIDLINE_STROKE"}, {"original_string": "public static final Paint DEFAULT_GRIDLINE_PAINT = Color.gray;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_GRIDLINE_PAINT = Color.gray", "var_name": "DEFAULT_GRIDLINE_PAINT"}, {"original_string": "protected static ResourceBundle localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\");", "modifier": "protected static", "type": "ResourceBundle", "declarator": "localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\")", "var_name": "localizationResources"}, {"original_string": "private List angleTicks;", "modifier": "private", "type": "List", "declarator": "angleTicks", "var_name": "angleTicks"}, {"original_string": "private ValueAxis axis;", "modifier": "private", "type": "ValueAxis", "declarator": "axis", "var_name": "axis"}, {"original_string": "private XYDataset dataset;", "modifier": "private", "type": "XYDataset", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private PolarItemRenderer renderer;", "modifier": "private", "type": "PolarItemRenderer", "declarator": "renderer", "var_name": "renderer"}, {"original_string": "private TickUnit angleTickUnit;", "modifier": "private", "type": "TickUnit", "declarator": "angleTickUnit", "var_name": "angleTickUnit"}, {"original_string": "private boolean angleLabelsVisible = true;", "modifier": "private", "type": "boolean", "declarator": "angleLabelsVisible = true", "var_name": "angleLabelsVisible"}, {"original_string": "private Font angleLabelFont = new Font(\"Tahoma\", Font.PLAIN, 12);", "modifier": "private", "type": "Font", "declarator": "angleLabelFont = new Font(\"Tahoma\", Font.PLAIN, 12)", "var_name": "angleLabelFont"}, {"original_string": "private transient Paint angleLabelPaint = Color.black;", "modifier": "private transient", "type": "Paint", "declarator": "angleLabelPaint = Color.black", "var_name": "angleLabelPaint"}, {"original_string": "private boolean angleGridlinesVisible;", "modifier": "private", "type": "boolean", "declarator": "angleGridlinesVisible", "var_name": "angleGridlinesVisible"}, {"original_string": "private transient Stroke angleGridlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "angleGridlineStroke", "var_name": "angleGridlineStroke"}, {"original_string": "private transient Paint angleGridlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "angleGridlinePaint", "var_name": "angleGridlinePaint"}, {"original_string": "private boolean radiusGridlinesVisible;", "modifier": "private", "type": "boolean", "declarator": "radiusGridlinesVisible", "var_name": "radiusGridlinesVisible"}, {"original_string": "private transient Stroke radiusGridlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "radiusGridlineStroke", "var_name": "radiusGridlineStroke"}, {"original_string": "private transient Paint radiusGridlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "radiusGridlinePaint", "var_name": "radiusGridlinePaint"}, {"original_string": "private List cornerTextItems = new ArrayList();", "modifier": "private", "type": "List", "declarator": "cornerTextItems = new ArrayList()", "var_name": "cornerTextItems"}], "methods": [{"identifier": "PolarPlot", "parameters": "()", "modifiers": "public", "return": "", "signature": " PolarPlot()", "full_signature": "public  PolarPlot()", "class_method_signature": "PolarPlot.PolarPlot()", "testcase": false, "constructor": true}, {"identifier": "PolarPlot", "parameters": "(XYDataset dataset,\n                     ValueAxis radiusAxis,\n                     PolarItemRenderer renderer)", "modifiers": "public", "return": "", "signature": " PolarPlot(XYDataset dataset,\n                     ValueAxis radiusAxis,\n                     PolarItemRenderer renderer)", "full_signature": "public  PolarPlot(XYDataset dataset,\n                     ValueAxis radiusAxis,\n                     PolarItemRenderer renderer)", "class_method_signature": "PolarPlot.PolarPlot(XYDataset dataset,\n                     ValueAxis radiusAxis,\n                     PolarItemRenderer renderer)", "testcase": false, "constructor": true}, {"identifier": "addCornerTextItem", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void addCornerTextItem(String text)", "full_signature": "public void addCornerTextItem(String text)", "class_method_signature": "PolarPlot.addCornerTextItem(String text)", "testcase": false, "constructor": false}, {"identifier": "removeCornerTextItem", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void removeCornerTextItem(String text)", "full_signature": "public void removeCornerTextItem(String text)", "class_method_signature": "PolarPlot.removeCornerTextItem(String text)", "testcase": false, "constructor": false}, {"identifier": "clearCornerTextItems", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCornerTextItems()", "full_signature": "public void clearCornerTextItems()", "class_method_signature": "PolarPlot.clearCornerTextItems()", "testcase": false, "constructor": false}, {"identifier": "getPlotType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPlotType()", "full_signature": "public String getPlotType()", "class_method_signature": "PolarPlot.getPlotType()", "testcase": false, "constructor": false}, {"identifier": "getAxis", "parameters": "()", "modifiers": "public", "return": "ValueAxis", "signature": "ValueAxis getAxis()", "full_signature": "public ValueAxis getAxis()", "class_method_signature": "PolarPlot.getAxis()", "testcase": false, "constructor": false}, {"identifier": "setAxis", "parameters": "(ValueAxis axis)", "modifiers": "public", "return": "void", "signature": "void setAxis(ValueAxis axis)", "full_signature": "public void setAxis(ValueAxis axis)", "class_method_signature": "PolarPlot.setAxis(ValueAxis axis)", "testcase": false, "constructor": false}, {"identifier": "getDataset", "parameters": "()", "modifiers": "public", "return": "XYDataset", "signature": "XYDataset getDataset()", "full_signature": "public XYDataset getDataset()", "class_method_signature": "PolarPlot.getDataset()", "testcase": false, "constructor": false}, {"identifier": "setDataset", "parameters": "(XYDataset dataset)", "modifiers": "public", "return": "void", "signature": "void setDataset(XYDataset dataset)", "full_signature": "public void setDataset(XYDataset dataset)", "class_method_signature": "PolarPlot.setDataset(XYDataset dataset)", "testcase": false, "constructor": false}, {"identifier": "getRenderer", "parameters": "()", "modifiers": "public", "return": "PolarItemRenderer", "signature": "PolarItemRenderer getRenderer()", "full_signature": "public PolarItemRenderer getRenderer()", "class_method_signature": "PolarPlot.getRenderer()", "testcase": false, "constructor": false}, {"identifier": "setRenderer", "parameters": "(PolarItemRenderer renderer)", "modifiers": "public", "return": "void", "signature": "void setRenderer(PolarItemRenderer renderer)", "full_signature": "public void setRenderer(PolarItemRenderer renderer)", "class_method_signature": "PolarPlot.setRenderer(PolarItemRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "getAngleTickUnit", "parameters": "()", "modifiers": "public", "return": "TickUnit", "signature": "TickUnit getAngleTickUnit()", "full_signature": "public TickUnit getAngleTickUnit()", "class_method_signature": "PolarPlot.getAngleTickUnit()", "testcase": false, "constructor": false}, {"identifier": "setAngleTickUnit", "parameters": "(TickUnit unit)", "modifiers": "public", "return": "void", "signature": "void setAngleTickUnit(TickUnit unit)", "full_signature": "public void setAngleTickUnit(TickUnit unit)", "class_method_signature": "PolarPlot.setAngleTickUnit(TickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "isAngleLabelsVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAngleLabelsVisible()", "full_signature": "public boolean isAngleLabelsVisible()", "class_method_signature": "PolarPlot.isAngleLabelsVisible()", "testcase": false, "constructor": false}, {"identifier": "setAngleLabelsVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setAngleLabelsVisible(boolean visible)", "full_signature": "public void setAngleLabelsVisible(boolean visible)", "class_method_signature": "PolarPlot.setAngleLabelsVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getAngleLabelFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getAngleLabelFont()", "full_signature": "public Font getAngleLabelFont()", "class_method_signature": "PolarPlot.getAngleLabelFont()", "testcase": false, "constructor": false}, {"identifier": "setAngleLabelFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setAngleLabelFont(Font font)", "full_signature": "public void setAngleLabelFont(Font font)", "class_method_signature": "PolarPlot.setAngleLabelFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getAngleLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getAngleLabelPaint()", "full_signature": "public Paint getAngleLabelPaint()", "class_method_signature": "PolarPlot.getAngleLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setAngleLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setAngleLabelPaint(Paint paint)", "full_signature": "public void setAngleLabelPaint(Paint paint)", "class_method_signature": "PolarPlot.setAngleLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "isAngleGridlinesVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAngleGridlinesVisible()", "full_signature": "public boolean isAngleGridlinesVisible()", "class_method_signature": "PolarPlot.isAngleGridlinesVisible()", "testcase": false, "constructor": false}, {"identifier": "setAngleGridlinesVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setAngleGridlinesVisible(boolean visible)", "full_signature": "public void setAngleGridlinesVisible(boolean visible)", "class_method_signature": "PolarPlot.setAngleGridlinesVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getAngleGridlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getAngleGridlineStroke()", "full_signature": "public Stroke getAngleGridlineStroke()", "class_method_signature": "PolarPlot.getAngleGridlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setAngleGridlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setAngleGridlineStroke(Stroke stroke)", "full_signature": "public void setAngleGridlineStroke(Stroke stroke)", "class_method_signature": "PolarPlot.setAngleGridlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getAngleGridlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getAngleGridlinePaint()", "full_signature": "public Paint getAngleGridlinePaint()", "class_method_signature": "PolarPlot.getAngleGridlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setAngleGridlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setAngleGridlinePaint(Paint paint)", "full_signature": "public void setAngleGridlinePaint(Paint paint)", "class_method_signature": "PolarPlot.setAngleGridlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "isRadiusGridlinesVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRadiusGridlinesVisible()", "full_signature": "public boolean isRadiusGridlinesVisible()", "class_method_signature": "PolarPlot.isRadiusGridlinesVisible()", "testcase": false, "constructor": false}, {"identifier": "setRadiusGridlinesVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setRadiusGridlinesVisible(boolean visible)", "full_signature": "public void setRadiusGridlinesVisible(boolean visible)", "class_method_signature": "PolarPlot.setRadiusGridlinesVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getRadiusGridlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getRadiusGridlineStroke()", "full_signature": "public Stroke getRadiusGridlineStroke()", "class_method_signature": "PolarPlot.getRadiusGridlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setRadiusGridlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setRadiusGridlineStroke(Stroke stroke)", "full_signature": "public void setRadiusGridlineStroke(Stroke stroke)", "class_method_signature": "PolarPlot.setRadiusGridlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getRadiusGridlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getRadiusGridlinePaint()", "full_signature": "public Paint getRadiusGridlinePaint()", "class_method_signature": "PolarPlot.getRadiusGridlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setRadiusGridlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setRadiusGridlinePaint(Paint paint)", "full_signature": "public void setRadiusGridlinePaint(Paint paint)", "class_method_signature": "PolarPlot.setRadiusGridlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "refreshAngleTicks", "parameters": "()", "modifiers": "protected", "return": "List", "signature": "List refreshAngleTicks()", "full_signature": "protected List refreshAngleTicks()", "class_method_signature": "PolarPlot.refreshAngleTicks()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "class_method_signature": "PolarPlot.draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "drawCornerTextItems", "parameters": "(Graphics2D g2, Rectangle2D area)", "modifiers": "protected", "return": "void", "signature": "void drawCornerTextItems(Graphics2D g2, Rectangle2D area)", "full_signature": "protected void drawCornerTextItems(Graphics2D g2, Rectangle2D area)", "class_method_signature": "PolarPlot.drawCornerTextItems(Graphics2D g2, Rectangle2D area)", "testcase": false, "constructor": false}, {"identifier": "drawAxis", "parameters": "(Graphics2D g2, Rectangle2D plotArea,\n                                 Rectangle2D dataArea)", "modifiers": "protected", "return": "AxisState", "signature": "AxisState drawAxis(Graphics2D g2, Rectangle2D plotArea,\n                                 Rectangle2D dataArea)", "full_signature": "protected AxisState drawAxis(Graphics2D g2, Rectangle2D plotArea,\n                                 Rectangle2D dataArea)", "class_method_signature": "PolarPlot.drawAxis(Graphics2D g2, Rectangle2D plotArea,\n                                 Rectangle2D dataArea)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Graphics2D g2,\n                       Rectangle2D dataArea,\n                       PlotRenderingInfo info)", "modifiers": "protected", "return": "void", "signature": "void render(Graphics2D g2,\n                       Rectangle2D dataArea,\n                       PlotRenderingInfo info)", "full_signature": "protected void render(Graphics2D g2,\n                       Rectangle2D dataArea,\n                       PlotRenderingInfo info)", "class_method_signature": "PolarPlot.render(Graphics2D g2,\n                       Rectangle2D dataArea,\n                       PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "drawGridlines", "parameters": "(Graphics2D g2, Rectangle2D dataArea,\n                                 List angularTicks, List radialTicks)", "modifiers": "protected", "return": "void", "signature": "void drawGridlines(Graphics2D g2, Rectangle2D dataArea,\n                                 List angularTicks, List radialTicks)", "full_signature": "protected void drawGridlines(Graphics2D g2, Rectangle2D dataArea,\n                                 List angularTicks, List radialTicks)", "class_method_signature": "PolarPlot.drawGridlines(Graphics2D g2, Rectangle2D dataArea,\n                                 List angularTicks, List radialTicks)", "testcase": false, "constructor": false}, {"identifier": "zoom", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void zoom(double percent)", "full_signature": "public void zoom(double percent)", "class_method_signature": "PolarPlot.zoom(double percent)", "testcase": false, "constructor": false}, {"identifier": "getDataRange", "parameters": "(ValueAxis axis)", "modifiers": "public", "return": "Range", "signature": "Range getDataRange(ValueAxis axis)", "full_signature": "public Range getDataRange(ValueAxis axis)", "class_method_signature": "PolarPlot.getDataRange(ValueAxis axis)", "testcase": false, "constructor": false}, {"identifier": "datasetChanged", "parameters": "(DatasetChangeEvent event)", "modifiers": "public", "return": "void", "signature": "void datasetChanged(DatasetChangeEvent event)", "full_signature": "public void datasetChanged(DatasetChangeEvent event)", "class_method_signature": "PolarPlot.datasetChanged(DatasetChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "rendererChanged", "parameters": "(RendererChangeEvent event)", "modifiers": "public", "return": "void", "signature": "void rendererChanged(RendererChangeEvent event)", "full_signature": "public void rendererChanged(RendererChangeEvent event)", "class_method_signature": "PolarPlot.rendererChanged(RendererChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "getSeriesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSeriesCount()", "full_signature": "public int getSeriesCount()", "class_method_signature": "PolarPlot.getSeriesCount()", "testcase": false, "constructor": false}, {"identifier": "getLegendItems", "parameters": "()", "modifiers": "public", "return": "LegendItemCollection", "signature": "LegendItemCollection getLegendItems()", "full_signature": "public LegendItemCollection getLegendItems()", "class_method_signature": "PolarPlot.getLegendItems()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PolarPlot.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "PolarPlot.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "PolarPlot.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "PolarPlot.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "zoomDomainAxes", "parameters": "(double factor, PlotRenderingInfo state,\n                               Point2D source)", "modifiers": "public", "return": "void", "signature": "void zoomDomainAxes(double factor, PlotRenderingInfo state,\n                               Point2D source)", "full_signature": "public void zoomDomainAxes(double factor, PlotRenderingInfo state,\n                               Point2D source)", "class_method_signature": "PolarPlot.zoomDomainAxes(double factor, PlotRenderingInfo state,\n                               Point2D source)", "testcase": false, "constructor": false}, {"identifier": "zoomDomainAxes", "parameters": "(double factor, PlotRenderingInfo state,\n                               Point2D source, boolean useAnchor)", "modifiers": "public", "return": "void", "signature": "void zoomDomainAxes(double factor, PlotRenderingInfo state,\n                               Point2D source, boolean useAnchor)", "full_signature": "public void zoomDomainAxes(double factor, PlotRenderingInfo state,\n                               Point2D source, boolean useAnchor)", "class_method_signature": "PolarPlot.zoomDomainAxes(double factor, PlotRenderingInfo state,\n                               Point2D source, boolean useAnchor)", "testcase": false, "constructor": false}, {"identifier": "zoomDomainAxes", "parameters": "(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo state, Point2D source)", "modifiers": "public", "return": "void", "signature": "void zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo state, Point2D source)", "full_signature": "public void zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo state, Point2D source)", "class_method_signature": "PolarPlot.zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo state, Point2D source)", "testcase": false, "constructor": false}, {"identifier": "zoomRangeAxes", "parameters": "(double factor, PlotRenderingInfo state,\n                              Point2D source)", "modifiers": "public", "return": "void", "signature": "void zoomRangeAxes(double factor, PlotRenderingInfo state,\n                              Point2D source)", "full_signature": "public void zoomRangeAxes(double factor, PlotRenderingInfo state,\n                              Point2D source)", "class_method_signature": "PolarPlot.zoomRangeAxes(double factor, PlotRenderingInfo state,\n                              Point2D source)", "testcase": false, "constructor": false}, {"identifier": "zoomRangeAxes", "parameters": "(double factor, PlotRenderingInfo info,\n                              Point2D source, boolean useAnchor)", "modifiers": "public", "return": "void", "signature": "void zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source, boolean useAnchor)", "full_signature": "public void zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source, boolean useAnchor)", "class_method_signature": "PolarPlot.zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source, boolean useAnchor)", "testcase": false, "constructor": false}, {"identifier": "zoomRangeAxes", "parameters": "(double lowerPercent, double upperPercent,\n                              PlotRenderingInfo state, Point2D source)", "modifiers": "public", "return": "void", "signature": "void zoomRangeAxes(double lowerPercent, double upperPercent,\n                              PlotRenderingInfo state, Point2D source)", "full_signature": "public void zoomRangeAxes(double lowerPercent, double upperPercent,\n                              PlotRenderingInfo state, Point2D source)", "class_method_signature": "PolarPlot.zoomRangeAxes(double lowerPercent, double upperPercent,\n                              PlotRenderingInfo state, Point2D source)", "testcase": false, "constructor": false}, {"identifier": "isDomainZoomable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDomainZoomable()", "full_signature": "public boolean isDomainZoomable()", "class_method_signature": "PolarPlot.isDomainZoomable()", "testcase": false, "constructor": false}, {"identifier": "isRangeZoomable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRangeZoomable()", "full_signature": "public boolean isRangeZoomable()", "class_method_signature": "PolarPlot.isRangeZoomable()", "testcase": false, "constructor": false}, {"identifier": "getOrientation", "parameters": "()", "modifiers": "public", "return": "PlotOrientation", "signature": "PlotOrientation getOrientation()", "full_signature": "public PlotOrientation getOrientation()", "class_method_signature": "PolarPlot.getOrientation()", "testcase": false, "constructor": false}, {"identifier": "getMaxRadius", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxRadius()", "full_signature": "public double getMaxRadius()", "class_method_signature": "PolarPlot.getMaxRadius()", "testcase": false, "constructor": false}, {"identifier": "translateValueThetaRadiusToJava2D", "parameters": "(double angleDegrees,\n                                                   double radius,\n                                                   Rectangle2D dataArea)", "modifiers": "public", "return": "Point", "signature": "Point translateValueThetaRadiusToJava2D(double angleDegrees,\n                                                   double radius,\n                                                   Rectangle2D dataArea)", "full_signature": "public Point translateValueThetaRadiusToJava2D(double angleDegrees,\n                                                   double radius,\n                                                   Rectangle2D dataArea)", "class_method_signature": "PolarPlot.translateValueThetaRadiusToJava2D(double angleDegrees,\n                                                   double radius,\n                                                   Rectangle2D dataArea)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/PolarPlot.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof PolarPlot)) {\n            return false;\n        }\n        PolarPlot that = (PolarPlot) obj;\n        if (!ObjectUtilities.equal(this.axis, that.axis)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.renderer, that.renderer)) {\n            return false;\n        }\n        if (!this.angleTickUnit.equals(that.angleTickUnit)) {\n            return false;\n        }\n        if (this.angleGridlinesVisible != that.angleGridlinesVisible) {\n            return false;\n        }\n        if (this.angleLabelsVisible != that.angleLabelsVisible) {\n            return false;\n        }\n        if (!this.angleLabelFont.equals(that.angleLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.angleLabelPaint, that.angleLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.angleGridlineStroke,\n                that.angleGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(\n            this.angleGridlinePaint, that.angleGridlinePaint\n        )) {\n            return false;\n        }\n        if (this.radiusGridlinesVisible != that.radiusGridlinesVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.radiusGridlineStroke,\n                that.radiusGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.radiusGridlinePaint,\n                that.radiusGridlinePaint)) {\n            return false;\n        }\n        if (!this.cornerTextItems.equals(that.cornerTextItems)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PolarPlot.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equals", "equals", "equal", "equal", "equal", "equal", "equal", "equals", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}