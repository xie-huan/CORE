{"test_class": {"identifier": "CombinedRangeXYPlotTests", "superclass": "extends TestCase", "interfaces": "implements ChartChangeListener", "fields": [{"original_string": "private List events = new java.util.ArrayList();", "modifier": "private", "type": "List", "declarator": "events = new java.util.ArrayList()", "var_name": "events"}], "file": "tests/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        CombinedRangeXYPlot plot1 = createPlot();\n        CombinedRangeXYPlot plot2 = createPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "CombinedRangeXYPlotTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["createPlot", "createPlot", "assertTrue", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "CombinedRangeXYPlot", "superclass": "extends XYPlot", "interfaces": "implements PlotChangeListener", "fields": [{"original_string": "private static final long serialVersionUID = -5177814085082031168L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5177814085082031168L", "var_name": "serialVersionUID"}, {"original_string": "private List subplots;", "modifier": "private", "type": "List", "declarator": "subplots", "var_name": "subplots"}, {"original_string": "private double gap = 5.0;", "modifier": "private", "type": "double", "declarator": "gap = 5.0", "var_name": "gap"}, {"original_string": "private transient Rectangle2D[] subplotAreas;", "modifier": "private transient", "type": "Rectangle2D[]", "declarator": "subplotAreas", "var_name": "subplotAreas"}], "methods": [{"identifier": "CombinedRangeXYPlot", "parameters": "()", "modifiers": "public", "return": "", "signature": " CombinedRangeXYPlot()", "full_signature": "public  CombinedRangeXYPlot()", "class_method_signature": "CombinedRangeXYPlot.CombinedRangeXYPlot()", "testcase": false, "constructor": true}, {"identifier": "CombinedRangeXYPlot", "parameters": "(ValueAxis rangeAxis)", "modifiers": "public", "return": "", "signature": " CombinedRangeXYPlot(ValueAxis rangeAxis)", "full_signature": "public  CombinedRangeXYPlot(ValueAxis rangeAxis)", "class_method_signature": "CombinedRangeXYPlot.CombinedRangeXYPlot(ValueAxis rangeAxis)", "testcase": false, "constructor": true}, {"identifier": "getPlotType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPlotType()", "full_signature": "public String getPlotType()", "class_method_signature": "CombinedRangeXYPlot.getPlotType()", "testcase": false, "constructor": false}, {"identifier": "getGap", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getGap()", "full_signature": "public double getGap()", "class_method_signature": "CombinedRangeXYPlot.getGap()", "testcase": false, "constructor": false}, {"identifier": "setGap", "parameters": "(double gap)", "modifiers": "public", "return": "void", "signature": "void setGap(double gap)", "full_signature": "public void setGap(double gap)", "class_method_signature": "CombinedRangeXYPlot.setGap(double gap)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(XYPlot subplot)", "modifiers": "public", "return": "void", "signature": "void add(XYPlot subplot)", "full_signature": "public void add(XYPlot subplot)", "class_method_signature": "CombinedRangeXYPlot.add(XYPlot subplot)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(XYPlot subplot, int weight)", "modifiers": "public", "return": "void", "signature": "void add(XYPlot subplot, int weight)", "full_signature": "public void add(XYPlot subplot, int weight)", "class_method_signature": "CombinedRangeXYPlot.add(XYPlot subplot, int weight)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(XYPlot subplot)", "modifiers": "public", "return": "void", "signature": "void remove(XYPlot subplot)", "full_signature": "public void remove(XYPlot subplot)", "class_method_signature": "CombinedRangeXYPlot.remove(XYPlot subplot)", "testcase": false, "constructor": false}, {"identifier": "getSubplots", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getSubplots()", "full_signature": "public List getSubplots()", "class_method_signature": "CombinedRangeXYPlot.getSubplots()", "testcase": false, "constructor": false}, {"identifier": "calculateAxisSpace", "parameters": "(Graphics2D g2,\n                                           Rectangle2D plotArea)", "modifiers": "protected", "return": "AxisSpace", "signature": "AxisSpace calculateAxisSpace(Graphics2D g2,\n                                           Rectangle2D plotArea)", "full_signature": "protected AxisSpace calculateAxisSpace(Graphics2D g2,\n                                           Rectangle2D plotArea)", "class_method_signature": "CombinedRangeXYPlot.calculateAxisSpace(Graphics2D g2,\n                                           Rectangle2D plotArea)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "class_method_signature": "CombinedRangeXYPlot.draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "getLegendItems", "parameters": "()", "modifiers": "public", "return": "LegendItemCollection", "signature": "LegendItemCollection getLegendItems()", "full_signature": "public LegendItemCollection getLegendItems()", "class_method_signature": "CombinedRangeXYPlot.getLegendItems()", "testcase": false, "constructor": false}, {"identifier": "zoomDomainAxes", "parameters": "(double factor, PlotRenderingInfo info,\n                               Point2D source)", "modifiers": "public", "return": "void", "signature": "void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source)", "full_signature": "public void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source)", "class_method_signature": "CombinedRangeXYPlot.zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source)", "testcase": false, "constructor": false}, {"identifier": "zoomDomainAxes", "parameters": "(double factor, PlotRenderingInfo info,\n                               Point2D source, boolean useAnchor)", "modifiers": "public", "return": "void", "signature": "void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source, boolean useAnchor)", "full_signature": "public void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source, boolean useAnchor)", "class_method_signature": "CombinedRangeXYPlot.zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source, boolean useAnchor)", "testcase": false, "constructor": false}, {"identifier": "zoomDomainAxes", "parameters": "(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo info, Point2D source)", "modifiers": "public", "return": "void", "signature": "void zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo info, Point2D source)", "full_signature": "public void zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo info, Point2D source)", "class_method_signature": "CombinedRangeXYPlot.zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo info, Point2D source)", "testcase": false, "constructor": false}, {"identifier": "findSubplot", "parameters": "(PlotRenderingInfo info, Point2D source)", "modifiers": "public", "return": "XYPlot", "signature": "XYPlot findSubplot(PlotRenderingInfo info, Point2D source)", "full_signature": "public XYPlot findSubplot(PlotRenderingInfo info, Point2D source)", "class_method_signature": "CombinedRangeXYPlot.findSubplot(PlotRenderingInfo info, Point2D source)", "testcase": false, "constructor": false}, {"identifier": "setRenderer", "parameters": "(XYItemRenderer renderer)", "modifiers": "public", "return": "void", "signature": "void setRenderer(XYItemRenderer renderer)", "full_signature": "public void setRenderer(XYItemRenderer renderer)", "class_method_signature": "CombinedRangeXYPlot.setRenderer(XYItemRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "setOrientation", "parameters": "(PlotOrientation orientation)", "modifiers": "public", "return": "void", "signature": "void setOrientation(PlotOrientation orientation)", "full_signature": "public void setOrientation(PlotOrientation orientation)", "class_method_signature": "CombinedRangeXYPlot.setOrientation(PlotOrientation orientation)", "testcase": false, "constructor": false}, {"identifier": "getDataRange", "parameters": "(ValueAxis axis)", "modifiers": "public", "return": "Range", "signature": "Range getDataRange(ValueAxis axis)", "full_signature": "public Range getDataRange(ValueAxis axis)", "class_method_signature": "CombinedRangeXYPlot.getDataRange(ValueAxis axis)", "testcase": false, "constructor": false}, {"identifier": "setFixedDomainAxisSpaceForSubplots", "parameters": "(AxisSpace space)", "modifiers": "protected", "return": "void", "signature": "void setFixedDomainAxisSpaceForSubplots(AxisSpace space)", "full_signature": "protected void setFixedDomainAxisSpaceForSubplots(AxisSpace space)", "class_method_signature": "CombinedRangeXYPlot.setFixedDomainAxisSpaceForSubplots(AxisSpace space)", "testcase": false, "constructor": false}, {"identifier": "handleClick", "parameters": "(int x, int y, PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void handleClick(int x, int y, PlotRenderingInfo info)", "full_signature": "public void handleClick(int x, int y, PlotRenderingInfo info)", "class_method_signature": "CombinedRangeXYPlot.handleClick(int x, int y, PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "plotChanged", "parameters": "(PlotChangeEvent event)", "modifiers": "public", "return": "void", "signature": "void plotChanged(PlotChangeEvent event)", "full_signature": "public void plotChanged(PlotChangeEvent event)", "class_method_signature": "CombinedRangeXYPlot.plotChanged(PlotChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CombinedRangeXYPlot.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "CombinedRangeXYPlot.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/CombinedRangeXYPlot.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CombinedRangeXYPlot)) {\n            return false;\n        }\n        CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;\n        if (this.gap != that.gap) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.subplots, that.subplots)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CombinedRangeXYPlot.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equal", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}