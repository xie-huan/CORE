{"test_class": {"identifier": "DefaultMultiValueCategoryDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        DefaultMultiValueCategoryDataset d1\n                = new DefaultMultiValueCategoryDataset();\n        DefaultMultiValueCategoryDataset d2\n                = new DefaultMultiValueCategoryDataset();\n        assertTrue(d1.equals(d2));\n        assertTrue(d2.equals(d1));\n\n        List values = new ArrayList();\n        d1.add(values, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.add(values, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n\n        values.add(new Integer(99));\n        d1.add(values, \"R1\", \"C1\");\n        assertFalse(d1.equals(d2));\n        d2.add(values, \"R1\", \"C1\");\n        assertTrue(d1.equals(d2));\n\n        values.add(new Integer(99));\n        d1.add(values, \"R1\", \"C2\");\n        assertFalse(d1.equals(d2));\n        d2.add(values, \"R1\", \"C2\");\n        assertTrue(d1.equals(d2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "DefaultMultiValueCategoryDatasetTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "add", "assertFalse", "equals", "add", "assertTrue", "equals", "add", "add", "assertFalse", "equals", "add", "assertTrue", "equals", "add", "add", "assertFalse", "equals", "add", "assertTrue", "equals"]}, "focal_class": {"identifier": "DefaultMultiValueCategoryDataset", "superclass": "extends AbstractDataset", "interfaces": "implements MultiValueCategoryDataset, RangeInfo, PublicCloneable", "fields": [{"original_string": "protected KeyedObjects2D data;", "modifier": "protected", "type": "KeyedObjects2D", "declarator": "data", "var_name": "data"}, {"original_string": "private Number minimumRangeValue;", "modifier": "private", "type": "Number", "declarator": "minimumRangeValue", "var_name": "minimumRangeValue"}, {"original_string": "private Number maximumRangeValue;", "modifier": "private", "type": "Number", "declarator": "maximumRangeValue", "var_name": "maximumRangeValue"}, {"original_string": "private Range rangeBounds;", "modifier": "private", "type": "Range", "declarator": "rangeBounds", "var_name": "rangeBounds"}], "methods": [{"identifier": "DefaultMultiValueCategoryDataset", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultMultiValueCategoryDataset()", "full_signature": "public  DefaultMultiValueCategoryDataset()", "class_method_signature": "DefaultMultiValueCategoryDataset.DefaultMultiValueCategoryDataset()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(List values, Comparable rowKey, Comparable columnKey)", "modifiers": "public", "return": "void", "signature": "void add(List values, Comparable rowKey, Comparable columnKey)", "full_signature": "public void add(List values, Comparable rowKey, Comparable columnKey)", "class_method_signature": "DefaultMultiValueCategoryDataset.add(List values, Comparable rowKey, Comparable columnKey)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(int row, int column)", "modifiers": "public", "return": "List", "signature": "List getValues(int row, int column)", "full_signature": "public List getValues(int row, int column)", "class_method_signature": "DefaultMultiValueCategoryDataset.getValues(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(Comparable rowKey, Comparable columnKey)", "modifiers": "public", "return": "List", "signature": "List getValues(Comparable rowKey, Comparable columnKey)", "full_signature": "public List getValues(Comparable rowKey, Comparable columnKey)", "class_method_signature": "DefaultMultiValueCategoryDataset.getValues(Comparable rowKey, Comparable columnKey)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Comparable row, Comparable column)", "modifiers": "public", "return": "Number", "signature": "Number getValue(Comparable row, Comparable column)", "full_signature": "public Number getValue(Comparable row, Comparable column)", "class_method_signature": "DefaultMultiValueCategoryDataset.getValue(Comparable row, Comparable column)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int row, int column)", "modifiers": "public", "return": "Number", "signature": "Number getValue(int row, int column)", "full_signature": "public Number getValue(int row, int column)", "class_method_signature": "DefaultMultiValueCategoryDataset.getValue(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "getColumnIndex", "parameters": "(Comparable key)", "modifiers": "public", "return": "int", "signature": "int getColumnIndex(Comparable key)", "full_signature": "public int getColumnIndex(Comparable key)", "class_method_signature": "DefaultMultiValueCategoryDataset.getColumnIndex(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "getColumnKey", "parameters": "(int column)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getColumnKey(int column)", "full_signature": "public Comparable getColumnKey(int column)", "class_method_signature": "DefaultMultiValueCategoryDataset.getColumnKey(int column)", "testcase": false, "constructor": false}, {"identifier": "getColumnKeys", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getColumnKeys()", "full_signature": "public List getColumnKeys()", "class_method_signature": "DefaultMultiValueCategoryDataset.getColumnKeys()", "testcase": false, "constructor": false}, {"identifier": "getRowIndex", "parameters": "(Comparable key)", "modifiers": "public", "return": "int", "signature": "int getRowIndex(Comparable key)", "full_signature": "public int getRowIndex(Comparable key)", "class_method_signature": "DefaultMultiValueCategoryDataset.getRowIndex(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "getRowKey", "parameters": "(int row)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getRowKey(int row)", "full_signature": "public Comparable getRowKey(int row)", "class_method_signature": "DefaultMultiValueCategoryDataset.getRowKey(int row)", "testcase": false, "constructor": false}, {"identifier": "getRowKeys", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getRowKeys()", "full_signature": "public List getRowKeys()", "class_method_signature": "DefaultMultiValueCategoryDataset.getRowKeys()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowCount()", "full_signature": "public int getRowCount()", "class_method_signature": "DefaultMultiValueCategoryDataset.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnCount()", "full_signature": "public int getColumnCount()", "class_method_signature": "DefaultMultiValueCategoryDataset.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getRangeLowerBound", "parameters": "(boolean includeInterval)", "modifiers": "public", "return": "double", "signature": "double getRangeLowerBound(boolean includeInterval)", "full_signature": "public double getRangeLowerBound(boolean includeInterval)", "class_method_signature": "DefaultMultiValueCategoryDataset.getRangeLowerBound(boolean includeInterval)", "testcase": false, "constructor": false}, {"identifier": "getRangeUpperBound", "parameters": "(boolean includeInterval)", "modifiers": "public", "return": "double", "signature": "double getRangeUpperBound(boolean includeInterval)", "full_signature": "public double getRangeUpperBound(boolean includeInterval)", "class_method_signature": "DefaultMultiValueCategoryDataset.getRangeUpperBound(boolean includeInterval)", "testcase": false, "constructor": false}, {"identifier": "getRangeBounds", "parameters": "(boolean includeInterval)", "modifiers": "public", "return": "Range", "signature": "Range getRangeBounds(boolean includeInterval)", "full_signature": "public Range getRangeBounds(boolean includeInterval)", "class_method_signature": "DefaultMultiValueCategoryDataset.getRangeBounds(boolean includeInterval)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DefaultMultiValueCategoryDataset.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "DefaultMultiValueCategoryDataset.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof DefaultMultiValueCategoryDataset)) {\n            return false;\n        }\n        DefaultMultiValueCategoryDataset that\n                = (DefaultMultiValueCategoryDataset) obj;\n        return this.data.equals(that.data);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DefaultMultiValueCategoryDataset.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}