{"test_class": {"identifier": "XYBoxAnnotationTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/annotations/junit/XYBoxAnnotationTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n\n        XYBoxAnnotation a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0,\n                new BasicStroke(1.2f), Color.red, Color.blue);\n        XYBoxAnnotation a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0,\n                new BasicStroke(1.2f), Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n        assertTrue(a2.equals(a1));\n\n        // x0\n        a1 = new XYBoxAnnotation(2.0, 2.0, 3.0, 4.0, new BasicStroke(1.2f),\n                Color.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(2.0, 2.0, 3.0, 4.0, new BasicStroke(1.2f),\n                Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        // stroke\n        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),\n                Color.red, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),\n                Color.red, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        GradientPaint gp1a = new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red);\n        GradientPaint gp1b = new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red);\n        GradientPaint gp2a = new GradientPaint(5.0f, 6.0f, Color.pink,\n                7.0f, 8.0f, Color.white);\n        GradientPaint gp2b = new GradientPaint(5.0f, 6.0f, Color.pink,\n                7.0f, 8.0f, Color.white);\n\n        // outlinePaint\n        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),\n                gp1a, Color.blue);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),\n                gp1b, Color.blue);\n        assertTrue(a1.equals(a2));\n\n        // fillPaint\n        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),\n                gp1a, gp2a);\n        assertFalse(a1.equals(a2));\n        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),\n                gp1b, gp2b);\n        assertTrue(a1.equals(a2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "XYBoxAnnotationTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "XYBoxAnnotation", "superclass": "extends AbstractXYAnnotation", "interfaces": "implements Cloneable, PublicCloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 6764703772526757457L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6764703772526757457L", "var_name": "serialVersionUID"}, {"original_string": "private double x0;", "modifier": "private", "type": "double", "declarator": "x0", "var_name": "x0"}, {"original_string": "private double y0;", "modifier": "private", "type": "double", "declarator": "y0", "var_name": "y0"}, {"original_string": "private double x1;", "modifier": "private", "type": "double", "declarator": "x1", "var_name": "x1"}, {"original_string": "private double y1;", "modifier": "private", "type": "double", "declarator": "y1", "var_name": "y1"}, {"original_string": "private transient Stroke stroke;", "modifier": "private transient", "type": "Stroke", "declarator": "stroke", "var_name": "stroke"}, {"original_string": "private transient Paint outlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "outlinePaint", "var_name": "outlinePaint"}, {"original_string": "private transient Paint fillPaint;", "modifier": "private transient", "type": "Paint", "declarator": "fillPaint", "var_name": "fillPaint"}], "methods": [{"identifier": "XYBoxAnnotation", "parameters": "(double x0, double y0, double x1, double y1)", "modifiers": "public", "return": "", "signature": " XYBoxAnnotation(double x0, double y0, double x1, double y1)", "full_signature": "public  XYBoxAnnotation(double x0, double y0, double x1, double y1)", "class_method_signature": "XYBoxAnnotation.XYBoxAnnotation(double x0, double y0, double x1, double y1)", "testcase": false, "constructor": true}, {"identifier": "XYBoxAnnotation", "parameters": "(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint)", "modifiers": "public", "return": "", "signature": " XYBoxAnnotation(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint)", "full_signature": "public  XYBoxAnnotation(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint)", "class_method_signature": "XYBoxAnnotation.XYBoxAnnotation(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint)", "testcase": false, "constructor": true}, {"identifier": "XYBoxAnnotation", "parameters": "(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint, Paint fillPaint)", "modifiers": "public", "return": "", "signature": " XYBoxAnnotation(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint, Paint fillPaint)", "full_signature": "public  XYBoxAnnotation(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint, Paint fillPaint)", "class_method_signature": "XYBoxAnnotation.XYBoxAnnotation(double x0, double y0, double x1, double y1,\n                           Stroke stroke, Paint outlinePaint, Paint fillPaint)", "testcase": false, "constructor": true}, {"identifier": "draw", "parameters": "(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n                     ValueAxis domainAxis, ValueAxis rangeAxis,\n                     int rendererIndex, PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n                     ValueAxis domainAxis, ValueAxis rangeAxis,\n                     int rendererIndex, PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n                     ValueAxis domainAxis, ValueAxis rangeAxis,\n                     int rendererIndex, PlotRenderingInfo info)", "class_method_signature": "XYBoxAnnotation.draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n                     ValueAxis domainAxis, ValueAxis rangeAxis,\n                     int rendererIndex, PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "XYBoxAnnotation.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "XYBoxAnnotation.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "XYBoxAnnotation.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "XYBoxAnnotation.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "XYBoxAnnotation.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/annotations/XYBoxAnnotation.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        // now try to reject equality\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof XYBoxAnnotation)) {\n            return false;\n        }\n        XYBoxAnnotation that = (XYBoxAnnotation) obj;\n        if (!(this.x0 == that.x0)) {\n            return false;\n        }\n        if (!(this.y0 == that.y0)) {\n            return false;\n        }\n        if (!(this.x1 == that.x1)) {\n            return false;\n        }\n        if (!(this.y1 == that.y1)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.stroke, that.stroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {\n            return false;\n        }\n        // seem to be the same\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "XYBoxAnnotation.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}