{"test_class": {"identifier": "RangeTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/junit/RangeTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n\n        Range r1 = new Range(0.0, 1.0);\n        Range r2 = new Range(0.0, 1.0);\n        assertEquals(r1, r2);\n        assertEquals(r2, r1);\n\n        r1 = new Range(0.0, 1.0);\n        r2 = new Range(0.5, 1.0);\n        assertFalse(r1.equals(r2));\n\n        r1 = new Range(0.0, 1.0);\n        r2 = new Range(0.0, 2.0);\n        assertFalse(r1.equals(r2));\n\n        assertFalse(r1.equals(new Double(0.0)));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "RangeTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "Range", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -906333695431863380L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -906333695431863380L", "var_name": "serialVersionUID"}, {"original_string": "private double lower;", "modifier": "private", "type": "double", "declarator": "lower", "var_name": "lower"}, {"original_string": "private double upper;", "modifier": "private", "type": "double", "declarator": "upper", "var_name": "upper"}], "methods": [{"identifier": "Range", "parameters": "(double lower, double upper)", "modifiers": "public", "return": "", "signature": " Range(double lower, double upper)", "full_signature": "public  Range(double lower, double upper)", "class_method_signature": "Range.Range(double lower, double upper)", "testcase": false, "constructor": true}, {"identifier": "getLowerBound", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLowerBound()", "full_signature": "public double getLowerBound()", "class_method_signature": "Range.getLowerBound()", "testcase": false, "constructor": false}, {"identifier": "getUpperBound", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUpperBound()", "full_signature": "public double getUpperBound()", "class_method_signature": "Range.getUpperBound()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLength()", "full_signature": "public double getLength()", "class_method_signature": "Range.getLength()", "testcase": false, "constructor": false}, {"identifier": "getCentralValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCentralValue()", "full_signature": "public double getCentralValue()", "class_method_signature": "Range.getCentralValue()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(double value)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(double value)", "full_signature": "public boolean contains(double value)", "class_method_signature": "Range.contains(double value)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(double b0, double b1)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(double b0, double b1)", "full_signature": "public boolean intersects(double b0, double b1)", "class_method_signature": "Range.intersects(double b0, double b1)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Range range)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(Range range)", "full_signature": "public boolean intersects(Range range)", "class_method_signature": "Range.intersects(Range range)", "testcase": false, "constructor": false}, {"identifier": "constrain", "parameters": "(double value)", "modifiers": "public", "return": "double", "signature": "double constrain(double value)", "full_signature": "public double constrain(double value)", "class_method_signature": "Range.constrain(double value)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(Range range1, Range range2)", "modifiers": "public static", "return": "Range", "signature": "Range combine(Range range1, Range range2)", "full_signature": "public static Range combine(Range range1, Range range2)", "class_method_signature": "Range.combine(Range range1, Range range2)", "testcase": false, "constructor": false}, {"identifier": "expandToInclude", "parameters": "(Range range, double value)", "modifiers": "public static", "return": "Range", "signature": "Range expandToInclude(Range range, double value)", "full_signature": "public static Range expandToInclude(Range range, double value)", "class_method_signature": "Range.expandToInclude(Range range, double value)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(Range range,\n                               double lowerMargin, double upperMargin)", "modifiers": "public static", "return": "Range", "signature": "Range expand(Range range,\n                               double lowerMargin, double upperMargin)", "full_signature": "public static Range expand(Range range,\n                               double lowerMargin, double upperMargin)", "class_method_signature": "Range.expand(Range range,\n                               double lowerMargin, double upperMargin)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(Range base, double delta)", "modifiers": "public static", "return": "Range", "signature": "Range shift(Range base, double delta)", "full_signature": "public static Range shift(Range base, double delta)", "class_method_signature": "Range.shift(Range base, double delta)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(Range base, double delta,\n                              boolean allowZeroCrossing)", "modifiers": "public static", "return": "Range", "signature": "Range shift(Range base, double delta,\n                              boolean allowZeroCrossing)", "full_signature": "public static Range shift(Range base, double delta,\n                              boolean allowZeroCrossing)", "class_method_signature": "Range.shift(Range base, double delta,\n                              boolean allowZeroCrossing)", "testcase": false, "constructor": false}, {"identifier": "shiftWithNoZeroCrossing", "parameters": "(double value, double delta)", "modifiers": "private static", "return": "double", "signature": "double shiftWithNoZeroCrossing(double value, double delta)", "full_signature": "private static double shiftWithNoZeroCrossing(double value, double delta)", "class_method_signature": "Range.shiftWithNoZeroCrossing(double value, double delta)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(Range base, double factor)", "modifiers": "public static", "return": "Range", "signature": "Range scale(Range base, double factor)", "full_signature": "public static Range scale(Range base, double factor)", "class_method_signature": "Range.scale(Range base, double factor)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Range.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Range.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Range.toString()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/Range.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (!(obj instanceof Range)) {\n            return false;\n        }\n        Range range = (Range) obj;\n        if (!(this.lower == range.lower)) {\n            return false;\n        }\n        if (!(this.upper == range.upper)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Range.equals(Object obj)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": "Chart_1_buggy"}}