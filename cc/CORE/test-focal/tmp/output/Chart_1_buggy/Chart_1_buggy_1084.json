{"test_class": {"identifier": "DefaultBoxAndWhiskerXYDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.0000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerXYDatasetTests.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testAdd() {\n        DefaultBoxAndWhiskerXYDataset dataset\n                = new DefaultBoxAndWhiskerXYDataset(\"S1\");\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(new Date(33L), item1);\n\n        assertEquals(1.0, dataset.getY(0, 0).doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(0, 0).doubleValue(), EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(0, 0).doubleValue(), EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(0, 0).doubleValue(), EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(0, 0).doubleValue(), EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(0, 0).doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(0, 0).doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(0, 0).doubleValue(), EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(0, 0).doubleValue(), EPSILON);\n        assertEquals(new Range(5.0, 6.0), dataset.getRangeBounds(false));\n    }", "signature": "void testAdd()", "full_signature": "public void testAdd()", "class_method_signature": "DefaultBoxAndWhiskerXYDatasetTests.testAdd()", "testcase": true, "constructor": false, "invocations": ["add", "assertEquals", "doubleValue", "getY", "assertEquals", "doubleValue", "getMeanValue", "assertEquals", "doubleValue", "getMedianValue", "assertEquals", "doubleValue", "getQ1Value", "assertEquals", "doubleValue", "getQ3Value", "assertEquals", "doubleValue", "getMinRegularValue", "assertEquals", "doubleValue", "getMaxRegularValue", "assertEquals", "doubleValue", "getMinOutlier", "assertEquals", "doubleValue", "getMaxOutlier", "assertEquals", "getRangeBounds"]}, "focal_class": {"identifier": "DefaultBoxAndWhiskerXYDataset", "superclass": "extends AbstractXYDataset", "interfaces": "implements BoxAndWhiskerXYDataset, RangeInfo", "fields": [{"original_string": "private Comparable seriesKey;", "modifier": "private", "type": "Comparable", "declarator": "seriesKey", "var_name": "seriesKey"}, {"original_string": "private List dates;", "modifier": "private", "type": "List", "declarator": "dates", "var_name": "dates"}, {"original_string": "private List items;", "modifier": "private", "type": "List", "declarator": "items", "var_name": "items"}, {"original_string": "private Number minimumRangeValue;", "modifier": "private", "type": "Number", "declarator": "minimumRangeValue", "var_name": "minimumRangeValue"}, {"original_string": "private Number maximumRangeValue;", "modifier": "private", "type": "Number", "declarator": "maximumRangeValue", "var_name": "maximumRangeValue"}, {"original_string": "private Range rangeBounds;", "modifier": "private", "type": "Range", "declarator": "rangeBounds", "var_name": "rangeBounds"}, {"original_string": "private double outlierCoefficient = 1.5;", "modifier": "private", "type": "double", "declarator": "outlierCoefficient = 1.5", "var_name": "outlierCoefficient"}, {"original_string": "private double faroutCoefficient = 2.0;", "modifier": "private", "type": "double", "declarator": "faroutCoefficient = 2.0", "var_name": "faroutCoefficient"}], "methods": [{"identifier": "DefaultBoxAndWhiskerXYDataset", "parameters": "(Comparable seriesKey)", "modifiers": "public", "return": "", "signature": " DefaultBoxAndWhiskerXYDataset(Comparable seriesKey)", "full_signature": "public  DefaultBoxAndWhiskerXYDataset(Comparable seriesKey)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.DefaultBoxAndWhiskerXYDataset(Comparable seriesKey)", "testcase": false, "constructor": true}, {"identifier": "getOutlierCoefficient", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getOutlierCoefficient()", "full_signature": "public double getOutlierCoefficient()", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getOutlierCoefficient()", "testcase": false, "constructor": false}, {"identifier": "setOutlierCoefficient", "parameters": "(double outlierCoefficient)", "modifiers": "public", "return": "void", "signature": "void setOutlierCoefficient(double outlierCoefficient)", "full_signature": "public void setOutlierCoefficient(double outlierCoefficient)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.setOutlierCoefficient(double outlierCoefficient)", "testcase": false, "constructor": false}, {"identifier": "getFaroutCoefficient", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFaroutCoefficient()", "full_signature": "public double getFaroutCoefficient()", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getFaroutCoefficient()", "testcase": false, "constructor": false}, {"identifier": "setFaroutCoefficient", "parameters": "(double faroutCoefficient)", "modifiers": "public", "return": "void", "signature": "void setFaroutCoefficient(double faroutCoefficient)", "full_signature": "public void setFaroutCoefficient(double faroutCoefficient)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.setFaroutCoefficient(double faroutCoefficient)", "testcase": false, "constructor": false}, {"identifier": "getSeriesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSeriesCount()", "full_signature": "public int getSeriesCount()", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getSeriesCount()", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "(int series)", "modifiers": "public", "return": "int", "signature": "int getItemCount(int series)", "full_signature": "public int getItemCount(int series)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getItemCount(int series)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Date date, BoxAndWhiskerItem item)", "modifiers": "public", "return": "void", "signature": "void add(Date date, BoxAndWhiskerItem item)", "full_signature": "public void add(Date date, BoxAndWhiskerItem item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.add(Date date, BoxAndWhiskerItem item)", "testcase": false, "constructor": false}, {"identifier": "getSeriesKey", "parameters": "(int i)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getSeriesKey(int i)", "full_signature": "public Comparable getSeriesKey(int i)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getSeriesKey(int i)", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "(int series, int item)", "modifiers": "public", "return": "BoxAndWhiskerItem", "signature": "BoxAndWhiskerItem getItem(int series, int item)", "full_signature": "public BoxAndWhiskerItem getItem(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getItem(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getX(int series, int item)", "full_signature": "public Number getX(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getXDate", "parameters": "(int series, int item)", "modifiers": "public", "return": "Date", "signature": "Date getXDate(int series, int item)", "full_signature": "public Date getXDate(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getXDate(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getY(int series, int item)", "full_signature": "public Number getY(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getMeanValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getMeanValue(int series, int item)", "full_signature": "public Number getMeanValue(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getMeanValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getMedianValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getMedianValue(int series, int item)", "full_signature": "public Number getMedianValue(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getMedianValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getQ1Value", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getQ1Value(int series, int item)", "full_signature": "public Number getQ1Value(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getQ1Value(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getQ3Value", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getQ3Value(int series, int item)", "full_signature": "public Number getQ3Value(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getQ3Value(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getMinRegularValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getMinRegularValue(int series, int item)", "full_signature": "public Number getMinRegularValue(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getMinRegularValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getMaxRegularValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getMaxRegularValue(int series, int item)", "full_signature": "public Number getMaxRegularValue(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getMaxRegularValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getMinOutlier", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getMinOutlier(int series, int item)", "full_signature": "public Number getMinOutlier(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getMinOutlier(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getMaxOutlier", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getMaxOutlier(int series, int item)", "full_signature": "public Number getMaxOutlier(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getMaxOutlier(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getOutliers", "parameters": "(int series, int item)", "modifiers": "public", "return": "List", "signature": "List getOutliers(int series, int item)", "full_signature": "public List getOutliers(int series, int item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getOutliers(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getRangeLowerBound", "parameters": "(boolean includeInterval)", "modifiers": "public", "return": "double", "signature": "double getRangeLowerBound(boolean includeInterval)", "full_signature": "public double getRangeLowerBound(boolean includeInterval)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getRangeLowerBound(boolean includeInterval)", "testcase": false, "constructor": false}, {"identifier": "getRangeUpperBound", "parameters": "(boolean includeInterval)", "modifiers": "public", "return": "double", "signature": "double getRangeUpperBound(boolean includeInterval)", "full_signature": "public double getRangeUpperBound(boolean includeInterval)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getRangeUpperBound(boolean includeInterval)", "testcase": false, "constructor": false}, {"identifier": "getRangeBounds", "parameters": "(boolean includeInterval)", "modifiers": "public", "return": "Range", "signature": "Range getRangeBounds(boolean includeInterval)", "full_signature": "public Range getRangeBounds(boolean includeInterval)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.getRangeBounds(boolean includeInterval)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java"}, "focal_method": {"identifier": "add", "parameters": "(Date date, BoxAndWhiskerItem item)", "modifiers": "public", "return": "void", "body": "public void add(Date date, BoxAndWhiskerItem item) {\n        this.dates.add(date);\n        this.items.add(item);\n        if (this.minimumRangeValue == null) {\n            this.minimumRangeValue = item.getMinRegularValue();\n        }\n        else {\n            if (item.getMinRegularValue().doubleValue()\n                    < this.minimumRangeValue.doubleValue()) {\n                this.minimumRangeValue = item.getMinRegularValue();\n            }\n        }\n        if (this.maximumRangeValue == null) {\n            this.maximumRangeValue = item.getMaxRegularValue();\n        }\n        else {\n            if (item.getMaxRegularValue().doubleValue()\n                    > this.maximumRangeValue.doubleValue()) {\n                this.maximumRangeValue = item.getMaxRegularValue();\n            }\n        }\n        this.rangeBounds = new Range(this.minimumRangeValue.doubleValue(),\n                this.maximumRangeValue.doubleValue());\n        fireDatasetChanged(new DatasetChangeInfo());\n        //TODO: fill in real change info\n    }", "signature": "void add(Date date, BoxAndWhiskerItem item)", "full_signature": "public void add(Date date, BoxAndWhiskerItem item)", "class_method_signature": "DefaultBoxAndWhiskerXYDataset.add(Date date, BoxAndWhiskerItem item)", "testcase": false, "constructor": false, "invocations": ["add", "add", "getMinRegularValue", "doubleValue", "getMinRegularValue", "doubleValue", "getMinRegularValue", "getMaxRegularValue", "doubleValue", "getMaxRegularValue", "doubleValue", "getMaxRegularValue", "doubleValue", "doubleValue", "fireDatasetChanged"]}, "repository": {"repo_id": "Chart_1_buggy"}}