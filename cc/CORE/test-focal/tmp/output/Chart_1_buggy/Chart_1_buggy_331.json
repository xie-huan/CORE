{"test_class": {"identifier": "OutlierTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/chart/renderer/junit/OutlierTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        Outlier out1 = new Outlier(1.0, 2.0, 3.0);\n        Outlier out2 = new Outlier(1.0, 2.0, 3.0);\n        assertTrue(out1.equals(out2));\n        assertTrue(out2.equals(out1));\n\n        out1.setPoint(new Point2D.Double(2.0, 2.0));\n        assertFalse(out1.equals(out2));\n        out2.setPoint(new Point2D.Double(2.0, 2.0));\n        assertTrue(out1.equals(out2));\n\n        out1.setPoint(new Point2D.Double(2.0, 3.0));\n        assertFalse(out1.equals(out2));\n        out2.setPoint(new Point2D.Double(2.0, 3.0));\n        assertTrue(out1.equals(out2));\n\n        out1.setRadius(4.0);\n        assertFalse(out1.equals(out2));\n        out2.setRadius(4.0);\n        assertTrue(out1.equals(out2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "OutlierTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "setPoint", "assertFalse", "equals", "setPoint", "assertTrue", "equals", "setPoint", "assertFalse", "equals", "setPoint", "assertTrue", "equals", "setRadius", "assertFalse", "equals", "setRadius", "assertTrue", "equals"]}, "focal_class": {"identifier": "Outlier", "superclass": "", "interfaces": "implements Comparable", "fields": [{"original_string": "private Point2D point;", "modifier": "private", "type": "Point2D", "declarator": "point", "var_name": "point"}, {"original_string": "private double radius;", "modifier": "private", "type": "double", "declarator": "radius", "var_name": "radius"}], "methods": [{"identifier": "Outlier", "parameters": "(double xCoord, double yCoord, double radius)", "modifiers": "public", "return": "", "signature": " Outlier(double xCoord, double yCoord, double radius)", "full_signature": "public  Outlier(double xCoord, double yCoord, double radius)", "class_method_signature": "Outlier.Outlier(double xCoord, double yCoord, double radius)", "testcase": false, "constructor": true}, {"identifier": "getPoint", "parameters": "()", "modifiers": "public", "return": "Point2D", "signature": "Point2D getPoint()", "full_signature": "public Point2D getPoint()", "class_method_signature": "Outlier.getPoint()", "testcase": false, "constructor": false}, {"identifier": "setPoint", "parameters": "(Point2D point)", "modifiers": "public", "return": "void", "signature": "void setPoint(Point2D point)", "full_signature": "public void setPoint(Point2D point)", "class_method_signature": "Outlier.setPoint(Point2D point)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getX()", "full_signature": "public double getX()", "class_method_signature": "Outlier.getX()", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getY()", "full_signature": "public double getY()", "class_method_signature": "Outlier.getY()", "testcase": false, "constructor": false}, {"identifier": "getRadius", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRadius()", "full_signature": "public double getRadius()", "class_method_signature": "Outlier.getRadius()", "testcase": false, "constructor": false}, {"identifier": "setRadius", "parameters": "(double radius)", "modifiers": "public", "return": "void", "signature": "void setRadius(double radius)", "full_signature": "public void setRadius(double radius)", "class_method_signature": "Outlier.setRadius(double radius)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object o)", "full_signature": "public int compareTo(Object o)", "class_method_signature": "Outlier.compareTo(Object o)", "testcase": false, "constructor": false}, {"identifier": "overlaps", "parameters": "(Outlier other)", "modifiers": "public", "return": "boolean", "signature": "boolean overlaps(Outlier other)", "full_signature": "public boolean overlaps(Outlier other)", "class_method_signature": "Outlier.overlaps(Outlier other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Outlier.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Outlier.toString()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/renderer/Outlier.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Outlier)) {\n            return false;\n        }\n        Outlier that = (Outlier) obj;\n        if (!this.point.equals(that.point)) {\n            return false;\n        }\n        if (this.radius != that.radius) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Outlier.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}