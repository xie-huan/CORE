{"test_class": {"identifier": "DefaultIntervalCategoryDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java"}, "test_case": {"identifier": "testSetEndValue", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testSetEndValue() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        d1.setEndValue(0, \"Category 2\", new Double(99.9));\n        assertEquals(new Double(99.9), d1.getEndValue(\"Series 1\",\n                \"Category 2\"));\n\n        boolean pass = false;\n        try {\n            d1.setEndValue(-1, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.setEndValue(2, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }", "signature": "void testSetEndValue()", "full_signature": "public void testSetEndValue()", "class_method_signature": "DefaultIntervalCategoryDatasetTests.testSetEndValue()", "testcase": true, "constructor": false, "invocations": ["setEndValue", "assertEquals", "getEndValue", "setEndValue", "assertTrue", "setEndValue", "assertTrue"]}, "focal_class": {"identifier": "DefaultIntervalCategoryDataset", "superclass": "extends AbstractSeriesDataset", "interfaces": "implements IntervalCategoryDataset", "fields": [{"original_string": "private Comparable[] seriesKeys;", "modifier": "private", "type": "Comparable[]", "declarator": "seriesKeys", "var_name": "seriesKeys"}, {"original_string": "private Comparable[] categoryKeys;", "modifier": "private", "type": "Comparable[]", "declarator": "categoryKeys", "var_name": "categoryKeys"}, {"original_string": "private Number[][] startData;", "modifier": "private", "type": "Number[][]", "declarator": "startData", "var_name": "startData"}, {"original_string": "private Number[][] endData;", "modifier": "private", "type": "Number[][]", "declarator": "endData", "var_name": "endData"}], "methods": [{"identifier": "DefaultIntervalCategoryDataset", "parameters": "(double[][] starts, double[][] ends)", "modifiers": "public", "return": "", "signature": " DefaultIntervalCategoryDataset(double[][] starts, double[][] ends)", "full_signature": "public  DefaultIntervalCategoryDataset(double[][] starts, double[][] ends)", "class_method_signature": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][] starts, double[][] ends)", "testcase": false, "constructor": true}, {"identifier": "DefaultIntervalCategoryDataset", "parameters": "(Number[][] starts, Number[][] ends)", "modifiers": "public", "return": "", "signature": " DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends)", "full_signature": "public  DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends)", "class_method_signature": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends)", "testcase": false, "constructor": true}, {"identifier": "DefaultIntervalCategoryDataset", "parameters": "(String[] seriesNames,\n                                          Number[][] starts,\n                                          Number[][] ends)", "modifiers": "public", "return": "", "signature": " DefaultIntervalCategoryDataset(String[] seriesNames,\n                                          Number[][] starts,\n                                          Number[][] ends)", "full_signature": "public  DefaultIntervalCategoryDataset(String[] seriesNames,\n                                          Number[][] starts,\n                                          Number[][] ends)", "class_method_signature": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[] seriesNames,\n                                          Number[][] starts,\n                                          Number[][] ends)", "testcase": false, "constructor": true}, {"identifier": "DefaultIntervalCategoryDataset", "parameters": "(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends)", "modifiers": "public", "return": "", "signature": " DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends)", "full_signature": "public  DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends)", "class_method_signature": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends)", "testcase": false, "constructor": true}, {"identifier": "getSeriesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSeriesCount()", "full_signature": "public int getSeriesCount()", "class_method_signature": "DefaultIntervalCategoryDataset.getSeriesCount()", "testcase": false, "constructor": false}, {"identifier": "getSeriesIndex", "parameters": "(Comparable seriesKey)", "modifiers": "public", "return": "int", "signature": "int getSeriesIndex(Comparable seriesKey)", "full_signature": "public int getSeriesIndex(Comparable seriesKey)", "class_method_signature": "DefaultIntervalCategoryDataset.getSeriesIndex(Comparable seriesKey)", "testcase": false, "constructor": false}, {"identifier": "getSeriesKey", "parameters": "(int series)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getSeriesKey(int series)", "full_signature": "public Comparable getSeriesKey(int series)", "class_method_signature": "DefaultIntervalCategoryDataset.getSeriesKey(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesKeys", "parameters": "(Comparable[] seriesKeys)", "modifiers": "public", "return": "void", "signature": "void setSeriesKeys(Comparable[] seriesKeys)", "full_signature": "public void setSeriesKeys(Comparable[] seriesKeys)", "class_method_signature": "DefaultIntervalCategoryDataset.setSeriesKeys(Comparable[] seriesKeys)", "testcase": false, "constructor": false}, {"identifier": "getCategoryCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCategoryCount()", "full_signature": "public int getCategoryCount()", "class_method_signature": "DefaultIntervalCategoryDataset.getCategoryCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnKeys", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getColumnKeys()", "full_signature": "public List getColumnKeys()", "class_method_signature": "DefaultIntervalCategoryDataset.getColumnKeys()", "testcase": false, "constructor": false}, {"identifier": "setCategoryKeys", "parameters": "(Comparable[] categoryKeys)", "modifiers": "public", "return": "void", "signature": "void setCategoryKeys(Comparable[] categoryKeys)", "full_signature": "public void setCategoryKeys(Comparable[] categoryKeys)", "class_method_signature": "DefaultIntervalCategoryDataset.setCategoryKeys(Comparable[] categoryKeys)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Comparable series, Comparable category)", "modifiers": "public", "return": "Number", "signature": "Number getValue(Comparable series, Comparable category)", "full_signature": "public Number getValue(Comparable series, Comparable category)", "class_method_signature": "DefaultIntervalCategoryDataset.getValue(Comparable series, Comparable category)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int series, int category)", "modifiers": "public", "return": "Number", "signature": "Number getValue(int series, int category)", "full_signature": "public Number getValue(int series, int category)", "class_method_signature": "DefaultIntervalCategoryDataset.getValue(int series, int category)", "testcase": false, "constructor": false}, {"identifier": "getStartValue", "parameters": "(Comparable series, Comparable category)", "modifiers": "public", "return": "Number", "signature": "Number getStartValue(Comparable series, Comparable category)", "full_signature": "public Number getStartValue(Comparable series, Comparable category)", "class_method_signature": "DefaultIntervalCategoryDataset.getStartValue(Comparable series, Comparable category)", "testcase": false, "constructor": false}, {"identifier": "getStartValue", "parameters": "(int series, int category)", "modifiers": "public", "return": "Number", "signature": "Number getStartValue(int series, int category)", "full_signature": "public Number getStartValue(int series, int category)", "class_method_signature": "DefaultIntervalCategoryDataset.getStartValue(int series, int category)", "testcase": false, "constructor": false}, {"identifier": "getEndValue", "parameters": "(Comparable series, Comparable category)", "modifiers": "public", "return": "Number", "signature": "Number getEndValue(Comparable series, Comparable category)", "full_signature": "public Number getEndValue(Comparable series, Comparable category)", "class_method_signature": "DefaultIntervalCategoryDataset.getEndValue(Comparable series, Comparable category)", "testcase": false, "constructor": false}, {"identifier": "getEndValue", "parameters": "(int series, int category)", "modifiers": "public", "return": "Number", "signature": "Number getEndValue(int series, int category)", "full_signature": "public Number getEndValue(int series, int category)", "class_method_signature": "DefaultIntervalCategoryDataset.getEndValue(int series, int category)", "testcase": false, "constructor": false}, {"identifier": "setStartValue", "parameters": "(int series, Comparable category, Number value)", "modifiers": "public", "return": "void", "signature": "void setStartValue(int series, Comparable category, Number value)", "full_signature": "public void setStartValue(int series, Comparable category, Number value)", "class_method_signature": "DefaultIntervalCategoryDataset.setStartValue(int series, Comparable category, Number value)", "testcase": false, "constructor": false}, {"identifier": "setEndValue", "parameters": "(int series, Comparable category, Number value)", "modifiers": "public", "return": "void", "signature": "void setEndValue(int series, Comparable category, Number value)", "full_signature": "public void setEndValue(int series, Comparable category, Number value)", "class_method_signature": "DefaultIntervalCategoryDataset.setEndValue(int series, Comparable category, Number value)", "testcase": false, "constructor": false}, {"identifier": "getCategoryIndex", "parameters": "(Comparable category)", "modifiers": "public", "return": "int", "signature": "int getCategoryIndex(Comparable category)", "full_signature": "public int getCategoryIndex(Comparable category)", "class_method_signature": "DefaultIntervalCategoryDataset.getCategoryIndex(Comparable category)", "testcase": false, "constructor": false}, {"identifier": "generateKeys", "parameters": "(int count, String prefix)", "modifiers": "private", "return": "Comparable[]", "signature": "Comparable[] generateKeys(int count, String prefix)", "full_signature": "private Comparable[] generateKeys(int count, String prefix)", "class_method_signature": "DefaultIntervalCategoryDataset.generateKeys(int count, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getColumnKey", "parameters": "(int column)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getColumnKey(int column)", "full_signature": "public Comparable getColumnKey(int column)", "class_method_signature": "DefaultIntervalCategoryDataset.getColumnKey(int column)", "testcase": false, "constructor": false}, {"identifier": "getColumnIndex", "parameters": "(Comparable columnKey)", "modifiers": "public", "return": "int", "signature": "int getColumnIndex(Comparable columnKey)", "full_signature": "public int getColumnIndex(Comparable columnKey)", "class_method_signature": "DefaultIntervalCategoryDataset.getColumnIndex(Comparable columnKey)", "testcase": false, "constructor": false}, {"identifier": "getRowIndex", "parameters": "(Comparable rowKey)", "modifiers": "public", "return": "int", "signature": "int getRowIndex(Comparable rowKey)", "full_signature": "public int getRowIndex(Comparable rowKey)", "class_method_signature": "DefaultIntervalCategoryDataset.getRowIndex(Comparable rowKey)", "testcase": false, "constructor": false}, {"identifier": "getRowKeys", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getRowKeys()", "full_signature": "public List getRowKeys()", "class_method_signature": "DefaultIntervalCategoryDataset.getRowKeys()", "testcase": false, "constructor": false}, {"identifier": "getRowKey", "parameters": "(int row)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getRowKey(int row)", "full_signature": "public Comparable getRowKey(int row)", "class_method_signature": "DefaultIntervalCategoryDataset.getRowKey(int row)", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnCount()", "full_signature": "public int getColumnCount()", "class_method_signature": "DefaultIntervalCategoryDataset.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowCount()", "full_signature": "public int getRowCount()", "class_method_signature": "DefaultIntervalCategoryDataset.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DefaultIntervalCategoryDataset.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "DefaultIntervalCategoryDataset.clone()", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Number[][] array1, Number[][] array2)", "modifiers": "private static", "return": "boolean", "signature": "boolean equal(Number[][] array1, Number[][] array2)", "full_signature": "private static boolean equal(Number[][] array1, Number[][] array2)", "class_method_signature": "DefaultIntervalCategoryDataset.equal(Number[][] array1, Number[][] array2)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(Number[][] array)", "modifiers": "private static", "return": "Number[][]", "signature": "Number[][] clone(Number[][] array)", "full_signature": "private static Number[][] clone(Number[][] array)", "class_method_signature": "DefaultIntervalCategoryDataset.clone(Number[][] array)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java"}, "focal_method": {"identifier": "setEndValue", "parameters": "(int series, Comparable category, Number value)", "modifiers": "public", "return": "void", "body": "public void setEndValue(int series, Comparable category, Number value) {\n\n        // does the series exist?\n        if ((series < 0) || (series > getSeriesCount() - 1)) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"series outside valid range.\");\n        }\n\n        // is the category valid?\n        int categoryIndex = getCategoryIndex(category);\n        if (categoryIndex < 0) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.setValue: \"\n                + \"unrecognised category.\");\n        }\n\n        // update the data...\n        this.endData[series][categoryIndex] = value;\n        fireDatasetChanged(new DatasetChangeInfo());\n        // TODO: fill in real change details\n\n    }", "signature": "void setEndValue(int series, Comparable category, Number value)", "full_signature": "public void setEndValue(int series, Comparable category, Number value)", "class_method_signature": "DefaultIntervalCategoryDataset.setEndValue(int series, Comparable category, Number value)", "testcase": false, "constructor": false, "invocations": ["getSeriesCount", "getCategoryIndex", "fireDatasetChanged"]}, "repository": {"repo_id": "Chart_1_buggy"}}