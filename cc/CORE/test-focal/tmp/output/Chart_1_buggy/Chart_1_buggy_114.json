{"test_class": {"identifier": "LogFormatTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/util/junit/LogFormatTests.java"}, "test_case": {"identifier": "testHashcode", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testHashcode() {\n        LogFormat f1 = new LogFormat(10.0, \"10\", true);\n        LogFormat f2 = new LogFormat(10.0, \"10\", true);\n        assertTrue(f1.equals(f2));\n        int h1 = f1.hashCode();\n        int h2 = f2.hashCode();\n        assertEquals(h1, h2);\n    }", "signature": "void testHashcode()", "full_signature": "public void testHashcode()", "class_method_signature": "LogFormatTests.testHashcode()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "hashCode", "hashCode", "assertEquals"]}, "focal_class": {"identifier": "LogFormat", "superclass": "extends NumberFormat", "interfaces": "", "fields": [{"original_string": "private double base;", "modifier": "private", "type": "double", "declarator": "base", "var_name": "base"}, {"original_string": "private double baseLog;", "modifier": "private", "type": "double", "declarator": "baseLog", "var_name": "baseLog"}, {"original_string": "private String baseLabel;", "modifier": "private", "type": "String", "declarator": "baseLabel", "var_name": "baseLabel"}, {"original_string": "private String powerLabel;", "modifier": "private", "type": "String", "declarator": "powerLabel", "var_name": "powerLabel"}, {"original_string": "private boolean showBase;", "modifier": "private", "type": "boolean", "declarator": "showBase", "var_name": "showBase"}, {"original_string": "private NumberFormat formatter = new DecimalFormat(\"0.0#\");", "modifier": "private", "type": "NumberFormat", "declarator": "formatter = new DecimalFormat(\"0.0#\")", "var_name": "formatter"}], "methods": [{"identifier": "LogFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " LogFormat()", "full_signature": "public  LogFormat()", "class_method_signature": "LogFormat.LogFormat()", "testcase": false, "constructor": true}, {"identifier": "LogFormat", "parameters": "(double base, String baseLabel, boolean showBase)", "modifiers": "public", "return": "", "signature": " LogFormat(double base, String baseLabel, boolean showBase)", "full_signature": "public  LogFormat(double base, String baseLabel, boolean showBase)", "class_method_signature": "LogFormat.LogFormat(double base, String baseLabel, boolean showBase)", "testcase": false, "constructor": true}, {"identifier": "LogFormat", "parameters": "(double base, String baseLabel, String powerLabel,\n            boolean showBase)", "modifiers": "public", "return": "", "signature": " LogFormat(double base, String baseLabel, String powerLabel,\n            boolean showBase)", "full_signature": "public  LogFormat(double base, String baseLabel, String powerLabel,\n            boolean showBase)", "class_method_signature": "LogFormat.LogFormat(double base, String baseLabel, String powerLabel,\n            boolean showBase)", "testcase": false, "constructor": true}, {"identifier": "getExponentFormat", "parameters": "()", "modifiers": "public", "return": "NumberFormat", "signature": "NumberFormat getExponentFormat()", "full_signature": "public NumberFormat getExponentFormat()", "class_method_signature": "LogFormat.getExponentFormat()", "testcase": false, "constructor": false}, {"identifier": "setExponentFormat", "parameters": "(NumberFormat format)", "modifiers": "public", "return": "void", "signature": "void setExponentFormat(NumberFormat format)", "full_signature": "public void setExponentFormat(NumberFormat format)", "class_method_signature": "LogFormat.setExponentFormat(NumberFormat format)", "testcase": false, "constructor": false}, {"identifier": "calculateLog", "parameters": "(double value)", "modifiers": "private", "return": "double", "signature": "double calculateLog(double value)", "full_signature": "private double calculateLog(double value)", "class_method_signature": "LogFormat.calculateLog(double value)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(double number, StringBuffer toAppendTo,\n            FieldPosition pos)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer format(double number, StringBuffer toAppendTo,\n            FieldPosition pos)", "full_signature": "public StringBuffer format(double number, StringBuffer toAppendTo,\n            FieldPosition pos)", "class_method_signature": "LogFormat.format(double number, StringBuffer toAppendTo,\n            FieldPosition pos)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(long number, StringBuffer toAppendTo,\n            FieldPosition pos)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer format(long number, StringBuffer toAppendTo,\n            FieldPosition pos)", "full_signature": "public StringBuffer format(long number, StringBuffer toAppendTo,\n            FieldPosition pos)", "class_method_signature": "LogFormat.format(long number, StringBuffer toAppendTo,\n            FieldPosition pos)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String source, ParsePosition parsePosition)", "modifiers": "public", "return": "Number", "signature": "Number parse(String source, ParsePosition parsePosition)", "full_signature": "public Number parse(String source, ParsePosition parsePosition)", "class_method_signature": "LogFormat.parse(String source, ParsePosition parsePosition)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LogFormat.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "LogFormat.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/util/LogFormat.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof LogFormat)) {\n            return false;\n        }\n        LogFormat that = (LogFormat) obj;\n        if (this.base != that.base) {\n            return false;\n        }\n        if (!this.baseLabel.equals(that.baseLabel)) {\n            return false;\n        }\n        if (this.baseLog != that.baseLog) {\n            return false;\n        }\n        if (this.showBase != that.showBase) {\n            return false;\n        }\n        if (!this.formatter.equals(that.formatter)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LogFormat.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}