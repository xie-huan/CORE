{"test_class": {"identifier": "DayTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/time/junit/DayTests.java"}, "test_case": {"identifier": "testParseDay", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testParseDay() throws ParseException {\n\n        GregorianCalendar gc = new GregorianCalendar(2001, 12, 31);\n        SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n        Date reference = format.parse(\"31/12/2001\");\n        if (reference.equals(gc.getTime())) {\n            // test 1...\n            Day d = Day.parseDay(\"31/12/2001\");\n            assertEquals(37256, d.getSerialDate().toSerial());\n        }\n\n        // test 2...\n        Day d = Day.parseDay(\"2001-12-31\");\n        assertEquals(37256, d.getSerialDate().toSerial());\n\n    }", "signature": "void testParseDay()", "full_signature": "public void testParseDay()", "class_method_signature": "DayTests.testParseDay()", "testcase": true, "constructor": false, "invocations": ["parse", "equals", "getTime", "parseDay", "assertEquals", "toSerial", "getSerialDate", "parseDay", "assertEquals", "toSerial", "getSerialDate"]}, "focal_class": {"identifier": "Day", "superclass": "extends RegularTimePeriod", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -7082667380758962755L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7082667380758962755L", "var_name": "serialVersionUID"}, {"original_string": "protected static final DateFormat DATE_FORMAT\n        = new SimpleDateFormat(\"yyyy-MM-dd\");", "modifier": "protected static final", "type": "DateFormat", "declarator": "DATE_FORMAT\n        = new SimpleDateFormat(\"yyyy-MM-dd\")", "var_name": "DATE_FORMAT"}, {"original_string": "protected static final DateFormat\n        DATE_FORMAT_SHORT = DateFormat.getDateInstance(DateFormat.SHORT);", "modifier": "protected static final", "type": "DateFormat", "declarator": "DATE_FORMAT_SHORT = DateFormat.getDateInstance(DateFormat.SHORT)", "var_name": "DATE_FORMAT_SHORT"}, {"original_string": "protected static final DateFormat\n        DATE_FORMAT_MEDIUM = DateFormat.getDateInstance(DateFormat.MEDIUM);", "modifier": "protected static final", "type": "DateFormat", "declarator": "DATE_FORMAT_MEDIUM = DateFormat.getDateInstance(DateFormat.MEDIUM)", "var_name": "DATE_FORMAT_MEDIUM"}, {"original_string": "protected static final DateFormat\n        DATE_FORMAT_LONG = DateFormat.getDateInstance(DateFormat.LONG);", "modifier": "protected static final", "type": "DateFormat", "declarator": "DATE_FORMAT_LONG = DateFormat.getDateInstance(DateFormat.LONG)", "var_name": "DATE_FORMAT_LONG"}, {"original_string": "private SerialDate serialDate;", "modifier": "private", "type": "SerialDate", "declarator": "serialDate", "var_name": "serialDate"}, {"original_string": "private long firstMillisecond;", "modifier": "private", "type": "long", "declarator": "firstMillisecond", "var_name": "firstMillisecond"}, {"original_string": "private long lastMillisecond;", "modifier": "private", "type": "long", "declarator": "lastMillisecond", "var_name": "lastMillisecond"}], "methods": [{"identifier": "Day", "parameters": "()", "modifiers": "public", "return": "", "signature": " Day()", "full_signature": "public  Day()", "class_method_signature": "Day.Day()", "testcase": false, "constructor": true}, {"identifier": "Day", "parameters": "(int day, int month, int year)", "modifiers": "public", "return": "", "signature": " Day(int day, int month, int year)", "full_signature": "public  Day(int day, int month, int year)", "class_method_signature": "Day.Day(int day, int month, int year)", "testcase": false, "constructor": true}, {"identifier": "Day", "parameters": "(SerialDate serialDate)", "modifiers": "public", "return": "", "signature": " Day(SerialDate serialDate)", "full_signature": "public  Day(SerialDate serialDate)", "class_method_signature": "Day.Day(SerialDate serialDate)", "testcase": false, "constructor": true}, {"identifier": "Day", "parameters": "(Date time)", "modifiers": "public", "return": "", "signature": " Day(Date time)", "full_signature": "public  Day(Date time)", "class_method_signature": "Day.Day(Date time)", "testcase": false, "constructor": true}, {"identifier": "Day", "parameters": "(Date time, TimeZone zone)", "modifiers": "public", "return": "", "signature": " Day(Date time, TimeZone zone)", "full_signature": "public  Day(Date time, TimeZone zone)", "class_method_signature": "Day.Day(Date time, TimeZone zone)", "testcase": false, "constructor": true}, {"identifier": "getSerialDate", "parameters": "()", "modifiers": "public", "return": "SerialDate", "signature": "SerialDate getSerialDate()", "full_signature": "public SerialDate getSerialDate()", "class_method_signature": "Day.getSerialDate()", "testcase": false, "constructor": false}, {"identifier": "getYear", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getYear()", "full_signature": "public int getYear()", "class_method_signature": "Day.getYear()", "testcase": false, "constructor": false}, {"identifier": "getMonth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMonth()", "full_signature": "public int getMonth()", "class_method_signature": "Day.getMonth()", "testcase": false, "constructor": false}, {"identifier": "getDayOfMonth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDayOfMonth()", "full_signature": "public int getDayOfMonth()", "class_method_signature": "Day.getDayOfMonth()", "testcase": false, "constructor": false}, {"identifier": "getFirstMillisecond", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFirstMillisecond()", "full_signature": "public long getFirstMillisecond()", "class_method_signature": "Day.getFirstMillisecond()", "testcase": false, "constructor": false}, {"identifier": "getLastMillisecond", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastMillisecond()", "full_signature": "public long getLastMillisecond()", "class_method_signature": "Day.getLastMillisecond()", "testcase": false, "constructor": false}, {"identifier": "peg", "parameters": "(Calendar calendar)", "modifiers": "public", "return": "void", "signature": "void peg(Calendar calendar)", "full_signature": "public void peg(Calendar calendar)", "class_method_signature": "Day.peg(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public", "return": "RegularTimePeriod", "signature": "RegularTimePeriod previous()", "full_signature": "public RegularTimePeriod previous()", "class_method_signature": "Day.previous()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "RegularTimePeriod", "signature": "RegularTimePeriod next()", "full_signature": "public RegularTimePeriod next()", "class_method_signature": "Day.next()", "testcase": false, "constructor": false}, {"identifier": "getSerialIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSerialIndex()", "full_signature": "public long getSerialIndex()", "class_method_signature": "Day.getSerialIndex()", "testcase": false, "constructor": false}, {"identifier": "getFirstMillisecond", "parameters": "(Calendar calendar)", "modifiers": "public", "return": "long", "signature": "long getFirstMillisecond(Calendar calendar)", "full_signature": "public long getFirstMillisecond(Calendar calendar)", "class_method_signature": "Day.getFirstMillisecond(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "getLastMillisecond", "parameters": "(Calendar calendar)", "modifiers": "public", "return": "long", "signature": "long getLastMillisecond(Calendar calendar)", "full_signature": "public long getLastMillisecond(Calendar calendar)", "class_method_signature": "Day.getLastMillisecond(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Day.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Day.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o1)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object o1)", "full_signature": "public int compareTo(Object o1)", "class_method_signature": "Day.compareTo(Object o1)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Day.toString()", "testcase": false, "constructor": false}, {"identifier": "parseDay", "parameters": "(String s)", "modifiers": "public static", "return": "Day", "signature": "Day parseDay(String s)", "full_signature": "public static Day parseDay(String s)", "class_method_signature": "Day.parseDay(String s)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/time/Day.java"}, "focal_method": {"identifier": "parseDay", "parameters": "(String s)", "modifiers": "public static", "return": "Day", "body": "public static Day parseDay(String s) {\n\n        try {\n            return new Day (Day.DATE_FORMAT.parse(s));\n        }\n        catch (ParseException e1) {\n            try {\n                return new Day (Day.DATE_FORMAT_SHORT.parse(s));\n            }\n            catch (ParseException e2) {\n              // ignore\n            }\n        }\n        return null;\n\n    }", "signature": "Day parseDay(String s)", "full_signature": "public static Day parseDay(String s)", "class_method_signature": "Day.parseDay(String s)", "testcase": false, "constructor": false, "invocations": ["parse", "parse"]}, "repository": {"repo_id": "Chart_1_buggy"}}