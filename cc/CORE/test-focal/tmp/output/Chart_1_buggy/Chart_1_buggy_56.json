{"test_class": {"identifier": "CompassPlotTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/plot/junit/CompassPlotTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        CompassPlot plot1 = new CompassPlot();\n        CompassPlot plot2 = new CompassPlot();\n        assertTrue(plot1.equals(plot2));\n\n        // labelType...\n        plot1.setLabelType(CompassPlot.VALUE_LABELS);\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelType(CompassPlot.VALUE_LABELS);\n        assertTrue(plot1.equals(plot2));\n\n        // labelFont\n        plot1.setLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(plot1.equals(plot2));\n        plot2.setLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(plot1.equals(plot2));\n\n        // drawBorder\n        plot1.setDrawBorder(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawBorder(true);\n        assertTrue(plot1.equals(plot2));\n\n        // rosePaint\n        plot1.setRosePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRosePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        // roseCenterPaint\n        plot1.setRoseCenterPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRoseCenterPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        // roseHighlightPaint\n        plot1.setRoseHighlightPaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRoseHighlightPaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "CompassPlotTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "setLabelType", "assertFalse", "equals", "setLabelType", "assertTrue", "equals", "setLabelFont", "assertFalse", "equals", "setLabelFont", "assertTrue", "equals", "setDrawBorder", "assertFalse", "equals", "setDrawBorder", "assertTrue", "equals", "setRosePaint", "assertFalse", "equals", "setRosePaint", "assertTrue", "equals", "setRoseCenterPaint", "assertFalse", "equals", "setRoseCenterPaint", "assertTrue", "equals", "setRoseHighlightPaint", "assertFalse", "equals", "setRoseHighlightPaint", "assertTrue", "equals"]}, "focal_class": {"identifier": "CompassPlot", "superclass": "extends Plot", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 6924382802125527395L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6924382802125527395L", "var_name": "serialVersionUID"}, {"original_string": "public static final Font DEFAULT_LABEL_FONT = new Font(\"Tahoma\",\n            Font.BOLD, 10);", "modifier": "public static final", "type": "Font", "declarator": "DEFAULT_LABEL_FONT = new Font(\"Tahoma\",\n            Font.BOLD, 10)", "var_name": "DEFAULT_LABEL_FONT"}, {"original_string": "public static final int NO_LABELS = 0;", "modifier": "public static final", "type": "int", "declarator": "NO_LABELS = 0", "var_name": "NO_LABELS"}, {"original_string": "public static final int VALUE_LABELS = 1;", "modifier": "public static final", "type": "int", "declarator": "VALUE_LABELS = 1", "var_name": "VALUE_LABELS"}, {"original_string": "private int labelType;", "modifier": "private", "type": "int", "declarator": "labelType", "var_name": "labelType"}, {"original_string": "private Font labelFont;", "modifier": "private", "type": "Font", "declarator": "labelFont", "var_name": "labelFont"}, {"original_string": "private boolean drawBorder = false;", "modifier": "private", "type": "boolean", "declarator": "drawBorder = false", "var_name": "drawBorder"}, {"original_string": "private transient Paint roseHighlightPaint = Color.black;", "modifier": "private transient", "type": "Paint", "declarator": "roseHighlightPaint = Color.black", "var_name": "roseHighlightPaint"}, {"original_string": "private transient Paint rosePaint = Color.yellow;", "modifier": "private transient", "type": "Paint", "declarator": "rosePaint = Color.yellow", "var_name": "rosePaint"}, {"original_string": "private transient Paint roseCenterPaint = Color.white;", "modifier": "private transient", "type": "Paint", "declarator": "roseCenterPaint = Color.white", "var_name": "roseCenterPaint"}, {"original_string": "private Font compassFont = new Font(\"Tahoma\", Font.PLAIN, 10);", "modifier": "private", "type": "Font", "declarator": "compassFont = new Font(\"Tahoma\", Font.PLAIN, 10)", "var_name": "compassFont"}, {"original_string": "private transient Ellipse2D circle1;", "modifier": "private transient", "type": "Ellipse2D", "declarator": "circle1", "var_name": "circle1"}, {"original_string": "private transient Ellipse2D circle2;", "modifier": "private transient", "type": "Ellipse2D", "declarator": "circle2", "var_name": "circle2"}, {"original_string": "private transient Area a1;", "modifier": "private transient", "type": "Area", "declarator": "a1", "var_name": "a1"}, {"original_string": "private transient Area a2;", "modifier": "private transient", "type": "Area", "declarator": "a2", "var_name": "a2"}, {"original_string": "private transient Rectangle2D rect1;", "modifier": "private transient", "type": "Rectangle2D", "declarator": "rect1", "var_name": "rect1"}, {"original_string": "private ValueDataset[] datasets = new ValueDataset[1];", "modifier": "private", "type": "ValueDataset[]", "declarator": "datasets = new ValueDataset[1]", "var_name": "datasets"}, {"original_string": "private MeterNeedle[] seriesNeedle = new MeterNeedle[1];", "modifier": "private", "type": "MeterNeedle[]", "declarator": "seriesNeedle = new MeterNeedle[1]", "var_name": "seriesNeedle"}, {"original_string": "protected static ResourceBundle localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\");", "modifier": "protected static", "type": "ResourceBundle", "declarator": "localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\")", "var_name": "localizationResources"}, {"original_string": "protected double revolutionDistance = 360;", "modifier": "protected", "type": "double", "declarator": "revolutionDistance = 360", "var_name": "revolutionDistance"}], "methods": [{"identifier": "CompassPlot", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompassPlot()", "full_signature": "public  CompassPlot()", "class_method_signature": "CompassPlot.CompassPlot()", "testcase": false, "constructor": true}, {"identifier": "CompassPlot", "parameters": "(ValueDataset dataset)", "modifiers": "public", "return": "", "signature": " CompassPlot(ValueDataset dataset)", "full_signature": "public  CompassPlot(ValueDataset dataset)", "class_method_signature": "CompassPlot.CompassPlot(ValueDataset dataset)", "testcase": false, "constructor": true}, {"identifier": "getLabelType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLabelType()", "full_signature": "public int getLabelType()", "class_method_signature": "CompassPlot.getLabelType()", "testcase": false, "constructor": false}, {"identifier": "setLabelType", "parameters": "(int type)", "modifiers": "public", "return": "void", "signature": "void setLabelType(int type)", "full_signature": "public void setLabelType(int type)", "class_method_signature": "CompassPlot.setLabelType(int type)", "testcase": false, "constructor": false}, {"identifier": "getLabelFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getLabelFont()", "full_signature": "public Font getLabelFont()", "class_method_signature": "CompassPlot.getLabelFont()", "testcase": false, "constructor": false}, {"identifier": "setLabelFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setLabelFont(Font font)", "full_signature": "public void setLabelFont(Font font)", "class_method_signature": "CompassPlot.setLabelFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getRosePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getRosePaint()", "full_signature": "public Paint getRosePaint()", "class_method_signature": "CompassPlot.getRosePaint()", "testcase": false, "constructor": false}, {"identifier": "setRosePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setRosePaint(Paint paint)", "full_signature": "public void setRosePaint(Paint paint)", "class_method_signature": "CompassPlot.setRosePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getRoseCenterPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getRoseCenterPaint()", "full_signature": "public Paint getRoseCenterPaint()", "class_method_signature": "CompassPlot.getRoseCenterPaint()", "testcase": false, "constructor": false}, {"identifier": "setRoseCenterPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setRoseCenterPaint(Paint paint)", "full_signature": "public void setRoseCenterPaint(Paint paint)", "class_method_signature": "CompassPlot.setRoseCenterPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getRoseHighlightPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getRoseHighlightPaint()", "full_signature": "public Paint getRoseHighlightPaint()", "class_method_signature": "CompassPlot.getRoseHighlightPaint()", "testcase": false, "constructor": false}, {"identifier": "setRoseHighlightPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setRoseHighlightPaint(Paint paint)", "full_signature": "public void setRoseHighlightPaint(Paint paint)", "class_method_signature": "CompassPlot.setRoseHighlightPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getDrawBorder", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDrawBorder()", "full_signature": "public boolean getDrawBorder()", "class_method_signature": "CompassPlot.getDrawBorder()", "testcase": false, "constructor": false}, {"identifier": "setDrawBorder", "parameters": "(boolean status)", "modifiers": "public", "return": "void", "signature": "void setDrawBorder(boolean status)", "full_signature": "public void setDrawBorder(boolean status)", "class_method_signature": "CompassPlot.setDrawBorder(boolean status)", "testcase": false, "constructor": false}, {"identifier": "setSeriesPaint", "parameters": "(int series, Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSeriesPaint(int series, Paint paint)", "full_signature": "public void setSeriesPaint(int series, Paint paint)", "class_method_signature": "CompassPlot.setSeriesPaint(int series, Paint paint)", "testcase": false, "constructor": false}, {"identifier": "setSeriesOutlinePaint", "parameters": "(int series, Paint p)", "modifiers": "public", "return": "void", "signature": "void setSeriesOutlinePaint(int series, Paint p)", "full_signature": "public void setSeriesOutlinePaint(int series, Paint p)", "class_method_signature": "CompassPlot.setSeriesOutlinePaint(int series, Paint p)", "testcase": false, "constructor": false}, {"identifier": "setSeriesOutlineStroke", "parameters": "(int series, Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setSeriesOutlineStroke(int series, Stroke stroke)", "full_signature": "public void setSeriesOutlineStroke(int series, Stroke stroke)", "class_method_signature": "CompassPlot.setSeriesOutlineStroke(int series, Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "setSeriesNeedle", "parameters": "(int type)", "modifiers": "public", "return": "void", "signature": "void setSeriesNeedle(int type)", "full_signature": "public void setSeriesNeedle(int type)", "class_method_signature": "CompassPlot.setSeriesNeedle(int type)", "testcase": false, "constructor": false}, {"identifier": "setSeriesNeedle", "parameters": "(int index, int type)", "modifiers": "public", "return": "void", "signature": "void setSeriesNeedle(int index, int type)", "full_signature": "public void setSeriesNeedle(int index, int type)", "class_method_signature": "CompassPlot.setSeriesNeedle(int index, int type)", "testcase": false, "constructor": false}, {"identifier": "setSeriesNeedle", "parameters": "(int index, MeterNeedle needle)", "modifiers": "public", "return": "void", "signature": "void setSeriesNeedle(int index, MeterNeedle needle)", "full_signature": "public void setSeriesNeedle(int index, MeterNeedle needle)", "class_method_signature": "CompassPlot.setSeriesNeedle(int index, MeterNeedle needle)", "testcase": false, "constructor": false}, {"identifier": "getDatasets", "parameters": "()", "modifiers": "public", "return": "ValueDataset[]", "signature": "ValueDataset[] getDatasets()", "full_signature": "public ValueDataset[] getDatasets()", "class_method_signature": "CompassPlot.getDatasets()", "testcase": false, "constructor": false}, {"identifier": "addDataset", "parameters": "(ValueDataset dataset)", "modifiers": "public", "return": "void", "signature": "void addDataset(ValueDataset dataset)", "full_signature": "public void addDataset(ValueDataset dataset)", "class_method_signature": "CompassPlot.addDataset(ValueDataset dataset)", "testcase": false, "constructor": false}, {"identifier": "addDataset", "parameters": "(ValueDataset dataset, MeterNeedle needle)", "modifiers": "public", "return": "void", "signature": "void addDataset(ValueDataset dataset, MeterNeedle needle)", "full_signature": "public void addDataset(ValueDataset dataset, MeterNeedle needle)", "class_method_signature": "CompassPlot.addDataset(ValueDataset dataset, MeterNeedle needle)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "class_method_signature": "CompassPlot.draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "getPlotType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPlotType()", "full_signature": "public String getPlotType()", "class_method_signature": "CompassPlot.getPlotType()", "testcase": false, "constructor": false}, {"identifier": "getLegendItems", "parameters": "()", "modifiers": "public", "return": "LegendItemCollection", "signature": "LegendItemCollection getLegendItems()", "full_signature": "public LegendItemCollection getLegendItems()", "class_method_signature": "CompassPlot.getLegendItems()", "testcase": false, "constructor": false}, {"identifier": "zoom", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void zoom(double percent)", "full_signature": "public void zoom(double percent)", "class_method_signature": "CompassPlot.zoom(double percent)", "testcase": false, "constructor": false}, {"identifier": "getCompassFont", "parameters": "(int radius)", "modifiers": "protected", "return": "Font", "signature": "Font getCompassFont(int radius)", "full_signature": "protected Font getCompassFont(int radius)", "class_method_signature": "CompassPlot.getCompassFont(int radius)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CompassPlot.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "CompassPlot.clone()", "testcase": false, "constructor": false}, {"identifier": "setRevolutionDistance", "parameters": "(double size)", "modifiers": "public", "return": "void", "signature": "void setRevolutionDistance(double size)", "full_signature": "public void setRevolutionDistance(double size)", "class_method_signature": "CompassPlot.setRevolutionDistance(double size)", "testcase": false, "constructor": false}, {"identifier": "getRevolutionDistance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRevolutionDistance()", "full_signature": "public double getRevolutionDistance()", "class_method_signature": "CompassPlot.getRevolutionDistance()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "CompassPlot.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "CompassPlot.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/CompassPlot.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CompassPlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CompassPlot that = (CompassPlot) obj;\n        if (this.labelType != that.labelType) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (this.drawBorder != that.drawBorder) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.roseHighlightPaint,\n                that.roseHighlightPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rosePaint, that.rosePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.roseCenterPaint,\n                that.roseCenterPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.compassFont, that.compassFont)) {\n            return false;\n        }\n        if (!Arrays.equals(this.seriesNeedle, that.seriesNeedle)) {\n            return false;\n        }\n        if (getRevolutionDistance() != that.getRevolutionDistance()) {\n            return false;\n        }\n        return true;\n\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CompassPlot.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equal", "equal", "equal", "equals", "getRevolutionDistance", "getRevolutionDistance"]}, "repository": {"repo_id": "Chart_1_buggy"}}