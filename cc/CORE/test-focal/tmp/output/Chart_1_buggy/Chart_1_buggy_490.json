{"test_class": {"identifier": "GridArrangementTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/chart/block/junit/GridArrangementTests.java"}, "test_case": {"identifier": "testRF", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testRF() {\n        BlockContainer c = createTestContainer1();\n        RectangleConstraint constraint = new RectangleConstraint(new Range(40.0,\n                60.0), 100.0);\n        Size2D s = c.arrange(null, constraint);\n        assertEquals(60.0, s.width, EPSILON);\n        assertEquals(100.0, s.height, EPSILON);\n    }", "signature": "void testRF()", "full_signature": "public void testRF()", "class_method_signature": "GridArrangementTests.testRF()", "testcase": true, "constructor": false, "invocations": ["createTestContainer1", "arrange", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "GridArrangement", "superclass": "", "interfaces": "implements Arrangement, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -2563758090144655938L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2563758090144655938L", "var_name": "serialVersionUID"}, {"original_string": "private int rows;", "modifier": "private", "type": "int", "declarator": "rows", "var_name": "rows"}, {"original_string": "private int columns;", "modifier": "private", "type": "int", "declarator": "columns", "var_name": "columns"}], "methods": [{"identifier": "GridArrangement", "parameters": "(int rows, int columns)", "modifiers": "public", "return": "", "signature": " GridArrangement(int rows, int columns)", "full_signature": "public  GridArrangement(int rows, int columns)", "class_method_signature": "GridArrangement.GridArrangement(int rows, int columns)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Block block, Object key)", "modifiers": "public", "return": "void", "signature": "void add(Block block, Object key)", "full_signature": "public void add(Block block, Object key)", "class_method_signature": "GridArrangement.add(Block block, Object key)", "testcase": false, "constructor": false}, {"identifier": "arrange", "parameters": "(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "modifiers": "public", "return": "Size2D", "signature": "Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "full_signature": "public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeNN", "parameters": "(BlockContainer container, Graphics2D g2)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeNN(BlockContainer container, Graphics2D g2)", "full_signature": "protected Size2D arrangeNN(BlockContainer container, Graphics2D g2)", "class_method_signature": "GridArrangement.arrangeNN(BlockContainer container, Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "arrangeFF", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeFR", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeRF", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeRF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeRF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeRN", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeRN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeRN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeNR", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeNR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeNR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeNR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeRR", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeFN", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeFN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeFN(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeNF", "parameters": "(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeNF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "full_signature": "protected Size2D arrangeNF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrangeNF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "GridArrangement.clear()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "GridArrangement.equals(Object obj)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/block/GridArrangement.java"}, "focal_method": {"identifier": "arrange", "parameters": "(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "modifiers": "public", "return": "Size2D", "body": "public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint) {\n        LengthConstraintType w = constraint.getWidthConstraintType();\n        LengthConstraintType h = constraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeNN(container, g2);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeNF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                // find optimum height, then map to range\n                return arrangeNR(container, g2, constraint);\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                // find optimum height\n                return arrangeFN(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeFF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                // find optimum height and map to range\n                return arrangeFR(container, g2, constraint);\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            // find optimum width and map to range\n            if (h == LengthConstraintType.NONE) {\n                // find optimum height\n                return arrangeRN(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                // fixed width\n                return arrangeRF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeRR(container, g2, constraint);\n            }\n        }\n        throw new RuntimeException(\"Should never get to here!\");\n    }", "signature": "Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "full_signature": "public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "class_method_signature": "GridArrangement.arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint)", "testcase": false, "constructor": false, "invocations": ["getWidthConstraintType", "getHeightConstraintType", "arrangeNN", "arrangeNF", "arrangeNR", "arrangeFN", "arrangeFF", "arrangeFR", "arrangeRN", "arrangeRF", "arrangeRR"]}, "repository": {"repo_id": "Chart_1_buggy"}}