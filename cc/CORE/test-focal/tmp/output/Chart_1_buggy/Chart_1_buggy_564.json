{"test_class": {"identifier": "StandardChartThemeTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/junit/StandardChartThemeTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n\n        StandardChartTheme t1 = new StandardChartTheme(\"Name\");\n        StandardChartTheme t2 = new StandardChartTheme(\"Name\");\n        assertTrue(t1.equals(t2));\n\n        // name\n        t1 = new StandardChartTheme(\"t1\");\n        assertFalse(t1.equals(t2));\n        t2 = new StandardChartTheme(\"t1\");\n        assertTrue(t1.equals(t2));\n\n        //extraLargeFont\n        t1.setExtraLargeFont(new Font(\"Dialog\", Font.PLAIN, 21));\n        assertFalse(t1.equals(t2));\n        t2.setExtraLargeFont(new Font(\"Dialog\", Font.PLAIN, 21));\n        assertTrue(t1.equals(t2));\n\n        //largeFont\n        t1.setLargeFont(new Font(\"Dialog\", Font.PLAIN, 19));\n        assertFalse(t1.equals(t2));\n        t2.setLargeFont(new Font(\"Dialog\", Font.PLAIN, 19));\n        assertTrue(t1.equals(t2));\n\n        //regularFont;\n        t1.setRegularFont(new Font(\"Dialog\", Font.PLAIN, 17));\n        assertFalse(t1.equals(t2));\n        t2.setRegularFont(new Font(\"Dialog\", Font.PLAIN, 17));\n        assertTrue(t1.equals(t2));\n\n        //titlePaint;\n        t1.setTitlePaint(new GradientPaint(0f, 1f, Color.red, 2f, 3f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setTitlePaint(new GradientPaint(0f, 1f, Color.red, 2f, 3f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //subtitlePaint;\n        t1.setSubtitlePaint(new GradientPaint(1f, 2f, Color.red, 3f, 4f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setSubtitlePaint(new GradientPaint(1f, 2f, Color.red, 3f, 4f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //chartBackgroundPaint;\n        t1.setChartBackgroundPaint(new GradientPaint(2f, 3f, Color.blue, 4f, 5f, Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setChartBackgroundPaint(new GradientPaint(2f, 3f, Color.blue, 4f, 5f, Color.red));\n        assertTrue(t1.equals(t2));\n\n        //legendBackgroundPaint;\n        t1.setLegendBackgroundPaint(new GradientPaint(3f, 4f, Color.gray, 1f, 2f, Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setLegendBackgroundPaint(new GradientPaint(3f, 4f, Color.gray, 1f, 2f, Color.red));\n        assertTrue(t1.equals(t2));\n\n        //legendItemPaint;\n        t1.setLegendItemPaint(new GradientPaint(9f, 8f, Color.red, 7f, 6f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setLegendItemPaint(new GradientPaint(9f, 8f, Color.red, 7f, 6f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //drawingSupplier;\n        t1.setDrawingSupplier(new DefaultDrawingSupplier(\n                new Paint[] {Color.red},\n                new Paint[] {Color.blue},\n                new Stroke[] {new BasicStroke(1.0f)},\n                new Stroke[] {new BasicStroke(1.0f)},\n                new Shape[] {new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)}));\n        assertFalse(t1.equals(t2));\n        t2.setDrawingSupplier(new DefaultDrawingSupplier(\n                new Paint[] {Color.red},\n                new Paint[] {Color.blue},\n                new Stroke[] {new BasicStroke(1.0f)},\n                new Stroke[] {new BasicStroke(1.0f)},\n                new Shape[] {new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)}));\n        assertTrue(t1.equals(t2));\n\n        //plotBackgroundPaint;\n        t1.setPlotBackgroundPaint(new GradientPaint(4f, 3f, Color.red, 6f, 7f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setPlotBackgroundPaint(new GradientPaint(4f, 3f, Color.red, 6f, 7f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //plotOutlinePaint;\n        t1.setPlotOutlinePaint(new GradientPaint(5f, 2f, Color.blue, 6f, 7f, Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setPlotOutlinePaint(new GradientPaint(5f, 2f, Color.blue, 6f, 7f, Color.red));\n        assertTrue(t1.equals(t2));\n\n        //labelLinkStyle;\n        t1.setLabelLinkStyle(PieLabelLinkStyle.STANDARD);\n        assertFalse(t1.equals(t2));\n        t2.setLabelLinkStyle(PieLabelLinkStyle.STANDARD);\n        assertTrue(t1.equals(t2));\n\n        //labelLinkPaint;\n        t1.setLabelLinkPaint(new GradientPaint(4f, 3f, Color.red, 2f, 9f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setLabelLinkPaint(new GradientPaint(4f, 3f, Color.red, 2f, 9f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //domainGridlinePaint;\n        t1.setDomainGridlinePaint(Color.blue);\n        assertFalse(t1.equals(t2));\n        t2.setDomainGridlinePaint(Color.blue);\n        assertTrue(t1.equals(t2));\n\n        //rangeGridlinePaint;\n        t1.setRangeGridlinePaint(Color.red);\n        assertFalse(t1.equals(t2));\n        t2.setRangeGridlinePaint(Color.red);\n        assertTrue(t1.equals(t2));\n\n        //axisOffset;\n        t1.setAxisOffset(new RectangleInsets(1, 2, 3, 4));\n        assertFalse(t1.equals(t2));\n        t2.setAxisOffset(new RectangleInsets(1, 2, 3, 4));\n        assertTrue(t1.equals(t2));\n\n        //axisLabelPaint;\n        t1.setAxisLabelPaint(new GradientPaint(8f, 4f, Color.gray, 2f, 9f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setAxisLabelPaint(new GradientPaint(8f, 4f, Color.gray, 2f, 9f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //tickLabelPaint;\n        t1.setTickLabelPaint(new GradientPaint(3f, 4f, Color.red, 5f, 6f, Color.yellow));\n        assertFalse(t1.equals(t2));\n        t2.setTickLabelPaint(new GradientPaint(3f, 4f, Color.red, 5f, 6f, Color.yellow));\n        assertTrue(t1.equals(t2));\n\n        //itemLabelPaint;\n        t1.setItemLabelPaint(new GradientPaint(2f, 5f, Color.gray, 1f, 2f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setItemLabelPaint(new GradientPaint(2f, 5f, Color.gray, 1f, 2f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //shadowVisible;\n        t1.setShadowVisible(!t1.isShadowVisible());\n        assertFalse(t1.equals(t2));\n        t2.setShadowVisible(t1.isShadowVisible());\n        assertTrue(t1.equals(t2));\n\n        //shadowPaint;\n        t1.setShadowPaint(new GradientPaint(7f, 1f, Color.blue, 4f, 6f, Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setShadowPaint(new GradientPaint(7f, 1f, Color.blue, 4f, 6f, Color.red));\n        assertTrue(t1.equals(t2));\n\n        //barPainter;\n        t1.setBarPainter(new StandardBarPainter());\n        assertFalse(t1.equals(t2));\n        t2.setBarPainter(new StandardBarPainter());\n        assertTrue(t1.equals(t2));\n\n        //xyBarPainter;\n        t1.setXYBarPainter(new StandardXYBarPainter());\n        assertFalse(t1.equals(t2));\n        t2.setXYBarPainter(new StandardXYBarPainter());\n        assertTrue(t1.equals(t2));\n\n        //thermometerPaint;\n        t1.setThermometerPaint(new GradientPaint(9f, 7f, Color.red, 5f, 1f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setThermometerPaint(new GradientPaint(9f, 7f, Color.red, 5f, 1f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //wallPaint;\n        t1.setWallPaint(new GradientPaint(4f, 5f, Color.red, 1f, 0f, Color.gray));\n        assertFalse(t1.equals(t2));\n        t2.setWallPaint(new GradientPaint(4f, 5f, Color.red, 1f, 0f, Color.gray));\n        assertTrue(t1.equals(t2));\n\n        //errorIndicatorPaint;\n        t1.setErrorIndicatorPaint(new GradientPaint(0f, 1f, Color.white, 2f, 3f, Color.blue));\n        assertFalse(t1.equals(t2));\n        t2.setErrorIndicatorPaint(new GradientPaint(0f, 1f, Color.white, 2f, 3f, Color.blue));\n        assertTrue(t1.equals(t2));\n\n        //gridBandPaint\n        t1.setGridBandPaint(new GradientPaint(1f, 2f, Color.white, 4f, 8f, Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setGridBandPaint(new GradientPaint(1f, 2f, Color.white, 4f, 8f, Color.red));\n        assertTrue(t1.equals(t2));\n\n        //gridBandAlternatePaint\n        t1.setGridBandAlternatePaint(new GradientPaint(1f, 4f, Color.green, 1f, 2f, Color.red));\n        assertFalse(t1.equals(t2));\n        t2.setGridBandAlternatePaint(new GradientPaint(1f, 4f, Color.green, 1f, 2f, Color.red));\n        assertTrue(t1.equals(t2));\n\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "StandardChartThemeTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "setExtraLargeFont", "assertFalse", "equals", "setExtraLargeFont", "assertTrue", "equals", "setLargeFont", "assertFalse", "equals", "setLargeFont", "assertTrue", "equals", "setRegularFont", "assertFalse", "equals", "setRegularFont", "assertTrue", "equals", "setTitlePaint", "assertFalse", "equals", "setTitlePaint", "assertTrue", "equals", "setSubtitlePaint", "assertFalse", "equals", "setSubtitlePaint", "assertTrue", "equals", "setChartBackgroundPaint", "assertFalse", "equals", "setChartBackgroundPaint", "assertTrue", "equals", "setLegendBackgroundPaint", "assertFalse", "equals", "setLegendBackgroundPaint", "assertTrue", "equals", "setLegendItemPaint", "assertFalse", "equals", "setLegendItemPaint", "assertTrue", "equals", "setDrawingSupplier", "assertFalse", "equals", "setDrawingSupplier", "assertTrue", "equals", "setPlotBackgroundPaint", "assertFalse", "equals", "setPlotBackgroundPaint", "assertTrue", "equals", "setPlotOutlinePaint", "assertFalse", "equals", "setPlotOutlinePaint", "assertTrue", "equals", "setLabelLinkStyle", "assertFalse", "equals", "setLabelLinkStyle", "assertTrue", "equals", "setLabelLinkPaint", "assertFalse", "equals", "setLabelLinkPaint", "assertTrue", "equals", "setDomainGridlinePaint", "assertFalse", "equals", "setDomainGridlinePaint", "assertTrue", "equals", "setRangeGridlinePaint", "assertFalse", "equals", "setRangeGridlinePaint", "assertTrue", "equals", "setAxisOffset", "assertFalse", "equals", "setAxisOffset", "assertTrue", "equals", "setAxisLabelPaint", "assertFalse", "equals", "setAxisLabelPaint", "assertTrue", "equals", "setTickLabelPaint", "assertFalse", "equals", "setTickLabelPaint", "assertTrue", "equals", "setItemLabelPaint", "assertFalse", "equals", "setItemLabelPaint", "assertTrue", "equals", "setShadowVisible", "isShadowVisible", "assertFalse", "equals", "setShadowVisible", "isShadowVisible", "assertTrue", "equals", "setShadowPaint", "assertFalse", "equals", "setShadowPaint", "assertTrue", "equals", "setBarPainter", "assertFalse", "equals", "setBarPainter", "assertTrue", "equals", "setXYBarPainter", "assertFalse", "equals", "setXYBarPainter", "assertTrue", "equals", "setThermometerPaint", "assertFalse", "equals", "setThermometerPaint", "assertTrue", "equals", "setWallPaint", "assertFalse", "equals", "setWallPaint", "assertTrue", "equals", "setErrorIndicatorPaint", "assertFalse", "equals", "setErrorIndicatorPaint", "assertTrue", "equals", "setGridBandPaint", "assertFalse", "equals", "setGridBandPaint", "assertTrue", "equals", "setGridBandAlternatePaint", "assertFalse", "equals", "setGridBandAlternatePaint", "assertTrue", "equals"]}, "focal_class": {"identifier": "StandardChartTheme", "superclass": "", "interfaces": "implements ChartTheme, Cloneable,\n        PublicCloneable, Serializable", "fields": [{"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private Font extraLargeFont;", "modifier": "private", "type": "Font", "declarator": "extraLargeFont", "var_name": "extraLargeFont"}, {"original_string": "private Font largeFont;", "modifier": "private", "type": "Font", "declarator": "largeFont", "var_name": "largeFont"}, {"original_string": "private Font regularFont;", "modifier": "private", "type": "Font", "declarator": "regularFont", "var_name": "regularFont"}, {"original_string": "private Font smallFont;", "modifier": "private", "type": "Font", "declarator": "smallFont", "var_name": "smallFont"}, {"original_string": "private transient Paint titlePaint;", "modifier": "private transient", "type": "Paint", "declarator": "titlePaint", "var_name": "titlePaint"}, {"original_string": "private transient Paint subtitlePaint;", "modifier": "private transient", "type": "Paint", "declarator": "subtitlePaint", "var_name": "subtitlePaint"}, {"original_string": "private transient Paint chartBackgroundPaint;", "modifier": "private transient", "type": "Paint", "declarator": "chartBackgroundPaint", "var_name": "chartBackgroundPaint"}, {"original_string": "private transient Paint legendBackgroundPaint;", "modifier": "private transient", "type": "Paint", "declarator": "legendBackgroundPaint", "var_name": "legendBackgroundPaint"}, {"original_string": "private transient Paint legendItemPaint;", "modifier": "private transient", "type": "Paint", "declarator": "legendItemPaint", "var_name": "legendItemPaint"}, {"original_string": "private DrawingSupplier drawingSupplier;", "modifier": "private", "type": "DrawingSupplier", "declarator": "drawingSupplier", "var_name": "drawingSupplier"}, {"original_string": "private transient Paint plotBackgroundPaint;", "modifier": "private transient", "type": "Paint", "declarator": "plotBackgroundPaint", "var_name": "plotBackgroundPaint"}, {"original_string": "private transient Paint plotOutlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "plotOutlinePaint", "var_name": "plotOutlinePaint"}, {"original_string": "private PieLabelLinkStyle labelLinkStyle;", "modifier": "private", "type": "PieLabelLinkStyle", "declarator": "labelLinkStyle", "var_name": "labelLinkStyle"}, {"original_string": "private transient Paint labelLinkPaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelLinkPaint", "var_name": "labelLinkPaint"}, {"original_string": "private transient Paint domainGridlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "domainGridlinePaint", "var_name": "domainGridlinePaint"}, {"original_string": "private transient Paint rangeGridlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "rangeGridlinePaint", "var_name": "rangeGridlinePaint"}, {"original_string": "private transient Paint baselinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "baselinePaint", "var_name": "baselinePaint"}, {"original_string": "private transient Paint crosshairPaint;", "modifier": "private transient", "type": "Paint", "declarator": "crosshairPaint", "var_name": "crosshairPaint"}, {"original_string": "private RectangleInsets axisOffset;", "modifier": "private", "type": "RectangleInsets", "declarator": "axisOffset", "var_name": "axisOffset"}, {"original_string": "private transient Paint axisLabelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "axisLabelPaint", "var_name": "axisLabelPaint"}, {"original_string": "private transient Paint tickLabelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "tickLabelPaint", "var_name": "tickLabelPaint"}, {"original_string": "private transient Paint itemLabelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "itemLabelPaint", "var_name": "itemLabelPaint"}, {"original_string": "private boolean shadowVisible;", "modifier": "private", "type": "boolean", "declarator": "shadowVisible", "var_name": "shadowVisible"}, {"original_string": "private transient Paint shadowPaint;", "modifier": "private transient", "type": "Paint", "declarator": "shadowPaint", "var_name": "shadowPaint"}, {"original_string": "private BarPainter barPainter;", "modifier": "private", "type": "BarPainter", "declarator": "barPainter", "var_name": "barPainter"}, {"original_string": "private XYBarPainter xyBarPainter;", "modifier": "private", "type": "XYBarPainter", "declarator": "xyBarPainter", "var_name": "xyBarPainter"}, {"original_string": "private transient Paint thermometerPaint;", "modifier": "private transient", "type": "Paint", "declarator": "thermometerPaint", "var_name": "thermometerPaint"}, {"original_string": "private transient Paint wallPaint;", "modifier": "private transient", "type": "Paint", "declarator": "wallPaint", "var_name": "wallPaint"}, {"original_string": "private transient Paint errorIndicatorPaint;", "modifier": "private transient", "type": "Paint", "declarator": "errorIndicatorPaint", "var_name": "errorIndicatorPaint"}, {"original_string": "private transient Paint gridBandPaint = SymbolAxis.DEFAULT_GRID_BAND_PAINT;", "modifier": "private transient", "type": "Paint", "declarator": "gridBandPaint = SymbolAxis.DEFAULT_GRID_BAND_PAINT", "var_name": "gridBandPaint"}, {"original_string": "private transient Paint gridBandAlternatePaint\n            = SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT;", "modifier": "private transient", "type": "Paint", "declarator": "gridBandAlternatePaint\n            = SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT", "var_name": "gridBandAlternatePaint"}], "methods": [{"identifier": "createJFreeTheme", "parameters": "()", "modifiers": "public static", "return": "ChartTheme", "signature": "ChartTheme createJFreeTheme()", "full_signature": "public static ChartTheme createJFreeTheme()", "class_method_signature": "StandardChartTheme.createJFreeTheme()", "testcase": false, "constructor": false}, {"identifier": "createDarknessTheme", "parameters": "()", "modifiers": "public static", "return": "ChartTheme", "signature": "ChartTheme createDarknessTheme()", "full_signature": "public static ChartTheme createDarknessTheme()", "class_method_signature": "StandardChartTheme.createDarknessTheme()", "testcase": false, "constructor": false}, {"identifier": "createLegacyTheme", "parameters": "()", "modifiers": "public static", "return": "ChartTheme", "signature": "ChartTheme createLegacyTheme()", "full_signature": "public static ChartTheme createLegacyTheme()", "class_method_signature": "StandardChartTheme.createLegacyTheme()", "testcase": false, "constructor": false}, {"identifier": "StandardChartTheme", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " StandardChartTheme(String name)", "full_signature": "public  StandardChartTheme(String name)", "class_method_signature": "StandardChartTheme.StandardChartTheme(String name)", "testcase": false, "constructor": true}, {"identifier": "getExtraLargeFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getExtraLargeFont()", "full_signature": "public Font getExtraLargeFont()", "class_method_signature": "StandardChartTheme.getExtraLargeFont()", "testcase": false, "constructor": false}, {"identifier": "setExtraLargeFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setExtraLargeFont(Font font)", "full_signature": "public void setExtraLargeFont(Font font)", "class_method_signature": "StandardChartTheme.setExtraLargeFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getLargeFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getLargeFont()", "full_signature": "public Font getLargeFont()", "class_method_signature": "StandardChartTheme.getLargeFont()", "testcase": false, "constructor": false}, {"identifier": "setLargeFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setLargeFont(Font font)", "full_signature": "public void setLargeFont(Font font)", "class_method_signature": "StandardChartTheme.setLargeFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getRegularFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getRegularFont()", "full_signature": "public Font getRegularFont()", "class_method_signature": "StandardChartTheme.getRegularFont()", "testcase": false, "constructor": false}, {"identifier": "setRegularFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setRegularFont(Font font)", "full_signature": "public void setRegularFont(Font font)", "class_method_signature": "StandardChartTheme.setRegularFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getSmallFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getSmallFont()", "full_signature": "public Font getSmallFont()", "class_method_signature": "StandardChartTheme.getSmallFont()", "testcase": false, "constructor": false}, {"identifier": "setSmallFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setSmallFont(Font font)", "full_signature": "public void setSmallFont(Font font)", "class_method_signature": "StandardChartTheme.setSmallFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getTitlePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getTitlePaint()", "full_signature": "public Paint getTitlePaint()", "class_method_signature": "StandardChartTheme.getTitlePaint()", "testcase": false, "constructor": false}, {"identifier": "setTitlePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setTitlePaint(Paint paint)", "full_signature": "public void setTitlePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setTitlePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getSubtitlePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getSubtitlePaint()", "full_signature": "public Paint getSubtitlePaint()", "class_method_signature": "StandardChartTheme.getSubtitlePaint()", "testcase": false, "constructor": false}, {"identifier": "setSubtitlePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSubtitlePaint(Paint paint)", "full_signature": "public void setSubtitlePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setSubtitlePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getChartBackgroundPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getChartBackgroundPaint()", "full_signature": "public Paint getChartBackgroundPaint()", "class_method_signature": "StandardChartTheme.getChartBackgroundPaint()", "testcase": false, "constructor": false}, {"identifier": "setChartBackgroundPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setChartBackgroundPaint(Paint paint)", "full_signature": "public void setChartBackgroundPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setChartBackgroundPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLegendBackgroundPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLegendBackgroundPaint()", "full_signature": "public Paint getLegendBackgroundPaint()", "class_method_signature": "StandardChartTheme.getLegendBackgroundPaint()", "testcase": false, "constructor": false}, {"identifier": "setLegendBackgroundPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLegendBackgroundPaint(Paint paint)", "full_signature": "public void setLegendBackgroundPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setLegendBackgroundPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLegendItemPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLegendItemPaint()", "full_signature": "public Paint getLegendItemPaint()", "class_method_signature": "StandardChartTheme.getLegendItemPaint()", "testcase": false, "constructor": false}, {"identifier": "setLegendItemPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLegendItemPaint(Paint paint)", "full_signature": "public void setLegendItemPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setLegendItemPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getPlotBackgroundPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getPlotBackgroundPaint()", "full_signature": "public Paint getPlotBackgroundPaint()", "class_method_signature": "StandardChartTheme.getPlotBackgroundPaint()", "testcase": false, "constructor": false}, {"identifier": "setPlotBackgroundPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setPlotBackgroundPaint(Paint paint)", "full_signature": "public void setPlotBackgroundPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setPlotBackgroundPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getPlotOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getPlotOutlinePaint()", "full_signature": "public Paint getPlotOutlinePaint()", "class_method_signature": "StandardChartTheme.getPlotOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setPlotOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setPlotOutlinePaint(Paint paint)", "full_signature": "public void setPlotOutlinePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setPlotOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkStyle", "parameters": "()", "modifiers": "public", "return": "PieLabelLinkStyle", "signature": "PieLabelLinkStyle getLabelLinkStyle()", "full_signature": "public PieLabelLinkStyle getLabelLinkStyle()", "class_method_signature": "StandardChartTheme.getLabelLinkStyle()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinkStyle", "parameters": "(PieLabelLinkStyle style)", "modifiers": "public", "return": "void", "signature": "void setLabelLinkStyle(PieLabelLinkStyle style)", "full_signature": "public void setLabelLinkStyle(PieLabelLinkStyle style)", "class_method_signature": "StandardChartTheme.setLabelLinkStyle(PieLabelLinkStyle style)", "testcase": false, "constructor": false}, {"identifier": "getLabelLinkPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelLinkPaint()", "full_signature": "public Paint getLabelLinkPaint()", "class_method_signature": "StandardChartTheme.getLabelLinkPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelLinkPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelLinkPaint(Paint paint)", "full_signature": "public void setLabelLinkPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setLabelLinkPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getDomainGridlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getDomainGridlinePaint()", "full_signature": "public Paint getDomainGridlinePaint()", "class_method_signature": "StandardChartTheme.getDomainGridlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setDomainGridlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setDomainGridlinePaint(Paint paint)", "full_signature": "public void setDomainGridlinePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setDomainGridlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getRangeGridlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getRangeGridlinePaint()", "full_signature": "public Paint getRangeGridlinePaint()", "class_method_signature": "StandardChartTheme.getRangeGridlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setRangeGridlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setRangeGridlinePaint(Paint paint)", "full_signature": "public void setRangeGridlinePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setRangeGridlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getBaselinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getBaselinePaint()", "full_signature": "public Paint getBaselinePaint()", "class_method_signature": "StandardChartTheme.getBaselinePaint()", "testcase": false, "constructor": false}, {"identifier": "setBaselinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setBaselinePaint(Paint paint)", "full_signature": "public void setBaselinePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setBaselinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getCrosshairPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getCrosshairPaint()", "full_signature": "public Paint getCrosshairPaint()", "class_method_signature": "StandardChartTheme.getCrosshairPaint()", "testcase": false, "constructor": false}, {"identifier": "setCrosshairPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setCrosshairPaint(Paint paint)", "full_signature": "public void setCrosshairPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setCrosshairPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getAxisOffset", "parameters": "()", "modifiers": "public", "return": "RectangleInsets", "signature": "RectangleInsets getAxisOffset()", "full_signature": "public RectangleInsets getAxisOffset()", "class_method_signature": "StandardChartTheme.getAxisOffset()", "testcase": false, "constructor": false}, {"identifier": "setAxisOffset", "parameters": "(RectangleInsets offset)", "modifiers": "public", "return": "void", "signature": "void setAxisOffset(RectangleInsets offset)", "full_signature": "public void setAxisOffset(RectangleInsets offset)", "class_method_signature": "StandardChartTheme.setAxisOffset(RectangleInsets offset)", "testcase": false, "constructor": false}, {"identifier": "getAxisLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getAxisLabelPaint()", "full_signature": "public Paint getAxisLabelPaint()", "class_method_signature": "StandardChartTheme.getAxisLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setAxisLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setAxisLabelPaint(Paint paint)", "full_signature": "public void setAxisLabelPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setAxisLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getTickLabelPaint()", "full_signature": "public Paint getTickLabelPaint()", "class_method_signature": "StandardChartTheme.getTickLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setTickLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setTickLabelPaint(Paint paint)", "full_signature": "public void setTickLabelPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setTickLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getItemLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getItemLabelPaint()", "full_signature": "public Paint getItemLabelPaint()", "class_method_signature": "StandardChartTheme.getItemLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setItemLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setItemLabelPaint(Paint paint)", "full_signature": "public void setItemLabelPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setItemLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "isShadowVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShadowVisible()", "full_signature": "public boolean isShadowVisible()", "class_method_signature": "StandardChartTheme.isShadowVisible()", "testcase": false, "constructor": false}, {"identifier": "setShadowVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setShadowVisible(boolean visible)", "full_signature": "public void setShadowVisible(boolean visible)", "class_method_signature": "StandardChartTheme.setShadowVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getShadowPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getShadowPaint()", "full_signature": "public Paint getShadowPaint()", "class_method_signature": "StandardChartTheme.getShadowPaint()", "testcase": false, "constructor": false}, {"identifier": "setShadowPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setShadowPaint(Paint paint)", "full_signature": "public void setShadowPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setShadowPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getBarPainter", "parameters": "()", "modifiers": "public", "return": "BarPainter", "signature": "BarPainter getBarPainter()", "full_signature": "public BarPainter getBarPainter()", "class_method_signature": "StandardChartTheme.getBarPainter()", "testcase": false, "constructor": false}, {"identifier": "setBarPainter", "parameters": "(BarPainter painter)", "modifiers": "public", "return": "void", "signature": "void setBarPainter(BarPainter painter)", "full_signature": "public void setBarPainter(BarPainter painter)", "class_method_signature": "StandardChartTheme.setBarPainter(BarPainter painter)", "testcase": false, "constructor": false}, {"identifier": "getXYBarPainter", "parameters": "()", "modifiers": "public", "return": "XYBarPainter", "signature": "XYBarPainter getXYBarPainter()", "full_signature": "public XYBarPainter getXYBarPainter()", "class_method_signature": "StandardChartTheme.getXYBarPainter()", "testcase": false, "constructor": false}, {"identifier": "setXYBarPainter", "parameters": "(XYBarPainter painter)", "modifiers": "public", "return": "void", "signature": "void setXYBarPainter(XYBarPainter painter)", "full_signature": "public void setXYBarPainter(XYBarPainter painter)", "class_method_signature": "StandardChartTheme.setXYBarPainter(XYBarPainter painter)", "testcase": false, "constructor": false}, {"identifier": "getThermometerPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getThermometerPaint()", "full_signature": "public Paint getThermometerPaint()", "class_method_signature": "StandardChartTheme.getThermometerPaint()", "testcase": false, "constructor": false}, {"identifier": "setThermometerPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setThermometerPaint(Paint paint)", "full_signature": "public void setThermometerPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setThermometerPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getWallPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getWallPaint()", "full_signature": "public Paint getWallPaint()", "class_method_signature": "StandardChartTheme.getWallPaint()", "testcase": false, "constructor": false}, {"identifier": "setWallPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setWallPaint(Paint paint)", "full_signature": "public void setWallPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setWallPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getErrorIndicatorPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getErrorIndicatorPaint()", "full_signature": "public Paint getErrorIndicatorPaint()", "class_method_signature": "StandardChartTheme.getErrorIndicatorPaint()", "testcase": false, "constructor": false}, {"identifier": "setErrorIndicatorPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setErrorIndicatorPaint(Paint paint)", "full_signature": "public void setErrorIndicatorPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setErrorIndicatorPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getGridBandPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getGridBandPaint()", "full_signature": "public Paint getGridBandPaint()", "class_method_signature": "StandardChartTheme.getGridBandPaint()", "testcase": false, "constructor": false}, {"identifier": "setGridBandPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setGridBandPaint(Paint paint)", "full_signature": "public void setGridBandPaint(Paint paint)", "class_method_signature": "StandardChartTheme.setGridBandPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getGridBandAlternatePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getGridBandAlternatePaint()", "full_signature": "public Paint getGridBandAlternatePaint()", "class_method_signature": "StandardChartTheme.getGridBandAlternatePaint()", "testcase": false, "constructor": false}, {"identifier": "setGridBandAlternatePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setGridBandAlternatePaint(Paint paint)", "full_signature": "public void setGridBandAlternatePaint(Paint paint)", "class_method_signature": "StandardChartTheme.setGridBandAlternatePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "StandardChartTheme.getName()", "testcase": false, "constructor": false}, {"identifier": "getDrawingSupplier", "parameters": "()", "modifiers": "public", "return": "DrawingSupplier", "signature": "DrawingSupplier getDrawingSupplier()", "full_signature": "public DrawingSupplier getDrawingSupplier()", "class_method_signature": "StandardChartTheme.getDrawingSupplier()", "testcase": false, "constructor": false}, {"identifier": "setDrawingSupplier", "parameters": "(DrawingSupplier supplier)", "modifiers": "public", "return": "void", "signature": "void setDrawingSupplier(DrawingSupplier supplier)", "full_signature": "public void setDrawingSupplier(DrawingSupplier supplier)", "class_method_signature": "StandardChartTheme.setDrawingSupplier(DrawingSupplier supplier)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(JFreeChart chart)", "modifiers": "public", "return": "void", "signature": "void apply(JFreeChart chart)", "full_signature": "public void apply(JFreeChart chart)", "class_method_signature": "StandardChartTheme.apply(JFreeChart chart)", "testcase": false, "constructor": false}, {"identifier": "applyToTitle", "parameters": "(Title title)", "modifiers": "protected", "return": "void", "signature": "void applyToTitle(Title title)", "full_signature": "protected void applyToTitle(Title title)", "class_method_signature": "StandardChartTheme.applyToTitle(Title title)", "testcase": false, "constructor": false}, {"identifier": "applyToBlockContainer", "parameters": "(BlockContainer bc)", "modifiers": "protected", "return": "void", "signature": "void applyToBlockContainer(BlockContainer bc)", "full_signature": "protected void applyToBlockContainer(BlockContainer bc)", "class_method_signature": "StandardChartTheme.applyToBlockContainer(BlockContainer bc)", "testcase": false, "constructor": false}, {"identifier": "applyToBlock", "parameters": "(Block b)", "modifiers": "protected", "return": "void", "signature": "void applyToBlock(Block b)", "full_signature": "protected void applyToBlock(Block b)", "class_method_signature": "StandardChartTheme.applyToBlock(Block b)", "testcase": false, "constructor": false}, {"identifier": "applyToPlot", "parameters": "(Plot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToPlot(Plot plot)", "full_signature": "protected void applyToPlot(Plot plot)", "class_method_signature": "StandardChartTheme.applyToPlot(Plot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToPiePlot", "parameters": "(PiePlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToPiePlot(PiePlot plot)", "full_signature": "protected void applyToPiePlot(PiePlot plot)", "class_method_signature": "StandardChartTheme.applyToPiePlot(PiePlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToMultiplePiePlot", "parameters": "(MultiplePiePlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToMultiplePiePlot(MultiplePiePlot plot)", "full_signature": "protected void applyToMultiplePiePlot(MultiplePiePlot plot)", "class_method_signature": "StandardChartTheme.applyToMultiplePiePlot(MultiplePiePlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToCategoryPlot", "parameters": "(CategoryPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToCategoryPlot(CategoryPlot plot)", "full_signature": "protected void applyToCategoryPlot(CategoryPlot plot)", "class_method_signature": "StandardChartTheme.applyToCategoryPlot(CategoryPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToXYPlot", "parameters": "(XYPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToXYPlot(XYPlot plot)", "full_signature": "protected void applyToXYPlot(XYPlot plot)", "class_method_signature": "StandardChartTheme.applyToXYPlot(XYPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToFastScatterPlot", "parameters": "(FastScatterPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToFastScatterPlot(FastScatterPlot plot)", "full_signature": "protected void applyToFastScatterPlot(FastScatterPlot plot)", "class_method_signature": "StandardChartTheme.applyToFastScatterPlot(FastScatterPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToPolarPlot", "parameters": "(PolarPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToPolarPlot(PolarPlot plot)", "full_signature": "protected void applyToPolarPlot(PolarPlot plot)", "class_method_signature": "StandardChartTheme.applyToPolarPlot(PolarPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToSpiderWebPlot", "parameters": "(SpiderWebPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToSpiderWebPlot(SpiderWebPlot plot)", "full_signature": "protected void applyToSpiderWebPlot(SpiderWebPlot plot)", "class_method_signature": "StandardChartTheme.applyToSpiderWebPlot(SpiderWebPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToMeterPlot", "parameters": "(MeterPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToMeterPlot(MeterPlot plot)", "full_signature": "protected void applyToMeterPlot(MeterPlot plot)", "class_method_signature": "StandardChartTheme.applyToMeterPlot(MeterPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToThermometerPlot", "parameters": "(ThermometerPlot plot)", "modifiers": "protected", "return": "void", "signature": "void applyToThermometerPlot(ThermometerPlot plot)", "full_signature": "protected void applyToThermometerPlot(ThermometerPlot plot)", "class_method_signature": "StandardChartTheme.applyToThermometerPlot(ThermometerPlot plot)", "testcase": false, "constructor": false}, {"identifier": "applyToCategoryAxis", "parameters": "(CategoryAxis axis)", "modifiers": "protected", "return": "void", "signature": "void applyToCategoryAxis(CategoryAxis axis)", "full_signature": "protected void applyToCategoryAxis(CategoryAxis axis)", "class_method_signature": "StandardChartTheme.applyToCategoryAxis(CategoryAxis axis)", "testcase": false, "constructor": false}, {"identifier": "applyToValueAxis", "parameters": "(ValueAxis axis)", "modifiers": "protected", "return": "void", "signature": "void applyToValueAxis(ValueAxis axis)", "full_signature": "protected void applyToValueAxis(ValueAxis axis)", "class_method_signature": "StandardChartTheme.applyToValueAxis(ValueAxis axis)", "testcase": false, "constructor": false}, {"identifier": "applyToSymbolAxis", "parameters": "(SymbolAxis axis)", "modifiers": "protected", "return": "void", "signature": "void applyToSymbolAxis(SymbolAxis axis)", "full_signature": "protected void applyToSymbolAxis(SymbolAxis axis)", "class_method_signature": "StandardChartTheme.applyToSymbolAxis(SymbolAxis axis)", "testcase": false, "constructor": false}, {"identifier": "applyToPeriodAxis", "parameters": "(PeriodAxis axis)", "modifiers": "protected", "return": "void", "signature": "void applyToPeriodAxis(PeriodAxis axis)", "full_signature": "protected void applyToPeriodAxis(PeriodAxis axis)", "class_method_signature": "StandardChartTheme.applyToPeriodAxis(PeriodAxis axis)", "testcase": false, "constructor": false}, {"identifier": "applyToAbstractRenderer", "parameters": "(AbstractRenderer renderer)", "modifiers": "protected", "return": "void", "signature": "void applyToAbstractRenderer(AbstractRenderer renderer)", "full_signature": "protected void applyToAbstractRenderer(AbstractRenderer renderer)", "class_method_signature": "StandardChartTheme.applyToAbstractRenderer(AbstractRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "applyToCategoryItemRenderer", "parameters": "(CategoryItemRenderer renderer)", "modifiers": "protected", "return": "void", "signature": "void applyToCategoryItemRenderer(CategoryItemRenderer renderer)", "full_signature": "protected void applyToCategoryItemRenderer(CategoryItemRenderer renderer)", "class_method_signature": "StandardChartTheme.applyToCategoryItemRenderer(CategoryItemRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "applyToXYItemRenderer", "parameters": "(XYItemRenderer renderer)", "modifiers": "protected", "return": "void", "signature": "void applyToXYItemRenderer(XYItemRenderer renderer)", "full_signature": "protected void applyToXYItemRenderer(XYItemRenderer renderer)", "class_method_signature": "StandardChartTheme.applyToXYItemRenderer(XYItemRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "applyToXYAnnotation", "parameters": "(XYAnnotation annotation)", "modifiers": "protected", "return": "void", "signature": "void applyToXYAnnotation(XYAnnotation annotation)", "full_signature": "protected void applyToXYAnnotation(XYAnnotation annotation)", "class_method_signature": "StandardChartTheme.applyToXYAnnotation(XYAnnotation annotation)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "StandardChartTheme.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "StandardChartTheme.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "StandardChartTheme.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "StandardChartTheme.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/StandardChartTheme.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof StandardChartTheme)) {\n            return false;\n        }\n        StandardChartTheme that = (StandardChartTheme) obj;\n        if (!this.name.equals(that.name)) {\n            return false;\n        }\n        if (!this.extraLargeFont.equals(that.extraLargeFont)) {\n            return false;\n        }\n        if (!this.largeFont.equals(that.largeFont)) {\n            return false;\n        }\n        if (!this.regularFont.equals(that.regularFont)) {\n            return false;\n        }\n        if (!this.smallFont.equals(that.smallFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.titlePaint, that.titlePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.subtitlePaint, that.subtitlePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.chartBackgroundPaint,\n                that.chartBackgroundPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.legendBackgroundPaint,\n                that.legendBackgroundPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.legendItemPaint, that.legendItemPaint)) {\n            return false;\n        }\n        if (!this.drawingSupplier.equals(that.drawingSupplier)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.plotBackgroundPaint,\n                that.plotBackgroundPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.plotOutlinePaint,\n                that.plotOutlinePaint)) {\n            return false;\n        }\n        if (!this.labelLinkStyle.equals(that.labelLinkStyle)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainGridlinePaint,\n                that.domainGridlinePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeGridlinePaint,\n                that.rangeGridlinePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.crosshairPaint, that.crosshairPaint)) {\n            return false;\n        }\n        if (!this.axisOffset.equals(that.axisOffset)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLabelPaint, that.axisLabelPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.itemLabelPaint, that.itemLabelPaint)) {\n            return false;\n        }\n        if (this.shadowVisible != that.shadowVisible) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!this.barPainter.equals(that.barPainter)) {\n            return false;\n        }\n        if (!this.xyBarPainter.equals(that.xyBarPainter)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.errorIndicatorPaint,\n                that.errorIndicatorPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.gridBandAlternatePaint,\n                that.gridBandAlternatePaint)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "StandardChartTheme.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals", "equal", "equal", "equal", "equal", "equal", "equals", "equal", "equal", "equals", "equal", "equal", "equal", "equal", "equals", "equal", "equal", "equal", "equal", "equals", "equals", "equal", "equal", "equal", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}