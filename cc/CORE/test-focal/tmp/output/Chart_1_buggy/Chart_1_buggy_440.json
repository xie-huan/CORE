{"test_class": {"identifier": "SymbolAxisTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/SymbolAxisTests.java"}, "test_case": {"identifier": "testCloning", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testCloning() {\n        SymbolAxis a1 = new SymbolAxis(\"Axis\", new String[] {\"A\", \"B\"});\n        SymbolAxis a2 = null;\n        try {\n            a2 = (SymbolAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }", "signature": "void testCloning()", "full_signature": "public void testCloning()", "class_method_signature": "SymbolAxisTests.testCloning()", "testcase": true, "constructor": false, "invocations": ["clone", "printStackTrace", "assertTrue", "assertTrue", "getClass", "getClass", "assertTrue", "equals"]}, "focal_class": {"identifier": "SymbolAxis", "superclass": "extends NumberAxis", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 7216330468770619716L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7216330468770619716L", "var_name": "serialVersionUID"}, {"original_string": "public static final Paint DEFAULT_GRID_BAND_PAINT\n            = new Color(232, 234, 232, 128);", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_GRID_BAND_PAINT\n            = new Color(232, 234, 232, 128)", "var_name": "DEFAULT_GRID_BAND_PAINT"}, {"original_string": "public static final Paint DEFAULT_GRID_BAND_ALTERNATE_PAINT\n            = new Color(0, 0, 0, 0);", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_GRID_BAND_ALTERNATE_PAINT\n            = new Color(0, 0, 0, 0)", "var_name": "DEFAULT_GRID_BAND_ALTERNATE_PAINT"}, {"original_string": "private List symbols;", "modifier": "private", "type": "List", "declarator": "symbols", "var_name": "symbols"}, {"original_string": "private boolean gridBandsVisible;", "modifier": "private", "type": "boolean", "declarator": "gridBandsVisible", "var_name": "gridBandsVisible"}, {"original_string": "private transient Paint gridBandPaint;", "modifier": "private transient", "type": "Paint", "declarator": "gridBandPaint", "var_name": "gridBandPaint"}, {"original_string": "private transient Paint gridBandAlternatePaint;", "modifier": "private transient", "type": "Paint", "declarator": "gridBandAlternatePaint", "var_name": "gridBandAlternatePaint"}], "methods": [{"identifier": "SymbolAxis", "parameters": "(String label, String[] sv)", "modifiers": "public", "return": "", "signature": " SymbolAxis(String label, String[] sv)", "full_signature": "public  SymbolAxis(String label, String[] sv)", "class_method_signature": "SymbolAxis.SymbolAxis(String label, String[] sv)", "testcase": false, "constructor": true}, {"identifier": "getSymbols", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getSymbols()", "full_signature": "public String[] getSymbols()", "class_method_signature": "SymbolAxis.getSymbols()", "testcase": false, "constructor": false}, {"identifier": "isGridBandsVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGridBandsVisible()", "full_signature": "public boolean isGridBandsVisible()", "class_method_signature": "SymbolAxis.isGridBandsVisible()", "testcase": false, "constructor": false}, {"identifier": "setGridBandsVisible", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setGridBandsVisible(boolean flag)", "full_signature": "public void setGridBandsVisible(boolean flag)", "class_method_signature": "SymbolAxis.setGridBandsVisible(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getGridBandPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getGridBandPaint()", "full_signature": "public Paint getGridBandPaint()", "class_method_signature": "SymbolAxis.getGridBandPaint()", "testcase": false, "constructor": false}, {"identifier": "setGridBandPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setGridBandPaint(Paint paint)", "full_signature": "public void setGridBandPaint(Paint paint)", "class_method_signature": "SymbolAxis.setGridBandPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getGridBandAlternatePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getGridBandAlternatePaint()", "full_signature": "public Paint getGridBandAlternatePaint()", "class_method_signature": "SymbolAxis.getGridBandAlternatePaint()", "testcase": false, "constructor": false}, {"identifier": "setGridBandAlternatePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setGridBandAlternatePaint(Paint paint)", "full_signature": "public void setGridBandAlternatePaint(Paint paint)", "class_method_signature": "SymbolAxis.setGridBandAlternatePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "selectAutoTickUnit", "parameters": "(Graphics2D g2, Rectangle2D dataArea,\n                                      RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,\n                                      RectangleEdge edge)", "full_signature": "protected void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,\n                                      RectangleEdge edge)", "class_method_signature": "SymbolAxis.selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,\n                                      RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "modifiers": "public", "return": "AxisState", "signature": "AxisState draw(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "full_signature": "public AxisState draw(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "class_method_signature": "SymbolAxis.draw(Graphics2D g2,\n                          double cursor,\n                          Rectangle2D plotArea,\n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "drawGridBands", "parameters": "(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Rectangle2D dataArea,\n                                 RectangleEdge edge,\n                                 List ticks)", "modifiers": "protected", "return": "void", "signature": "void drawGridBands(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Rectangle2D dataArea,\n                                 RectangleEdge edge,\n                                 List ticks)", "full_signature": "protected void drawGridBands(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Rectangle2D dataArea,\n                                 RectangleEdge edge,\n                                 List ticks)", "class_method_signature": "SymbolAxis.drawGridBands(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Rectangle2D dataArea,\n                                 RectangleEdge edge,\n                                 List ticks)", "testcase": false, "constructor": false}, {"identifier": "drawGridBandsHorizontal", "parameters": "(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           boolean firstGridBandIsDark,\n                                           List ticks)", "modifiers": "protected", "return": "void", "signature": "void drawGridBandsHorizontal(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           boolean firstGridBandIsDark,\n                                           List ticks)", "full_signature": "protected void drawGridBandsHorizontal(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           boolean firstGridBandIsDark,\n                                           List ticks)", "class_method_signature": "SymbolAxis.drawGridBandsHorizontal(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           boolean firstGridBandIsDark,\n                                           List ticks)", "testcase": false, "constructor": false}, {"identifier": "drawGridBandsVertical", "parameters": "(Graphics2D g2,\n                                         Rectangle2D drawArea,\n                                         Rectangle2D plotArea,\n                                         boolean firstGridBandIsDark,\n                                         List ticks)", "modifiers": "protected", "return": "void", "signature": "void drawGridBandsVertical(Graphics2D g2,\n                                         Rectangle2D drawArea,\n                                         Rectangle2D plotArea,\n                                         boolean firstGridBandIsDark,\n                                         List ticks)", "full_signature": "protected void drawGridBandsVertical(Graphics2D g2,\n                                         Rectangle2D drawArea,\n                                         Rectangle2D plotArea,\n                                         boolean firstGridBandIsDark,\n                                         List ticks)", "class_method_signature": "SymbolAxis.drawGridBandsVertical(Graphics2D g2,\n                                         Rectangle2D drawArea,\n                                         Rectangle2D plotArea,\n                                         boolean firstGridBandIsDark,\n                                         List ticks)", "testcase": false, "constructor": false}, {"identifier": "autoAdjustRange", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void autoAdjustRange()", "full_signature": "protected void autoAdjustRange()", "class_method_signature": "SymbolAxis.autoAdjustRange()", "testcase": false, "constructor": false}, {"identifier": "refreshTicks", "parameters": "(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "modifiers": "public", "return": "List", "signature": "List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "full_signature": "public List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "class_method_signature": "SymbolAxis.refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksHorizontal", "parameters": "(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "full_signature": "protected List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "class_method_signature": "SymbolAxis.refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksVertical", "parameters": "(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksVertical(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "full_signature": "protected List refreshTicksVertical(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "class_method_signature": "SymbolAxis.refreshTicksVertical(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "valueToString", "parameters": "(double value)", "modifiers": "public", "return": "String", "signature": "String valueToString(double value)", "full_signature": "public String valueToString(double value)", "class_method_signature": "SymbolAxis.valueToString(double value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "SymbolAxis.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "SymbolAxis.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "SymbolAxis.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/SymbolAxis.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof SymbolAxis)) {\n            return false;\n        }\n        SymbolAxis that = (SymbolAxis) obj;\n        if (!this.symbols.equals(that.symbols)) {\n            return false;\n        }\n        if (this.gridBandsVisible != that.gridBandsVisible) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.gridBandAlternatePaint,\n                that.gridBandAlternatePaint)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "SymbolAxis.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}