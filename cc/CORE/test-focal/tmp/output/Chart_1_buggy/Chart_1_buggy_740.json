{"test_class": {"identifier": "DefaultIntervalXYDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.0000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/xy/junit/DefaultIntervalXYDatasetTests.java"}, "test_case": {"identifier": "testAddSeries", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testAddSeries() {\n        DefaultIntervalXYDataset d = new DefaultIntervalXYDataset();\n        d.addSeries(\"S1\", new double[][] {{1.0}, {0.5}, {1.5}, {2.0}, {2.5},\n                {1.5}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(\"S1\", d.getSeriesKey(0));\n\n        // check that adding a series will overwrite the old series\n        d.addSeries(\"S1\", new double[][] {{1.1}, {0.6}, {1.6}, {2.1}, {2.6},\n                {1.6}});\n        assertEquals(1, d.getSeriesCount());\n        assertEquals(2.1, d.getYValue(0, 0), EPSILON);\n\n        // check null key\n        boolean pass = false;\n        try\n        {\n          d.addSeries(null, new double[][] {{1.1}, {0.6}, {1.6}, {2.1}, {2.6},\n                  {1.6}});\n        }\n        catch (IllegalArgumentException e)\n        {\n          pass = true;\n        }\n        assertTrue(pass);\n    }", "signature": "void testAddSeries()", "full_signature": "public void testAddSeries()", "class_method_signature": "DefaultIntervalXYDatasetTests.testAddSeries()", "testcase": true, "constructor": false, "invocations": ["addSeries", "assertEquals", "getSeriesCount", "assertEquals", "getSeriesKey", "addSeries", "assertEquals", "getSeriesCount", "assertEquals", "getYValue", "addSeries", "assertTrue"]}, "focal_class": {"identifier": "DefaultIntervalXYDataset", "superclass": "extends AbstractIntervalXYDataset", "interfaces": "implements PublicCloneable", "fields": [{"original_string": "private List seriesKeys;", "modifier": "private", "type": "List", "declarator": "seriesKeys", "var_name": "seriesKeys"}, {"original_string": "private List seriesList;", "modifier": "private", "type": "List", "declarator": "seriesList", "var_name": "seriesList"}], "methods": [{"identifier": "DefaultIntervalXYDataset", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultIntervalXYDataset()", "full_signature": "public  DefaultIntervalXYDataset()", "class_method_signature": "DefaultIntervalXYDataset.DefaultIntervalXYDataset()", "testcase": false, "constructor": true}, {"identifier": "getSeriesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSeriesCount()", "full_signature": "public int getSeriesCount()", "class_method_signature": "DefaultIntervalXYDataset.getSeriesCount()", "testcase": false, "constructor": false}, {"identifier": "getSeriesKey", "parameters": "(int series)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getSeriesKey(int series)", "full_signature": "public Comparable getSeriesKey(int series)", "class_method_signature": "DefaultIntervalXYDataset.getSeriesKey(int series)", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "(int series)", "modifiers": "public", "return": "int", "signature": "int getItemCount(int series)", "full_signature": "public int getItemCount(int series)", "class_method_signature": "DefaultIntervalXYDataset.getItemCount(int series)", "testcase": false, "constructor": false}, {"identifier": "getXValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getXValue(int series, int item)", "full_signature": "public double getXValue(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getXValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getYValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getYValue(int series, int item)", "full_signature": "public double getYValue(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getYValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getStartXValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getStartXValue(int series, int item)", "full_signature": "public double getStartXValue(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getStartXValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getEndXValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getEndXValue(int series, int item)", "full_signature": "public double getEndXValue(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getEndXValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getStartYValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getStartYValue(int series, int item)", "full_signature": "public double getStartYValue(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getStartYValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getEndYValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getEndYValue(int series, int item)", "full_signature": "public double getEndYValue(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getEndYValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getEndX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getEndX(int series, int item)", "full_signature": "public Number getEndX(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getEndX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getEndY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getEndY(int series, int item)", "full_signature": "public Number getEndY(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getEndY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getStartX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getStartX(int series, int item)", "full_signature": "public Number getStartX(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getStartX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getStartY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getStartY(int series, int item)", "full_signature": "public Number getStartY(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getStartY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getX(int series, int item)", "full_signature": "public Number getX(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getY(int series, int item)", "full_signature": "public Number getY(int series, int item)", "class_method_signature": "DefaultIntervalXYDataset.getY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "addSeries", "parameters": "(Comparable seriesKey, double[][] data)", "modifiers": "public", "return": "void", "signature": "void addSeries(Comparable seriesKey, double[][] data)", "full_signature": "public void addSeries(Comparable seriesKey, double[][] data)", "class_method_signature": "DefaultIntervalXYDataset.addSeries(Comparable seriesKey, double[][] data)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DefaultIntervalXYDataset.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "DefaultIntervalXYDataset.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "DefaultIntervalXYDataset.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/xy/DefaultIntervalXYDataset.java"}, "focal_method": {"identifier": "addSeries", "parameters": "(Comparable seriesKey, double[][] data)", "modifiers": "public", "return": "void", "body": "public void addSeries(Comparable seriesKey, double[][] data) {\n        if (seriesKey == null) {\n            throw new IllegalArgumentException(\n                    \"The 'seriesKey' cannot be null.\");\n        }\n        if (data == null) {\n            throw new IllegalArgumentException(\"The 'data' is null.\");\n        }\n        if (data.length != 6) {\n            throw new IllegalArgumentException(\n                    \"The 'data' array must have length == 6.\");\n        }\n        int length = data[0].length;\n        if (length != data[1].length || length != data[2].length\n                || length != data[3].length || length != data[4].length\n                || length != data[5].length) {\n            throw new IllegalArgumentException(\n                \"The 'data' array must contain six arrays with equal length.\");\n        }\n        int seriesIndex = indexOf(seriesKey);\n        if (seriesIndex == -1) {  // add a new series\n            this.seriesKeys.add(seriesKey);\n            this.seriesList.add(data);\n        }\n        else {  // replace an existing series\n            this.seriesList.remove(seriesIndex);\n            this.seriesList.add(seriesIndex, data);\n        }\n        fireDatasetChanged(new DatasetChangeInfo());\n        //TODO: fill in real change info\n    }", "signature": "void addSeries(Comparable seriesKey, double[][] data)", "full_signature": "public void addSeries(Comparable seriesKey, double[][] data)", "class_method_signature": "DefaultIntervalXYDataset.addSeries(Comparable seriesKey, double[][] data)", "testcase": false, "constructor": false, "invocations": ["indexOf", "add", "add", "remove", "add", "fireDatasetChanged"]}, "repository": {"repo_id": "Chart_1_buggy"}}