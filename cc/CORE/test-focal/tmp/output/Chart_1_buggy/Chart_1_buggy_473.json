{"test_class": {"identifier": "BlockContainerTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/block/junit/BlockContainerTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        BlockContainer c1 = new BlockContainer(new FlowArrangement());\n        BlockContainer c2 = new BlockContainer(new FlowArrangement());\n        assertTrue(c1.equals(c2));\n        assertTrue(c2.equals(c2));\n\n        c1.setArrangement(new ColumnArrangement());\n        assertFalse(c1.equals(c2));\n        c2.setArrangement(new ColumnArrangement());\n        assertTrue(c1.equals(c2));\n\n        c1.add(new EmptyBlock(1.2, 3.4));\n        assertFalse(c1.equals(c2));\n        c2.add(new EmptyBlock(1.2, 3.4));\n        assertTrue(c1.equals(c2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "BlockContainerTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "setArrangement", "assertFalse", "equals", "setArrangement", "assertTrue", "equals", "add", "assertFalse", "equals", "add", "assertTrue", "equals"]}, "focal_class": {"identifier": "BlockContainer", "superclass": "extends AbstractBlock", "interfaces": "implements Block, Cloneable, PublicCloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 8199508075695195293L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8199508075695195293L", "var_name": "serialVersionUID"}, {"original_string": "private List blocks;", "modifier": "private", "type": "List", "declarator": "blocks", "var_name": "blocks"}, {"original_string": "private Arrangement arrangement;", "modifier": "private", "type": "Arrangement", "declarator": "arrangement", "var_name": "arrangement"}], "methods": [{"identifier": "BlockContainer", "parameters": "()", "modifiers": "public", "return": "", "signature": " BlockContainer()", "full_signature": "public  BlockContainer()", "class_method_signature": "BlockContainer.BlockContainer()", "testcase": false, "constructor": true}, {"identifier": "BlockContainer", "parameters": "(Arrangement arrangement)", "modifiers": "public", "return": "", "signature": " BlockContainer(Arrangement arrangement)", "full_signature": "public  BlockContainer(Arrangement arrangement)", "class_method_signature": "BlockContainer.BlockContainer(Arrangement arrangement)", "testcase": false, "constructor": true}, {"identifier": "getArrangement", "parameters": "()", "modifiers": "public", "return": "Arrangement", "signature": "Arrangement getArrangement()", "full_signature": "public Arrangement getArrangement()", "class_method_signature": "BlockContainer.getArrangement()", "testcase": false, "constructor": false}, {"identifier": "setArrangement", "parameters": "(Arrangement arrangement)", "modifiers": "public", "return": "void", "signature": "void setArrangement(Arrangement arrangement)", "full_signature": "public void setArrangement(Arrangement arrangement)", "class_method_signature": "BlockContainer.setArrangement(Arrangement arrangement)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "BlockContainer.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getBlocks", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getBlocks()", "full_signature": "public List getBlocks()", "class_method_signature": "BlockContainer.getBlocks()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Block block)", "modifiers": "public", "return": "void", "signature": "void add(Block block)", "full_signature": "public void add(Block block)", "class_method_signature": "BlockContainer.add(Block block)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Block block, Object key)", "modifiers": "public", "return": "void", "signature": "void add(Block block, Object key)", "full_signature": "public void add(Block block, Object key)", "class_method_signature": "BlockContainer.add(Block block, Object key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "BlockContainer.clear()", "testcase": false, "constructor": false}, {"identifier": "arrange", "parameters": "(Graphics2D g2, RectangleConstraint constraint)", "modifiers": "public", "return": "Size2D", "signature": "Size2D arrange(Graphics2D g2, RectangleConstraint constraint)", "full_signature": "public Size2D arrange(Graphics2D g2, RectangleConstraint constraint)", "class_method_signature": "BlockContainer.arrange(Graphics2D g2, RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area)", "class_method_signature": "BlockContainer.draw(Graphics2D g2, Rectangle2D area)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area, Object params)", "modifiers": "public", "return": "Object", "signature": "Object draw(Graphics2D g2, Rectangle2D area, Object params)", "full_signature": "public Object draw(Graphics2D g2, Rectangle2D area, Object params)", "class_method_signature": "BlockContainer.draw(Graphics2D g2, Rectangle2D area, Object params)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "BlockContainer.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "BlockContainer.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/block/BlockContainer.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof BlockContainer)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        BlockContainer that = (BlockContainer) obj;\n        if (!this.arrangement.equals(that.arrangement)) {\n            return false;\n        }\n        if (!this.blocks.equals(that.blocks)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "BlockContainer.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}