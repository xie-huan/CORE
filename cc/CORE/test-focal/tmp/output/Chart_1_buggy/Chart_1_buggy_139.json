{"test_class": {"identifier": "LegendGraphicTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/title/junit/LegendGraphicTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0,\n                3.0, 4.0), Color.black);\n        LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0,\n                3.0, 4.0), Color.black);\n        assertEquals(g1, g2);\n        assertEquals(g2, g1);\n\n        // shapeVisible\n        g1.setShapeVisible(!g1.isShapeVisible());\n        assertFalse(g1.equals(g2));\n        g2.setShapeVisible(!g2.isShapeVisible());\n        assertTrue(g1.equals(g2));\n\n        // shape\n        g1.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertFalse(g1.equals(g2));\n        g2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(g1.equals(g2));\n\n        // shapeFilled\n        g1.setShapeFilled(!g1.isShapeFilled());\n        assertFalse(g1.equals(g2));\n        g2.setShapeFilled(!g2.isShapeFilled());\n        assertTrue(g1.equals(g2));\n\n        // fillPaint\n        g1.setFillPaint(Color.green);\n        assertFalse(g1.equals(g2));\n        g2.setFillPaint(Color.green);\n        assertTrue(g1.equals(g2));\n\n        // shapeOutlineVisible\n        g1.setShapeOutlineVisible(!g1.isShapeOutlineVisible());\n        assertFalse(g1.equals(g2));\n        g2.setShapeOutlineVisible(!g2.isShapeOutlineVisible());\n        assertTrue(g1.equals(g2));\n\n        // outlinePaint\n        g1.setOutlinePaint(Color.green);\n        assertFalse(g1.equals(g2));\n        g2.setOutlinePaint(Color.green);\n        assertTrue(g1.equals(g2));\n\n        // outlineStroke\n        g1.setOutlineStroke(new BasicStroke(1.23f));\n        assertFalse(g1.equals(g2));\n        g2.setOutlineStroke(new BasicStroke(1.23f));\n        assertTrue(g1.equals(g2));\n\n        // shapeAnchor\n        g1.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT);\n        assertFalse(g1.equals(g2));\n        g2.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT);\n        assertTrue(g1.equals(g2));\n\n        // shapeLocation\n        g1.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT);\n        assertFalse(g1.equals(g2));\n        g2.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT);\n        assertTrue(g1.equals(g2));\n\n        // lineVisible\n        g1.setLineVisible(!g1.isLineVisible());\n        assertFalse(g1.equals(g2));\n        g2.setLineVisible(!g2.isLineVisible());\n        assertTrue(g1.equals(g2));\n\n        // line\n        g1.setLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(g1.equals(g2));\n        g2.setLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(g1.equals(g2));\n\n        // linePaint\n        g1.setLinePaint(Color.green);\n        assertFalse(g1.equals(g2));\n        g2.setLinePaint(Color.green);\n        assertTrue(g1.equals(g2));\n\n        // lineStroke\n        g1.setLineStroke(new BasicStroke(1.23f));\n        assertFalse(g1.equals(g2));\n        g2.setLineStroke(new BasicStroke(1.23f));\n        assertTrue(g1.equals(g2));\n\n        // fillPaintTransformer\n        g1.setFillPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_HORIZONTAL));\n        assertFalse(g1.equals(g2));\n        g2.setFillPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_HORIZONTAL));\n        assertTrue(g1.equals(g2));\n\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "LegendGraphicTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "setShapeVisible", "isShapeVisible", "assertFalse", "equals", "setShapeVisible", "isShapeVisible", "assertTrue", "equals", "setShape", "assertFalse", "equals", "setShape", "assertTrue", "equals", "setShapeFilled", "isShapeFilled", "assertFalse", "equals", "setShapeFilled", "isShapeFilled", "assertTrue", "equals", "setFillPaint", "assertFalse", "equals", "setFillPaint", "assertTrue", "equals", "setShapeOutlineVisible", "isShapeOutlineVisible", "assertFalse", "equals", "setShapeOutlineVisible", "isShapeOutlineVisible", "assertTrue", "equals", "setOutlinePaint", "assertFalse", "equals", "setOutlinePaint", "assertTrue", "equals", "setOutlineStroke", "assertFalse", "equals", "setOutlineStroke", "assertTrue", "equals", "setShapeAnchor", "assertFalse", "equals", "setShapeAnchor", "assertTrue", "equals", "setShapeLocation", "assertFalse", "equals", "setShapeLocation", "assertTrue", "equals", "setLineVisible", "isLineVisible", "assertFalse", "equals", "setLineVisible", "isLineVisible", "assertTrue", "equals", "setLine", "assertFalse", "equals", "setLine", "assertTrue", "equals", "setLinePaint", "assertFalse", "equals", "setLinePaint", "assertTrue", "equals", "setLineStroke", "assertFalse", "equals", "setLineStroke", "assertTrue", "equals", "setFillPaintTransformer", "assertFalse", "equals", "setFillPaintTransformer", "assertTrue", "equals"]}, "focal_class": {"identifier": "LegendGraphic", "superclass": "extends AbstractBlock", "interfaces": "implements Block, PublicCloneable", "fields": [{"original_string": "static final long serialVersionUID = -1338791523854985009L;", "modifier": "static final", "type": "long", "declarator": "serialVersionUID = -1338791523854985009L", "var_name": "serialVersionUID"}, {"original_string": "private boolean shapeVisible;", "modifier": "private", "type": "boolean", "declarator": "shapeVisible", "var_name": "shapeVisible"}, {"original_string": "private transient Shape shape;", "modifier": "private transient", "type": "Shape", "declarator": "shape", "var_name": "shape"}, {"original_string": "private RectangleAnchor shapeLocation;", "modifier": "private", "type": "RectangleAnchor", "declarator": "shapeLocation", "var_name": "shapeLocation"}, {"original_string": "private RectangleAnchor shapeAnchor;", "modifier": "private", "type": "RectangleAnchor", "declarator": "shapeAnchor", "var_name": "shapeAnchor"}, {"original_string": "private boolean shapeFilled;", "modifier": "private", "type": "boolean", "declarator": "shapeFilled", "var_name": "shapeFilled"}, {"original_string": "private transient Paint fillPaint;", "modifier": "private transient", "type": "Paint", "declarator": "fillPaint", "var_name": "fillPaint"}, {"original_string": "private GradientPaintTransformer fillPaintTransformer;", "modifier": "private", "type": "GradientPaintTransformer", "declarator": "fillPaintTransformer", "var_name": "fillPaintTransformer"}, {"original_string": "private boolean shapeOutlineVisible;", "modifier": "private", "type": "boolean", "declarator": "shapeOutlineVisible", "var_name": "shapeOutlineVisible"}, {"original_string": "private transient Paint outlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "outlinePaint", "var_name": "outlinePaint"}, {"original_string": "private transient Stroke outlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "outlineStroke", "var_name": "outlineStroke"}, {"original_string": "private boolean lineVisible;", "modifier": "private", "type": "boolean", "declarator": "lineVisible", "var_name": "lineVisible"}, {"original_string": "private transient Shape line;", "modifier": "private transient", "type": "Shape", "declarator": "line", "var_name": "line"}, {"original_string": "private transient Stroke lineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "lineStroke", "var_name": "lineStroke"}, {"original_string": "private transient Paint linePaint;", "modifier": "private transient", "type": "Paint", "declarator": "linePaint", "var_name": "linePaint"}], "methods": [{"identifier": "LegendGraphic", "parameters": "(Shape shape, Paint fillPaint)", "modifiers": "public", "return": "", "signature": " LegendGraphic(Shape shape, Paint fillPaint)", "full_signature": "public  LegendGraphic(Shape shape, Paint fillPaint)", "class_method_signature": "LegendGraphic.LegendGraphic(Shape shape, Paint fillPaint)", "testcase": false, "constructor": true}, {"identifier": "isShapeVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShapeVisible()", "full_signature": "public boolean isShapeVisible()", "class_method_signature": "LegendGraphic.isShapeVisible()", "testcase": false, "constructor": false}, {"identifier": "setShapeVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setShapeVisible(boolean visible)", "full_signature": "public void setShapeVisible(boolean visible)", "class_method_signature": "LegendGraphic.setShapeVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getShape", "parameters": "()", "modifiers": "public", "return": "Shape", "signature": "Shape getShape()", "full_signature": "public Shape getShape()", "class_method_signature": "LegendGraphic.getShape()", "testcase": false, "constructor": false}, {"identifier": "setShape", "parameters": "(Shape shape)", "modifiers": "public", "return": "void", "signature": "void setShape(Shape shape)", "full_signature": "public void setShape(Shape shape)", "class_method_signature": "LegendGraphic.setShape(Shape shape)", "testcase": false, "constructor": false}, {"identifier": "isShapeFilled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShapeFilled()", "full_signature": "public boolean isShapeFilled()", "class_method_signature": "LegendGraphic.isShapeFilled()", "testcase": false, "constructor": false}, {"identifier": "setShapeFilled", "parameters": "(boolean filled)", "modifiers": "public", "return": "void", "signature": "void setShapeFilled(boolean filled)", "full_signature": "public void setShapeFilled(boolean filled)", "class_method_signature": "LegendGraphic.setShapeFilled(boolean filled)", "testcase": false, "constructor": false}, {"identifier": "getFillPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getFillPaint()", "full_signature": "public Paint getFillPaint()", "class_method_signature": "LegendGraphic.getFillPaint()", "testcase": false, "constructor": false}, {"identifier": "setFillPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setFillPaint(Paint paint)", "full_signature": "public void setFillPaint(Paint paint)", "class_method_signature": "LegendGraphic.setFillPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getFillPaintTransformer", "parameters": "()", "modifiers": "public", "return": "GradientPaintTransformer", "signature": "GradientPaintTransformer getFillPaintTransformer()", "full_signature": "public GradientPaintTransformer getFillPaintTransformer()", "class_method_signature": "LegendGraphic.getFillPaintTransformer()", "testcase": false, "constructor": false}, {"identifier": "setFillPaintTransformer", "parameters": "(GradientPaintTransformer transformer)", "modifiers": "public", "return": "void", "signature": "void setFillPaintTransformer(GradientPaintTransformer transformer)", "full_signature": "public void setFillPaintTransformer(GradientPaintTransformer transformer)", "class_method_signature": "LegendGraphic.setFillPaintTransformer(GradientPaintTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "isShapeOutlineVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShapeOutlineVisible()", "full_signature": "public boolean isShapeOutlineVisible()", "class_method_signature": "LegendGraphic.isShapeOutlineVisible()", "testcase": false, "constructor": false}, {"identifier": "setShapeOutlineVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setShapeOutlineVisible(boolean visible)", "full_signature": "public void setShapeOutlineVisible(boolean visible)", "class_method_signature": "LegendGraphic.setShapeOutlineVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getOutlinePaint()", "full_signature": "public Paint getOutlinePaint()", "class_method_signature": "LegendGraphic.getOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setOutlinePaint(Paint paint)", "full_signature": "public void setOutlinePaint(Paint paint)", "class_method_signature": "LegendGraphic.setOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getOutlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getOutlineStroke()", "full_signature": "public Stroke getOutlineStroke()", "class_method_signature": "LegendGraphic.getOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setOutlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setOutlineStroke(Stroke stroke)", "full_signature": "public void setOutlineStroke(Stroke stroke)", "class_method_signature": "LegendGraphic.setOutlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getShapeAnchor", "parameters": "()", "modifiers": "public", "return": "RectangleAnchor", "signature": "RectangleAnchor getShapeAnchor()", "full_signature": "public RectangleAnchor getShapeAnchor()", "class_method_signature": "LegendGraphic.getShapeAnchor()", "testcase": false, "constructor": false}, {"identifier": "setShapeAnchor", "parameters": "(RectangleAnchor anchor)", "modifiers": "public", "return": "void", "signature": "void setShapeAnchor(RectangleAnchor anchor)", "full_signature": "public void setShapeAnchor(RectangleAnchor anchor)", "class_method_signature": "LegendGraphic.setShapeAnchor(RectangleAnchor anchor)", "testcase": false, "constructor": false}, {"identifier": "getShapeLocation", "parameters": "()", "modifiers": "public", "return": "RectangleAnchor", "signature": "RectangleAnchor getShapeLocation()", "full_signature": "public RectangleAnchor getShapeLocation()", "class_method_signature": "LegendGraphic.getShapeLocation()", "testcase": false, "constructor": false}, {"identifier": "setShapeLocation", "parameters": "(RectangleAnchor location)", "modifiers": "public", "return": "void", "signature": "void setShapeLocation(RectangleAnchor location)", "full_signature": "public void setShapeLocation(RectangleAnchor location)", "class_method_signature": "LegendGraphic.setShapeLocation(RectangleAnchor location)", "testcase": false, "constructor": false}, {"identifier": "isLineVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLineVisible()", "full_signature": "public boolean isLineVisible()", "class_method_signature": "LegendGraphic.isLineVisible()", "testcase": false, "constructor": false}, {"identifier": "setLineVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setLineVisible(boolean visible)", "full_signature": "public void setLineVisible(boolean visible)", "class_method_signature": "LegendGraphic.setLineVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getLine", "parameters": "()", "modifiers": "public", "return": "Shape", "signature": "Shape getLine()", "full_signature": "public Shape getLine()", "class_method_signature": "LegendGraphic.getLine()", "testcase": false, "constructor": false}, {"identifier": "setLine", "parameters": "(Shape line)", "modifiers": "public", "return": "void", "signature": "void setLine(Shape line)", "full_signature": "public void setLine(Shape line)", "class_method_signature": "LegendGraphic.setLine(Shape line)", "testcase": false, "constructor": false}, {"identifier": "getLinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLinePaint()", "full_signature": "public Paint getLinePaint()", "class_method_signature": "LegendGraphic.getLinePaint()", "testcase": false, "constructor": false}, {"identifier": "setLinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLinePaint(Paint paint)", "full_signature": "public void setLinePaint(Paint paint)", "class_method_signature": "LegendGraphic.setLinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getLineStroke()", "full_signature": "public Stroke getLineStroke()", "class_method_signature": "LegendGraphic.getLineStroke()", "testcase": false, "constructor": false}, {"identifier": "setLineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setLineStroke(Stroke stroke)", "full_signature": "public void setLineStroke(Stroke stroke)", "class_method_signature": "LegendGraphic.setLineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "arrange", "parameters": "(Graphics2D g2, RectangleConstraint constraint)", "modifiers": "public", "return": "Size2D", "signature": "Size2D arrange(Graphics2D g2, RectangleConstraint constraint)", "full_signature": "public Size2D arrange(Graphics2D g2, RectangleConstraint constraint)", "class_method_signature": "LegendGraphic.arrange(Graphics2D g2, RectangleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "arrangeNN", "parameters": "(Graphics2D g2)", "modifiers": "protected", "return": "Size2D", "signature": "Size2D arrangeNN(Graphics2D g2)", "full_signature": "protected Size2D arrangeNN(Graphics2D g2)", "class_method_signature": "LegendGraphic.arrangeNN(Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area)", "class_method_signature": "LegendGraphic.draw(Graphics2D g2, Rectangle2D area)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area, Object params)", "modifiers": "public", "return": "Object", "signature": "Object draw(Graphics2D g2, Rectangle2D area, Object params)", "full_signature": "public Object draw(Graphics2D g2, Rectangle2D area, Object params)", "class_method_signature": "LegendGraphic.draw(Graphics2D g2, Rectangle2D area, Object params)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LegendGraphic.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "LegendGraphic.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "LegendGraphic.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "LegendGraphic.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "LegendGraphic.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/title/LegendGraphic.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (!(obj instanceof LegendGraphic)) {\n            return false;\n        }\n        LegendGraphic that = (LegendGraphic) obj;\n        if (this.shapeVisible != that.shapeVisible) {\n            return false;\n        }\n        if (!ShapeUtilities.equal(this.shape, that.shape)) {\n            return false;\n        }\n        if (this.shapeFilled != that.shapeFilled) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.fillPaintTransformer,\n                that.fillPaintTransformer)) {\n            return false;\n        }\n        if (this.shapeOutlineVisible != that.shapeOutlineVisible) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (this.shapeAnchor != that.shapeAnchor) {\n            return false;\n        }\n        if (this.shapeLocation != that.shapeLocation) {\n            return false;\n        }\n        if (this.lineVisible != that.lineVisible) {\n            return false;\n        }\n        if (!ShapeUtilities.equal(this.line, that.line)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.linePaint, that.linePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.lineStroke, that.lineStroke)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LegendGraphic.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}