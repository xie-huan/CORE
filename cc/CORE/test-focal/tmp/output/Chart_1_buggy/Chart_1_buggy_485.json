{"test_class": {"identifier": "LineBorderTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/block/junit/LineBorderTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        LineBorder b1 = new LineBorder(Color.red, new BasicStroke(1.0f),\n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        LineBorder b2 = new LineBorder(Color.red, new BasicStroke(1.0f),\n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b2));\n\n        b1 = new LineBorder(Color.blue, new BasicStroke(1.0f),\n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertFalse(b1.equals(b2));\n        b2 = new LineBorder(Color.blue, new BasicStroke(1.0f),\n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertTrue(b1.equals(b2));\n\n        b1 = new LineBorder(Color.blue, new BasicStroke(1.1f),\n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertFalse(b1.equals(b2));\n        b2 = new LineBorder(Color.blue, new BasicStroke(1.1f),\n                new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n        assertTrue(b1.equals(b2));\n\n        b1 = new LineBorder(Color.blue, new BasicStroke(1.1f),\n                new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertFalse(b1.equals(b2));\n        b2 = new LineBorder(Color.blue, new BasicStroke(1.1f),\n                new RectangleInsets(1.0, 2.0, 3.0, 4.0));\n        assertTrue(b1.equals(b2));\n\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "LineBorderTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "LineBorder", "superclass": "", "interfaces": "implements BlockFrame, Serializable", "fields": [{"original_string": "static final long serialVersionUID = 4630356736707233924L;", "modifier": "static final", "type": "long", "declarator": "serialVersionUID = 4630356736707233924L", "var_name": "serialVersionUID"}, {"original_string": "private transient Paint paint;", "modifier": "private transient", "type": "Paint", "declarator": "paint", "var_name": "paint"}, {"original_string": "private transient Stroke stroke;", "modifier": "private transient", "type": "Stroke", "declarator": "stroke", "var_name": "stroke"}, {"original_string": "private RectangleInsets insets;", "modifier": "private", "type": "RectangleInsets", "declarator": "insets", "var_name": "insets"}], "methods": [{"identifier": "LineBorder", "parameters": "()", "modifiers": "public", "return": "", "signature": " LineBorder()", "full_signature": "public  LineBorder()", "class_method_signature": "LineBorder.LineBorder()", "testcase": false, "constructor": true}, {"identifier": "LineBorder", "parameters": "(Paint paint, Stroke stroke, RectangleInsets insets)", "modifiers": "public", "return": "", "signature": " LineBorder(Paint paint, Stroke stroke, RectangleInsets insets)", "full_signature": "public  LineBorder(Paint paint, Stroke stroke, RectangleInsets insets)", "class_method_signature": "LineBorder.LineBorder(Paint paint, Stroke stroke, RectangleInsets insets)", "testcase": false, "constructor": true}, {"identifier": "getPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getPaint()", "full_signature": "public Paint getPaint()", "class_method_signature": "LineBorder.getPaint()", "testcase": false, "constructor": false}, {"identifier": "getInsets", "parameters": "()", "modifiers": "public", "return": "RectangleInsets", "signature": "RectangleInsets getInsets()", "full_signature": "public RectangleInsets getInsets()", "class_method_signature": "LineBorder.getInsets()", "testcase": false, "constructor": false}, {"identifier": "getStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getStroke()", "full_signature": "public Stroke getStroke()", "class_method_signature": "LineBorder.getStroke()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area)", "class_method_signature": "LineBorder.draw(Graphics2D g2, Rectangle2D area)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LineBorder.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "LineBorder.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "LineBorder.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/block/LineBorder.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof LineBorder)) {\n            return false;\n        }\n        LineBorder that = (LineBorder) obj;\n        if (!PaintUtilities.equal(this.paint, that.paint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.stroke, that.stroke)) {\n            return false;\n        }\n        if (!this.insets.equals(that.insets)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LineBorder.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}