{"test_class": {"identifier": "StandardDialScaleTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        StandardDialScale s1 = new StandardDialScale();\n        StandardDialScale s2 = new StandardDialScale();\n        assertTrue(s1.equals(s2));\n\n        // lowerBound\n        s1 = new StandardDialScale(10.0, 100.0, 0.0, 270.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 100.0, 0.0, 270.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n\n        // upperBound\n        s1 = new StandardDialScale(10.0, 200.0, 0.0, 270.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 200.0, 0.0, 270.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n\n        // startAngle\n        s1 = new StandardDialScale(10.0, 200.0, 20.0, 270.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 200.0, 20.0, 270.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n\n        // extent\n        s1 = new StandardDialScale(10.0, 200.0, 20.0, 99.0, 10.0, 4);\n        assertFalse(s1.equals(s2));\n        s2 = new StandardDialScale(10.0, 200.0, 20.0, 99.0, 10.0, 4);\n        assertTrue(s1.equals(s2));\n\n        // tickRadius\n        s1.setTickRadius(0.99);\n        assertFalse(s1.equals(s2));\n        s2.setTickRadius(0.99);\n        assertTrue(s1.equals(s2));\n\n        // majorTickIncrement\n        s1.setMajorTickIncrement(11.1);\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickIncrement(11.1);\n        assertTrue(s1.equals(s2));\n\n        // majorTickLength\n        s1.setMajorTickLength(0.09);\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickLength(0.09);\n        assertTrue(s1.equals(s2));\n\n        // majorTickPaint\n        s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(s1.equals(s2));\n\n        // majorTickStroke\n        s1.setMajorTickStroke(new BasicStroke(1.1f));\n        assertFalse(s1.equals(s2));\n        s2.setMajorTickStroke(new BasicStroke(1.1f));\n        assertTrue(s1.equals(s2));\n\n        // minorTickCount\n        s1.setMinorTickCount(7);\n        assertFalse(s1.equals(s2));\n        s2.setMinorTickCount(7);\n        assertTrue(s1.equals(s2));\n\n        // minorTickLength\n        s1.setMinorTickLength(0.09);\n        assertFalse(s1.equals(s2));\n        s2.setMinorTickLength(0.09);\n        assertTrue(s1.equals(s2));\n\n        // tickLabelOffset\n        s1.setTickLabelOffset(0.11);\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelOffset(0.11);\n        assertTrue(s1.equals(s2));\n\n        // tickLabelFont\n        s1.setTickLabelFont(new Font(\"Dialog\", Font.PLAIN, 15));\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelFont(new Font(\"Dialog\", Font.PLAIN, 15));\n        assertTrue(s1.equals(s2));\n\n        // tickLabelPaint\n        s1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.green));\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.green));\n        assertTrue(s1.equals(s2));\n\n        s1.setTickLabelsVisible(false);\n        assertFalse(s1.equals(s2));\n        s2.setTickLabelsVisible(false);\n        assertTrue(s1.equals(s2));\n\n        // check an inherited attribute\n        s1.setVisible(false);\n        assertFalse(s1.equals(s2));\n        s2.setVisible(false);\n        assertTrue(s1.equals(s2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "StandardDialScaleTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "setTickRadius", "assertFalse", "equals", "setTickRadius", "assertTrue", "equals", "setMajorTickIncrement", "assertFalse", "equals", "setMajorTickIncrement", "assertTrue", "equals", "setMajorTickLength", "assertFalse", "equals", "setMajorTickLength", "assertTrue", "equals", "setMajorTickPaint", "assertFalse", "equals", "setMajorTickPaint", "assertTrue", "equals", "setMajorTickStroke", "assertFalse", "equals", "setMajorTickStroke", "assertTrue", "equals", "setMinorTickCount", "assertFalse", "equals", "setMinorTickCount", "assertTrue", "equals", "setMinorTickLength", "assertFalse", "equals", "setMinorTickLength", "assertTrue", "equals", "setTickLabelOffset", "assertFalse", "equals", "setTickLabelOffset", "assertTrue", "equals", "setTickLabelFont", "assertFalse", "equals", "setTickLabelFont", "assertTrue", "equals", "setTickLabelPaint", "assertFalse", "equals", "setTickLabelPaint", "assertTrue", "equals", "setTickLabelsVisible", "assertFalse", "equals", "setTickLabelsVisible", "assertTrue", "equals", "setVisible", "assertFalse", "equals", "setVisible", "assertTrue", "equals"]}, "focal_class": {"identifier": "StandardDialScale", "superclass": "extends AbstractDialLayer", "interfaces": "implements DialScale,\n        Cloneable, PublicCloneable, Serializable", "fields": [{"original_string": "static final long serialVersionUID = 3715644629665918516L;", "modifier": "static final", "type": "long", "declarator": "serialVersionUID = 3715644629665918516L", "var_name": "serialVersionUID"}, {"original_string": "private double lowerBound;", "modifier": "private", "type": "double", "declarator": "lowerBound", "var_name": "lowerBound"}, {"original_string": "private double upperBound;", "modifier": "private", "type": "double", "declarator": "upperBound", "var_name": "upperBound"}, {"original_string": "private double startAngle;", "modifier": "private", "type": "double", "declarator": "startAngle", "var_name": "startAngle"}, {"original_string": "private double extent;", "modifier": "private", "type": "double", "declarator": "extent", "var_name": "extent"}, {"original_string": "private double tickRadius;", "modifier": "private", "type": "double", "declarator": "tickRadius", "var_name": "tickRadius"}, {"original_string": "private double majorTickIncrement;", "modifier": "private", "type": "double", "declarator": "majorTickIncrement", "var_name": "majorTickIncrement"}, {"original_string": "private double majorTickLength;", "modifier": "private", "type": "double", "declarator": "majorTickLength", "var_name": "majorTickLength"}, {"original_string": "private transient Paint majorTickPaint;", "modifier": "private transient", "type": "Paint", "declarator": "majorTickPaint", "var_name": "majorTickPaint"}, {"original_string": "private transient Stroke majorTickStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "majorTickStroke", "var_name": "majorTickStroke"}, {"original_string": "private int minorTickCount;", "modifier": "private", "type": "int", "declarator": "minorTickCount", "var_name": "minorTickCount"}, {"original_string": "private double minorTickLength;", "modifier": "private", "type": "double", "declarator": "minorTickLength", "var_name": "minorTickLength"}, {"original_string": "private transient Paint minorTickPaint;", "modifier": "private transient", "type": "Paint", "declarator": "minorTickPaint", "var_name": "minorTickPaint"}, {"original_string": "private transient Stroke minorTickStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "minorTickStroke", "var_name": "minorTickStroke"}, {"original_string": "private double tickLabelOffset;", "modifier": "private", "type": "double", "declarator": "tickLabelOffset", "var_name": "tickLabelOffset"}, {"original_string": "private Font tickLabelFont;", "modifier": "private", "type": "Font", "declarator": "tickLabelFont", "var_name": "tickLabelFont"}, {"original_string": "private boolean tickLabelsVisible;", "modifier": "private", "type": "boolean", "declarator": "tickLabelsVisible", "var_name": "tickLabelsVisible"}, {"original_string": "private NumberFormat tickLabelFormatter;", "modifier": "private", "type": "NumberFormat", "declarator": "tickLabelFormatter", "var_name": "tickLabelFormatter"}, {"original_string": "private boolean firstTickLabelVisible;", "modifier": "private", "type": "boolean", "declarator": "firstTickLabelVisible", "var_name": "firstTickLabelVisible"}, {"original_string": "private transient Paint tickLabelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "tickLabelPaint", "var_name": "tickLabelPaint"}], "methods": [{"identifier": "StandardDialScale", "parameters": "()", "modifiers": "public", "return": "", "signature": " StandardDialScale()", "full_signature": "public  StandardDialScale()", "class_method_signature": "StandardDialScale.StandardDialScale()", "testcase": false, "constructor": true}, {"identifier": "StandardDialScale", "parameters": "(double lowerBound, double upperBound,\n            double startAngle, double extent, double majorTickIncrement,\n            int minorTickCount)", "modifiers": "public", "return": "", "signature": " StandardDialScale(double lowerBound, double upperBound,\n            double startAngle, double extent, double majorTickIncrement,\n            int minorTickCount)", "full_signature": "public  StandardDialScale(double lowerBound, double upperBound,\n            double startAngle, double extent, double majorTickIncrement,\n            int minorTickCount)", "class_method_signature": "StandardDialScale.StandardDialScale(double lowerBound, double upperBound,\n            double startAngle, double extent, double majorTickIncrement,\n            int minorTickCount)", "testcase": false, "constructor": true}, {"identifier": "getLowerBound", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLowerBound()", "full_signature": "public double getLowerBound()", "class_method_signature": "StandardDialScale.getLowerBound()", "testcase": false, "constructor": false}, {"identifier": "setLowerBound", "parameters": "(double lower)", "modifiers": "public", "return": "void", "signature": "void setLowerBound(double lower)", "full_signature": "public void setLowerBound(double lower)", "class_method_signature": "StandardDialScale.setLowerBound(double lower)", "testcase": false, "constructor": false}, {"identifier": "getUpperBound", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUpperBound()", "full_signature": "public double getUpperBound()", "class_method_signature": "StandardDialScale.getUpperBound()", "testcase": false, "constructor": false}, {"identifier": "setUpperBound", "parameters": "(double upper)", "modifiers": "public", "return": "void", "signature": "void setUpperBound(double upper)", "full_signature": "public void setUpperBound(double upper)", "class_method_signature": "StandardDialScale.setUpperBound(double upper)", "testcase": false, "constructor": false}, {"identifier": "getStartAngle", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStartAngle()", "full_signature": "public double getStartAngle()", "class_method_signature": "StandardDialScale.getStartAngle()", "testcase": false, "constructor": false}, {"identifier": "setStartAngle", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void setStartAngle(double angle)", "full_signature": "public void setStartAngle(double angle)", "class_method_signature": "StandardDialScale.setStartAngle(double angle)", "testcase": false, "constructor": false}, {"identifier": "getExtent", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getExtent()", "full_signature": "public double getExtent()", "class_method_signature": "StandardDialScale.getExtent()", "testcase": false, "constructor": false}, {"identifier": "setExtent", "parameters": "(double extent)", "modifiers": "public", "return": "void", "signature": "void setExtent(double extent)", "full_signature": "public void setExtent(double extent)", "class_method_signature": "StandardDialScale.setExtent(double extent)", "testcase": false, "constructor": false}, {"identifier": "getTickRadius", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTickRadius()", "full_signature": "public double getTickRadius()", "class_method_signature": "StandardDialScale.getTickRadius()", "testcase": false, "constructor": false}, {"identifier": "setTickRadius", "parameters": "(double radius)", "modifiers": "public", "return": "void", "signature": "void setTickRadius(double radius)", "full_signature": "public void setTickRadius(double radius)", "class_method_signature": "StandardDialScale.setTickRadius(double radius)", "testcase": false, "constructor": false}, {"identifier": "getMajorTickIncrement", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMajorTickIncrement()", "full_signature": "public double getMajorTickIncrement()", "class_method_signature": "StandardDialScale.getMajorTickIncrement()", "testcase": false, "constructor": false}, {"identifier": "setMajorTickIncrement", "parameters": "(double increment)", "modifiers": "public", "return": "void", "signature": "void setMajorTickIncrement(double increment)", "full_signature": "public void setMajorTickIncrement(double increment)", "class_method_signature": "StandardDialScale.setMajorTickIncrement(double increment)", "testcase": false, "constructor": false}, {"identifier": "getMajorTickLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMajorTickLength()", "full_signature": "public double getMajorTickLength()", "class_method_signature": "StandardDialScale.getMajorTickLength()", "testcase": false, "constructor": false}, {"identifier": "setMajorTickLength", "parameters": "(double length)", "modifiers": "public", "return": "void", "signature": "void setMajorTickLength(double length)", "full_signature": "public void setMajorTickLength(double length)", "class_method_signature": "StandardDialScale.setMajorTickLength(double length)", "testcase": false, "constructor": false}, {"identifier": "getMajorTickPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getMajorTickPaint()", "full_signature": "public Paint getMajorTickPaint()", "class_method_signature": "StandardDialScale.getMajorTickPaint()", "testcase": false, "constructor": false}, {"identifier": "setMajorTickPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setMajorTickPaint(Paint paint)", "full_signature": "public void setMajorTickPaint(Paint paint)", "class_method_signature": "StandardDialScale.setMajorTickPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getMajorTickStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getMajorTickStroke()", "full_signature": "public Stroke getMajorTickStroke()", "class_method_signature": "StandardDialScale.getMajorTickStroke()", "testcase": false, "constructor": false}, {"identifier": "setMajorTickStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setMajorTickStroke(Stroke stroke)", "full_signature": "public void setMajorTickStroke(Stroke stroke)", "class_method_signature": "StandardDialScale.setMajorTickStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getMinorTickCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinorTickCount()", "full_signature": "public int getMinorTickCount()", "class_method_signature": "StandardDialScale.getMinorTickCount()", "testcase": false, "constructor": false}, {"identifier": "setMinorTickCount", "parameters": "(int count)", "modifiers": "public", "return": "void", "signature": "void setMinorTickCount(int count)", "full_signature": "public void setMinorTickCount(int count)", "class_method_signature": "StandardDialScale.setMinorTickCount(int count)", "testcase": false, "constructor": false}, {"identifier": "getMinorTickLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinorTickLength()", "full_signature": "public double getMinorTickLength()", "class_method_signature": "StandardDialScale.getMinorTickLength()", "testcase": false, "constructor": false}, {"identifier": "setMinorTickLength", "parameters": "(double length)", "modifiers": "public", "return": "void", "signature": "void setMinorTickLength(double length)", "full_signature": "public void setMinorTickLength(double length)", "class_method_signature": "StandardDialScale.setMinorTickLength(double length)", "testcase": false, "constructor": false}, {"identifier": "getMinorTickPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getMinorTickPaint()", "full_signature": "public Paint getMinorTickPaint()", "class_method_signature": "StandardDialScale.getMinorTickPaint()", "testcase": false, "constructor": false}, {"identifier": "setMinorTickPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setMinorTickPaint(Paint paint)", "full_signature": "public void setMinorTickPaint(Paint paint)", "class_method_signature": "StandardDialScale.setMinorTickPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getMinorTickStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getMinorTickStroke()", "full_signature": "public Stroke getMinorTickStroke()", "class_method_signature": "StandardDialScale.getMinorTickStroke()", "testcase": false, "constructor": false}, {"identifier": "setMinorTickStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setMinorTickStroke(Stroke stroke)", "full_signature": "public void setMinorTickStroke(Stroke stroke)", "class_method_signature": "StandardDialScale.setMinorTickStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelOffset", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTickLabelOffset()", "full_signature": "public double getTickLabelOffset()", "class_method_signature": "StandardDialScale.getTickLabelOffset()", "testcase": false, "constructor": false}, {"identifier": "setTickLabelOffset", "parameters": "(double offset)", "modifiers": "public", "return": "void", "signature": "void setTickLabelOffset(double offset)", "full_signature": "public void setTickLabelOffset(double offset)", "class_method_signature": "StandardDialScale.setTickLabelOffset(double offset)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getTickLabelFont()", "full_signature": "public Font getTickLabelFont()", "class_method_signature": "StandardDialScale.getTickLabelFont()", "testcase": false, "constructor": false}, {"identifier": "setTickLabelFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setTickLabelFont(Font font)", "full_signature": "public void setTickLabelFont(Font font)", "class_method_signature": "StandardDialScale.setTickLabelFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getTickLabelPaint()", "full_signature": "public Paint getTickLabelPaint()", "class_method_signature": "StandardDialScale.getTickLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setTickLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setTickLabelPaint(Paint paint)", "full_signature": "public void setTickLabelPaint(Paint paint)", "class_method_signature": "StandardDialScale.setTickLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelsVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getTickLabelsVisible()", "full_signature": "public boolean getTickLabelsVisible()", "class_method_signature": "StandardDialScale.getTickLabelsVisible()", "testcase": false, "constructor": false}, {"identifier": "setTickLabelsVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setTickLabelsVisible(boolean visible)", "full_signature": "public void setTickLabelsVisible(boolean visible)", "class_method_signature": "StandardDialScale.setTickLabelsVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelFormatter", "parameters": "()", "modifiers": "public", "return": "NumberFormat", "signature": "NumberFormat getTickLabelFormatter()", "full_signature": "public NumberFormat getTickLabelFormatter()", "class_method_signature": "StandardDialScale.getTickLabelFormatter()", "testcase": false, "constructor": false}, {"identifier": "setTickLabelFormatter", "parameters": "(NumberFormat formatter)", "modifiers": "public", "return": "void", "signature": "void setTickLabelFormatter(NumberFormat formatter)", "full_signature": "public void setTickLabelFormatter(NumberFormat formatter)", "class_method_signature": "StandardDialScale.setTickLabelFormatter(NumberFormat formatter)", "testcase": false, "constructor": false}, {"identifier": "getFirstTickLabelVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getFirstTickLabelVisible()", "full_signature": "public boolean getFirstTickLabelVisible()", "class_method_signature": "StandardDialScale.getFirstTickLabelVisible()", "testcase": false, "constructor": false}, {"identifier": "setFirstTickLabelVisible", "parameters": "(boolean visible)", "modifiers": "public", "return": "void", "signature": "void setFirstTickLabelVisible(boolean visible)", "full_signature": "public void setFirstTickLabelVisible(boolean visible)", "class_method_signature": "StandardDialScale.setFirstTickLabelVisible(boolean visible)", "testcase": false, "constructor": false}, {"identifier": "isClippedToWindow", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClippedToWindow()", "full_signature": "public boolean isClippedToWindow()", "class_method_signature": "StandardDialScale.isClippedToWindow()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, DialPlot plot, Rectangle2D frame,\n            Rectangle2D view)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, DialPlot plot, Rectangle2D frame,\n            Rectangle2D view)", "full_signature": "public void draw(Graphics2D g2, DialPlot plot, Rectangle2D frame,\n            Rectangle2D view)", "class_method_signature": "StandardDialScale.draw(Graphics2D g2, DialPlot plot, Rectangle2D frame,\n            Rectangle2D view)", "testcase": false, "constructor": false}, {"identifier": "valueToAngle", "parameters": "(double value)", "modifiers": "public", "return": "double", "signature": "double valueToAngle(double value)", "full_signature": "public double valueToAngle(double value)", "class_method_signature": "StandardDialScale.valueToAngle(double value)", "testcase": false, "constructor": false}, {"identifier": "angleToValue", "parameters": "(double angle)", "modifiers": "public", "return": "double", "signature": "double angleToValue(double angle)", "full_signature": "public double angleToValue(double angle)", "class_method_signature": "StandardDialScale.angleToValue(double angle)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "StandardDialScale.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "StandardDialScale.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "StandardDialScale.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "StandardDialScale.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "StandardDialScale.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/dial/StandardDialScale.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof StandardDialScale)) {\n            return false;\n        }\n        StandardDialScale that = (StandardDialScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.extent != that.extent) {\n            return false;\n        }\n        if (this.tickRadius != that.tickRadius) {\n            return false;\n        }\n        if (this.majorTickIncrement != that.majorTickIncrement) {\n            return false;\n        }\n        if (this.majorTickLength != that.majorTickLength) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.majorTickPaint, that.majorTickPaint)) {\n            return false;\n        }\n        if (!this.majorTickStroke.equals(that.majorTickStroke)) {\n            return false;\n        }\n        if (this.minorTickCount != that.minorTickCount) {\n            return false;\n        }\n        if (this.minorTickLength != that.minorTickLength) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.minorTickPaint, that.minorTickPaint)) {\n            return false;\n        }\n        if (!this.minorTickStroke.equals(that.minorTickStroke)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (this.tickLabelOffset != that.tickLabelOffset) {\n            return false;\n        }\n        if (!this.tickLabelFont.equals(that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "StandardDialScale.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equal", "equals", "equal", "equals", "equals", "equal", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}