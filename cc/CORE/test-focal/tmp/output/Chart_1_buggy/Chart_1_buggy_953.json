{"test_class": {"identifier": "MovingAverageTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.0000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/time/junit/MovingAverageTests.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void test1() {\n        TimeSeries source = createDailyTimeSeries1();\n        TimeSeries maverage = MovingAverage.createMovingAverage(\n            source, \"Moving Average\", 3, 3\n        );\n\n        // the moving average series has 7 items, the first three\n        // days (11, 12, 13 August are skipped)\n        assertEquals(7, maverage.getItemCount());\n        double value = maverage.getValue(0).doubleValue();\n        assertEquals(14.1, value, EPSILON);\n        value = maverage.getValue(1).doubleValue();\n        assertEquals(13.4, value, EPSILON);\n        value = maverage.getValue(2).doubleValue();\n        assertEquals(14.433333333333, value, EPSILON);\n        value = maverage.getValue(3).doubleValue();\n        assertEquals(14.933333333333, value, EPSILON);\n        value = maverage.getValue(4).doubleValue();\n        assertEquals(19.8, value, EPSILON);\n        value = maverage.getValue(5).doubleValue();\n        assertEquals(15.25, value, EPSILON);\n        value = maverage.getValue(6).doubleValue();\n        assertEquals(12.5, value, EPSILON);\n    }", "signature": "void test1()", "full_signature": "public void test1()", "class_method_signature": "MovingAverageTests.test1()", "testcase": true, "constructor": false, "invocations": ["createDailyTimeSeries1", "createMovingAverage", "assertEquals", "getItemCount", "doubleValue", "getValue", "assertEquals", "doubleValue", "getValue", "assertEquals", "doubleValue", "getValue", "assertEquals", "doubleValue", "getValue", "assertEquals", "doubleValue", "getValue", "assertEquals", "doubleValue", "getValue", "assertEquals", "doubleValue", "getValue", "assertEquals"]}, "focal_class": {"identifier": "MovingAverage", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createMovingAverage", "parameters": "(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "modifiers": "public static", "return": "TimeSeriesCollection", "signature": "TimeSeriesCollection createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "full_signature": "public static TimeSeriesCollection createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "class_method_signature": "MovingAverage.createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "testcase": false, "constructor": false}, {"identifier": "createMovingAverage", "parameters": "(TimeSeries source,\n            String name, int periodCount, int skip)", "modifiers": "public static", "return": "TimeSeries", "signature": "TimeSeries createMovingAverage(TimeSeries source,\n            String name, int periodCount, int skip)", "full_signature": "public static TimeSeries createMovingAverage(TimeSeries source,\n            String name, int periodCount, int skip)", "class_method_signature": "MovingAverage.createMovingAverage(TimeSeries source,\n            String name, int periodCount, int skip)", "testcase": false, "constructor": false}, {"identifier": "createPointMovingAverage", "parameters": "(TimeSeries source,\n            String name, int pointCount)", "modifiers": "public static", "return": "TimeSeries", "signature": "TimeSeries createPointMovingAverage(TimeSeries source,\n            String name, int pointCount)", "full_signature": "public static TimeSeries createPointMovingAverage(TimeSeries source,\n            String name, int pointCount)", "class_method_signature": "MovingAverage.createPointMovingAverage(TimeSeries source,\n            String name, int pointCount)", "testcase": false, "constructor": false}, {"identifier": "createMovingAverage", "parameters": "(XYDataset source, String suffix,\n            long period, long skip)", "modifiers": "public static", "return": "XYDataset", "signature": "XYDataset createMovingAverage(XYDataset source, String suffix,\n            long period, long skip)", "full_signature": "public static XYDataset createMovingAverage(XYDataset source, String suffix,\n            long period, long skip)", "class_method_signature": "MovingAverage.createMovingAverage(XYDataset source, String suffix,\n            long period, long skip)", "testcase": false, "constructor": false}, {"identifier": "createMovingAverage", "parameters": "(XYDataset source,\n            String suffix, double period, double skip)", "modifiers": "public static", "return": "XYDataset", "signature": "XYDataset createMovingAverage(XYDataset source,\n            String suffix, double period, double skip)", "full_signature": "public static XYDataset createMovingAverage(XYDataset source,\n            String suffix, double period, double skip)", "class_method_signature": "MovingAverage.createMovingAverage(XYDataset source,\n            String suffix, double period, double skip)", "testcase": false, "constructor": false}, {"identifier": "createMovingAverage", "parameters": "(XYDataset source,\n            int series, String name, double period, double skip)", "modifiers": "public static", "return": "XYSeries", "signature": "XYSeries createMovingAverage(XYDataset source,\n            int series, String name, double period, double skip)", "full_signature": "public static XYSeries createMovingAverage(XYDataset source,\n            int series, String name, double period, double skip)", "class_method_signature": "MovingAverage.createMovingAverage(XYDataset source,\n            int series, String name, double period, double skip)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/time/MovingAverage.java"}, "focal_method": {"identifier": "createMovingAverage", "parameters": "(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "modifiers": "public static", "return": "TimeSeriesCollection", "body": "public static TimeSeriesCollection createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip) {\n\n        if (source == null) {\n            throw new IllegalArgumentException(\"Null 'source' argument.\");\n        }\n        if (periodCount < 1) {\n            throw new IllegalArgumentException(\"periodCount must be greater \"\n                    + \"than or equal to 1.\");\n        }\n\n        TimeSeriesCollection result = new TimeSeriesCollection();\n        for (int i = 0; i < source.getSeriesCount(); i++) {\n            TimeSeries sourceSeries = source.getSeries(i);\n            TimeSeries maSeries = createMovingAverage(sourceSeries,\n                    sourceSeries.getKey() + suffix, periodCount, skip);\n            result.addSeries(maSeries);\n        }\n        return result;\n\n    }", "signature": "TimeSeriesCollection createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "full_signature": "public static TimeSeriesCollection createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "class_method_signature": "MovingAverage.createMovingAverage(\n            TimeSeriesCollection source, String suffix, int periodCount,\n            int skip)", "testcase": false, "constructor": false, "invocations": ["getSeriesCount", "getSeries", "createMovingAverage", "getKey", "addSeries"]}, "repository": {"repo_id": "Chart_1_buggy"}}