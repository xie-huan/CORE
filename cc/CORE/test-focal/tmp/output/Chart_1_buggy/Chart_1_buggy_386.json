{"test_class": {"identifier": "CategoryAxisTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/CategoryAxisTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n\n        CategoryAxis a1 = new CategoryAxis(\"Test\");\n        CategoryAxis a2 = new CategoryAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        // lowerMargin\n        a1.setLowerMargin(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.15);\n        assertTrue(a1.equals(a2));\n\n        // upperMargin\n        a1.setUpperMargin(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.15);\n        assertTrue(a1.equals(a2));\n\n        // categoryMargin\n        a1.setCategoryMargin(0.15);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryMargin(0.15);\n        assertTrue(a1.equals(a2));\n\n        // maxCategoryLabelWidthRatio\n        a1.setMaximumCategoryLabelWidthRatio(0.98f);\n        assertFalse(a1.equals(a2));\n        a2.setMaximumCategoryLabelWidthRatio(0.98f);\n        assertTrue(a1.equals(a2));\n\n        // categoryLabelPositionOffset\n        a1.setCategoryLabelPositionOffset(11);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryLabelPositionOffset(11);\n        assertTrue(a1.equals(a2));\n\n        // categoryLabelPositions\n        a1.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);\n        assertFalse(a1.equals(a2));\n        a2.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);\n        assertTrue(a1.equals(a2));\n\n        // categoryLabelToolTips\n        a1.addCategoryLabelToolTip(\"Test\", \"Check\");\n        assertFalse(a1.equals(a2));\n        a2.addCategoryLabelToolTip(\"Test\", \"Check\");\n        assertTrue(a1.equals(a2));\n\n        // tickLabelFont\n        a1.setTickLabelFont(\"C1\", new Font(\"Dialog\", Font.PLAIN, 21));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelFont(\"C1\", new Font(\"Dialog\", Font.PLAIN, 21));\n        assertTrue(a1.equals(a2));\n\n        // tickLabelPaint\n        a1.setTickLabelPaint(\"C1\", Color.red);\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(\"C1\", Color.red);\n        assertTrue(a1.equals(a2));\n\n        // tickLabelPaint2\n        a1.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(a1.equals(a2));\n        a2.setTickLabelPaint(\"C1\", new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(a1.equals(a2));\n\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "CategoryAxisTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "setLowerMargin", "assertFalse", "equals", "setLowerMargin", "assertTrue", "equals", "setUpperMargin", "assertFalse", "equals", "setUpperMargin", "assertTrue", "equals", "setCategoryMargin", "assertFalse", "equals", "setCategoryMargin", "assertTrue", "equals", "setMaximumCategoryLabelWidthRatio", "assertFalse", "equals", "setMaximumCategoryLabelWidthRatio", "assertTrue", "equals", "setCategoryLabelPositionOffset", "assertFalse", "equals", "setCategoryLabelPositionOffset", "assertTrue", "equals", "setCategoryLabelPositions", "assertFalse", "equals", "setCategoryLabelPositions", "assertTrue", "equals", "addCategoryLabelToolTip", "assertFalse", "equals", "addCategoryLabelToolTip", "assertTrue", "equals", "setTickLabelFont", "assertFalse", "equals", "setTickLabelFont", "assertTrue", "equals", "setTickLabelPaint", "assertFalse", "equals", "setTickLabelPaint", "assertTrue", "equals", "setTickLabelPaint", "assertFalse", "equals", "setTickLabelPaint", "assertTrue", "equals"]}, "focal_class": {"identifier": "CategoryAxis", "superclass": "extends Axis", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 5886554608114265863L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5886554608114265863L", "var_name": "serialVersionUID"}, {"original_string": "public static final double DEFAULT_AXIS_MARGIN = 0.05;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_AXIS_MARGIN = 0.05", "var_name": "DEFAULT_AXIS_MARGIN"}, {"original_string": "public static final double DEFAULT_CATEGORY_MARGIN = 0.20;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_CATEGORY_MARGIN = 0.20", "var_name": "DEFAULT_CATEGORY_MARGIN"}, {"original_string": "private double lowerMargin;", "modifier": "private", "type": "double", "declarator": "lowerMargin", "var_name": "lowerMargin"}, {"original_string": "private double upperMargin;", "modifier": "private", "type": "double", "declarator": "upperMargin", "var_name": "upperMargin"}, {"original_string": "private double categoryMargin;", "modifier": "private", "type": "double", "declarator": "categoryMargin", "var_name": "categoryMargin"}, {"original_string": "private int maximumCategoryLabelLines;", "modifier": "private", "type": "int", "declarator": "maximumCategoryLabelLines", "var_name": "maximumCategoryLabelLines"}, {"original_string": "private float maximumCategoryLabelWidthRatio;", "modifier": "private", "type": "float", "declarator": "maximumCategoryLabelWidthRatio", "var_name": "maximumCategoryLabelWidthRatio"}, {"original_string": "private int categoryLabelPositionOffset;", "modifier": "private", "type": "int", "declarator": "categoryLabelPositionOffset", "var_name": "categoryLabelPositionOffset"}, {"original_string": "private CategoryLabelPositions categoryLabelPositions;", "modifier": "private", "type": "CategoryLabelPositions", "declarator": "categoryLabelPositions", "var_name": "categoryLabelPositions"}, {"original_string": "private Map tickLabelFontMap;", "modifier": "private", "type": "Map", "declarator": "tickLabelFontMap", "var_name": "tickLabelFontMap"}, {"original_string": "private transient Map tickLabelPaintMap;", "modifier": "private transient", "type": "Map", "declarator": "tickLabelPaintMap", "var_name": "tickLabelPaintMap"}, {"original_string": "private Map categoryLabelToolTips;", "modifier": "private", "type": "Map", "declarator": "categoryLabelToolTips", "var_name": "categoryLabelToolTips"}], "methods": [{"identifier": "CategoryAxis", "parameters": "()", "modifiers": "public", "return": "", "signature": " CategoryAxis()", "full_signature": "public  CategoryAxis()", "class_method_signature": "CategoryAxis.CategoryAxis()", "testcase": false, "constructor": true}, {"identifier": "CategoryAxis", "parameters": "(String label)", "modifiers": "public", "return": "", "signature": " CategoryAxis(String label)", "full_signature": "public  CategoryAxis(String label)", "class_method_signature": "CategoryAxis.CategoryAxis(String label)", "testcase": false, "constructor": true}, {"identifier": "getLowerMargin", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLowerMargin()", "full_signature": "public double getLowerMargin()", "class_method_signature": "CategoryAxis.getLowerMargin()", "testcase": false, "constructor": false}, {"identifier": "setLowerMargin", "parameters": "(double margin)", "modifiers": "public", "return": "void", "signature": "void setLowerMargin(double margin)", "full_signature": "public void setLowerMargin(double margin)", "class_method_signature": "CategoryAxis.setLowerMargin(double margin)", "testcase": false, "constructor": false}, {"identifier": "getUpperMargin", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUpperMargin()", "full_signature": "public double getUpperMargin()", "class_method_signature": "CategoryAxis.getUpperMargin()", "testcase": false, "constructor": false}, {"identifier": "setUpperMargin", "parameters": "(double margin)", "modifiers": "public", "return": "void", "signature": "void setUpperMargin(double margin)", "full_signature": "public void setUpperMargin(double margin)", "class_method_signature": "CategoryAxis.setUpperMargin(double margin)", "testcase": false, "constructor": false}, {"identifier": "getCategoryMargin", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCategoryMargin()", "full_signature": "public double getCategoryMargin()", "class_method_signature": "CategoryAxis.getCategoryMargin()", "testcase": false, "constructor": false}, {"identifier": "setCategoryMargin", "parameters": "(double margin)", "modifiers": "public", "return": "void", "signature": "void setCategoryMargin(double margin)", "full_signature": "public void setCategoryMargin(double margin)", "class_method_signature": "CategoryAxis.setCategoryMargin(double margin)", "testcase": false, "constructor": false}, {"identifier": "getMaximumCategoryLabelLines", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximumCategoryLabelLines()", "full_signature": "public int getMaximumCategoryLabelLines()", "class_method_signature": "CategoryAxis.getMaximumCategoryLabelLines()", "testcase": false, "constructor": false}, {"identifier": "setMaximumCategoryLabelLines", "parameters": "(int lines)", "modifiers": "public", "return": "void", "signature": "void setMaximumCategoryLabelLines(int lines)", "full_signature": "public void setMaximumCategoryLabelLines(int lines)", "class_method_signature": "CategoryAxis.setMaximumCategoryLabelLines(int lines)", "testcase": false, "constructor": false}, {"identifier": "getMaximumCategoryLabelWidthRatio", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getMaximumCategoryLabelWidthRatio()", "full_signature": "public float getMaximumCategoryLabelWidthRatio()", "class_method_signature": "CategoryAxis.getMaximumCategoryLabelWidthRatio()", "testcase": false, "constructor": false}, {"identifier": "setMaximumCategoryLabelWidthRatio", "parameters": "(float ratio)", "modifiers": "public", "return": "void", "signature": "void setMaximumCategoryLabelWidthRatio(float ratio)", "full_signature": "public void setMaximumCategoryLabelWidthRatio(float ratio)", "class_method_signature": "CategoryAxis.setMaximumCategoryLabelWidthRatio(float ratio)", "testcase": false, "constructor": false}, {"identifier": "getCategoryLabelPositionOffset", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCategoryLabelPositionOffset()", "full_signature": "public int getCategoryLabelPositionOffset()", "class_method_signature": "CategoryAxis.getCategoryLabelPositionOffset()", "testcase": false, "constructor": false}, {"identifier": "setCategoryLabelPositionOffset", "parameters": "(int offset)", "modifiers": "public", "return": "void", "signature": "void setCategoryLabelPositionOffset(int offset)", "full_signature": "public void setCategoryLabelPositionOffset(int offset)", "class_method_signature": "CategoryAxis.setCategoryLabelPositionOffset(int offset)", "testcase": false, "constructor": false}, {"identifier": "getCategoryLabelPositions", "parameters": "()", "modifiers": "public", "return": "CategoryLabelPositions", "signature": "CategoryLabelPositions getCategoryLabelPositions()", "full_signature": "public CategoryLabelPositions getCategoryLabelPositions()", "class_method_signature": "CategoryAxis.getCategoryLabelPositions()", "testcase": false, "constructor": false}, {"identifier": "setCategoryLabelPositions", "parameters": "(CategoryLabelPositions positions)", "modifiers": "public", "return": "void", "signature": "void setCategoryLabelPositions(CategoryLabelPositions positions)", "full_signature": "public void setCategoryLabelPositions(CategoryLabelPositions positions)", "class_method_signature": "CategoryAxis.setCategoryLabelPositions(CategoryLabelPositions positions)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelFont", "parameters": "(Comparable category)", "modifiers": "public", "return": "Font", "signature": "Font getTickLabelFont(Comparable category)", "full_signature": "public Font getTickLabelFont(Comparable category)", "class_method_signature": "CategoryAxis.getTickLabelFont(Comparable category)", "testcase": false, "constructor": false}, {"identifier": "setTickLabelFont", "parameters": "(Comparable category, Font font)", "modifiers": "public", "return": "void", "signature": "void setTickLabelFont(Comparable category, Font font)", "full_signature": "public void setTickLabelFont(Comparable category, Font font)", "class_method_signature": "CategoryAxis.setTickLabelFont(Comparable category, Font font)", "testcase": false, "constructor": false}, {"identifier": "getTickLabelPaint", "parameters": "(Comparable category)", "modifiers": "public", "return": "Paint", "signature": "Paint getTickLabelPaint(Comparable category)", "full_signature": "public Paint getTickLabelPaint(Comparable category)", "class_method_signature": "CategoryAxis.getTickLabelPaint(Comparable category)", "testcase": false, "constructor": false}, {"identifier": "setTickLabelPaint", "parameters": "(Comparable category, Paint paint)", "modifiers": "public", "return": "void", "signature": "void setTickLabelPaint(Comparable category, Paint paint)", "full_signature": "public void setTickLabelPaint(Comparable category, Paint paint)", "class_method_signature": "CategoryAxis.setTickLabelPaint(Comparable category, Paint paint)", "testcase": false, "constructor": false}, {"identifier": "addCategoryLabelToolTip", "parameters": "(Comparable category, String tooltip)", "modifiers": "public", "return": "void", "signature": "void addCategoryLabelToolTip(Comparable category, String tooltip)", "full_signature": "public void addCategoryLabelToolTip(Comparable category, String tooltip)", "class_method_signature": "CategoryAxis.addCategoryLabelToolTip(Comparable category, String tooltip)", "testcase": false, "constructor": false}, {"identifier": "getCategoryLabelToolTip", "parameters": "(Comparable category)", "modifiers": "public", "return": "String", "signature": "String getCategoryLabelToolTip(Comparable category)", "full_signature": "public String getCategoryLabelToolTip(Comparable category)", "class_method_signature": "CategoryAxis.getCategoryLabelToolTip(Comparable category)", "testcase": false, "constructor": false}, {"identifier": "removeCategoryLabelToolTip", "parameters": "(Comparable category)", "modifiers": "public", "return": "void", "signature": "void removeCategoryLabelToolTip(Comparable category)", "full_signature": "public void removeCategoryLabelToolTip(Comparable category)", "class_method_signature": "CategoryAxis.removeCategoryLabelToolTip(Comparable category)", "testcase": false, "constructor": false}, {"identifier": "clearCategoryLabelToolTips", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCategoryLabelToolTips()", "full_signature": "public void clearCategoryLabelToolTips()", "class_method_signature": "CategoryAxis.clearCategoryLabelToolTips()", "testcase": false, "constructor": false}, {"identifier": "getCategoryJava2DCoordinate", "parameters": "(CategoryAnchor anchor,\n                                              int category,\n                                              int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategoryJava2DCoordinate(CategoryAnchor anchor,\n                                              int category,\n                                              int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "full_signature": "public double getCategoryJava2DCoordinate(CategoryAnchor anchor,\n                                              int category,\n                                              int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategoryJava2DCoordinate(CategoryAnchor anchor,\n                                              int category,\n                                              int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "getCategoryStart", "parameters": "(int category, int categoryCount,\n                                   Rectangle2D area,\n                                   RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategoryStart(int category, int categoryCount,\n                                   Rectangle2D area,\n                                   RectangleEdge edge)", "full_signature": "public double getCategoryStart(int category, int categoryCount,\n                                   Rectangle2D area,\n                                   RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategoryStart(int category, int categoryCount,\n                                   Rectangle2D area,\n                                   RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "getCategoryMiddle", "parameters": "(int category, int categoryCount,\n                                    Rectangle2D area, RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategoryMiddle(int category, int categoryCount,\n                                    Rectangle2D area, RectangleEdge edge)", "full_signature": "public double getCategoryMiddle(int category, int categoryCount,\n                                    Rectangle2D area, RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategoryMiddle(int category, int categoryCount,\n                                    Rectangle2D area, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "getCategoryEnd", "parameters": "(int category, int categoryCount,\n                                 Rectangle2D area, RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategoryEnd(int category, int categoryCount,\n                                 Rectangle2D area, RectangleEdge edge)", "full_signature": "public double getCategoryEnd(int category, int categoryCount,\n                                 Rectangle2D area, RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategoryEnd(int category, int categoryCount,\n                                 Rectangle2D area, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "getCategoryMiddle", "parameters": "(Comparable category,\n            List categories, Rectangle2D area, RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategoryMiddle(Comparable category,\n            List categories, Rectangle2D area, RectangleEdge edge)", "full_signature": "public double getCategoryMiddle(Comparable category,\n            List categories, Rectangle2D area, RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategoryMiddle(Comparable category,\n            List categories, Rectangle2D area, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "getCategorySeriesMiddle", "parameters": "(Comparable category,\n            Comparable seriesKey, CategoryDataset dataset, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategorySeriesMiddle(Comparable category,\n            Comparable seriesKey, CategoryDataset dataset, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "full_signature": "public double getCategorySeriesMiddle(Comparable category,\n            Comparable seriesKey, CategoryDataset dataset, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategorySeriesMiddle(Comparable category,\n            Comparable seriesKey, CategoryDataset dataset, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "getCategorySeriesMiddle", "parameters": "(int categoryIndex, int categoryCount,\n            int seriesIndex, int seriesCount, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double getCategorySeriesMiddle(int categoryIndex, int categoryCount,\n            int seriesIndex, int seriesCount, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "full_signature": "public double getCategorySeriesMiddle(int categoryIndex, int categoryCount,\n            int seriesIndex, int seriesCount, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "class_method_signature": "CategoryAxis.getCategorySeriesMiddle(int categoryIndex, int categoryCount,\n            int seriesIndex, int seriesCount, double itemMargin,\n            Rectangle2D area, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "calculateCategorySize", "parameters": "(int categoryCount, Rectangle2D area,\n                                           RectangleEdge edge)", "modifiers": "protected", "return": "double", "signature": "double calculateCategorySize(int categoryCount, Rectangle2D area,\n                                           RectangleEdge edge)", "full_signature": "protected double calculateCategorySize(int categoryCount, Rectangle2D area,\n                                           RectangleEdge edge)", "class_method_signature": "CategoryAxis.calculateCategorySize(int categoryCount, Rectangle2D area,\n                                           RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "calculateCategoryGapSize", "parameters": "(int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "modifiers": "protected", "return": "double", "signature": "double calculateCategoryGapSize(int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "full_signature": "protected double calculateCategoryGapSize(int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "class_method_signature": "CategoryAxis.calculateCategoryGapSize(int categoryCount,\n                                              Rectangle2D area,\n                                              RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "reserveSpace", "parameters": "(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge, AxisSpace space)", "modifiers": "public", "return": "AxisSpace", "signature": "AxisSpace reserveSpace(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge, AxisSpace space)", "full_signature": "public AxisSpace reserveSpace(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge, AxisSpace space)", "class_method_signature": "CategoryAxis.reserveSpace(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea,\n                                  RectangleEdge edge, AxisSpace space)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void configure()", "full_signature": "public void configure()", "class_method_signature": "CategoryAxis.configure()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "modifiers": "public", "return": "AxisState", "signature": "AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "full_signature": "public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "class_method_signature": "CategoryAxis.draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "drawCategoryLabels", "parameters": "(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge,\n                                           AxisState state,\n                                           PlotRenderingInfo plotState)", "modifiers": "protected", "return": "AxisState", "signature": "AxisState drawCategoryLabels(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge,\n                                           AxisState state,\n                                           PlotRenderingInfo plotState)", "full_signature": "protected AxisState drawCategoryLabels(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge,\n                                           AxisState state,\n                                           PlotRenderingInfo plotState)", "class_method_signature": "CategoryAxis.drawCategoryLabels(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge,\n                                           AxisState state,\n                                           PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "refreshTicks", "parameters": "(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "modifiers": "public", "return": "List", "signature": "List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "full_signature": "public List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "class_method_signature": "CategoryAxis.refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "drawTickMarks", "parameters": "(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge, AxisState state)", "modifiers": "public", "return": "void", "signature": "void drawTickMarks(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge, AxisState state)", "full_signature": "public void drawTickMarks(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge, AxisState state)", "class_method_signature": "CategoryAxis.drawTickMarks(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge, AxisState state)", "testcase": false, "constructor": false}, {"identifier": "createLabel", "parameters": "(Comparable category, float width,\n                                    RectangleEdge edge, Graphics2D g2)", "modifiers": "protected", "return": "TextBlock", "signature": "TextBlock createLabel(Comparable category, float width,\n                                    RectangleEdge edge, Graphics2D g2)", "full_signature": "protected TextBlock createLabel(Comparable category, float width,\n                                    RectangleEdge edge, Graphics2D g2)", "class_method_signature": "CategoryAxis.createLabel(Comparable category, float width,\n                                    RectangleEdge edge, Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "calculateTextBlockWidth", "parameters": "(TextBlock block,\n            CategoryLabelPosition position, Graphics2D g2)", "modifiers": "protected", "return": "double", "signature": "double calculateTextBlockWidth(TextBlock block,\n            CategoryLabelPosition position, Graphics2D g2)", "full_signature": "protected double calculateTextBlockWidth(TextBlock block,\n            CategoryLabelPosition position, Graphics2D g2)", "class_method_signature": "CategoryAxis.calculateTextBlockWidth(TextBlock block,\n            CategoryLabelPosition position, Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "calculateTextBlockHeight", "parameters": "(TextBlock block,\n                                              CategoryLabelPosition position,\n                                              Graphics2D g2)", "modifiers": "protected", "return": "double", "signature": "double calculateTextBlockHeight(TextBlock block,\n                                              CategoryLabelPosition position,\n                                              Graphics2D g2)", "full_signature": "protected double calculateTextBlockHeight(TextBlock block,\n                                              CategoryLabelPosition position,\n                                              Graphics2D g2)", "class_method_signature": "CategoryAxis.calculateTextBlockHeight(TextBlock block,\n                                              CategoryLabelPosition position,\n                                              Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "CategoryAxis.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CategoryAxis.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "CategoryAxis.hashCode()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "CategoryAxis.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "CategoryAxis.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readPaintMap", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "Map", "signature": "Map readPaintMap(ObjectInputStream in)", "full_signature": "private Map readPaintMap(ObjectInputStream in)", "class_method_signature": "CategoryAxis.readPaintMap(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "writePaintMap", "parameters": "(Map map, ObjectOutputStream out)", "modifiers": "private", "return": "void", "signature": "void writePaintMap(Map map, ObjectOutputStream out)", "full_signature": "private void writePaintMap(Map map, ObjectOutputStream out)", "class_method_signature": "CategoryAxis.writePaintMap(Map map, ObjectOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "equalPaintMaps", "parameters": "(Map map1, Map map2)", "modifiers": "private", "return": "boolean", "signature": "boolean equalPaintMaps(Map map1, Map map2)", "full_signature": "private boolean equalPaintMaps(Map map1, Map map2)", "class_method_signature": "CategoryAxis.equalPaintMaps(Map map1, Map map2)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/CategoryAxis.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CategoryAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CategoryAxis that = (CategoryAxis) obj;\n        if (that.lowerMargin != this.lowerMargin) {\n            return false;\n        }\n        if (that.upperMargin != this.upperMargin) {\n            return false;\n        }\n        if (that.categoryMargin != this.categoryMargin) {\n            return false;\n        }\n        if (that.maximumCategoryLabelWidthRatio\n                != this.maximumCategoryLabelWidthRatio) {\n            return false;\n        }\n        if (that.categoryLabelPositionOffset\n                != this.categoryLabelPositionOffset) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(that.categoryLabelPositions,\n                this.categoryLabelPositions)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(that.categoryLabelToolTips,\n                this.categoryLabelToolTips)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFontMap,\n                that.tickLabelFontMap)) {\n            return false;\n        }\n        if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CategoryAxis.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equal", "equalPaintMaps"]}, "repository": {"repo_id": "Chart_1_buggy"}}