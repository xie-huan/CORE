{"test_class": {"identifier": "LineAndShapeRendererTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.java"}, "test_case": {"identifier": "testGetLegendItemSeriesIndex", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");\n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");\n        dataset1.addValue(25.0, \"R5\", \"C1\");\n        LineAndShapeRenderer r = new LineAndShapeRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }", "signature": "void testGetLegendItemSeriesIndex()", "full_signature": "public void testGetLegendItemSeriesIndex()", "class_method_signature": "LineAndShapeRendererTests.testGetLegendItemSeriesIndex()", "testcase": true, "constructor": false, "invocations": ["addValue", "addValue", "addValue", "addValue", "addValue", "setDataset", "getLegendItem", "assertEquals", "getLabel", "assertEquals", "getDatasetIndex", "assertEquals", "getSeriesIndex"]}, "focal_class": {"identifier": "LineAndShapeRenderer", "superclass": "extends AbstractCategoryItemRenderer", "interfaces": "implements Cloneable, PublicCloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -197749519869226398L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -197749519869226398L", "var_name": "serialVersionUID"}, {"original_string": "private BooleanList seriesLinesVisible;", "modifier": "private", "type": "BooleanList", "declarator": "seriesLinesVisible", "var_name": "seriesLinesVisible"}, {"original_string": "private boolean baseLinesVisible;", "modifier": "private", "type": "boolean", "declarator": "baseLinesVisible", "var_name": "baseLinesVisible"}, {"original_string": "private BooleanList seriesShapesVisible;", "modifier": "private", "type": "BooleanList", "declarator": "seriesShapesVisible", "var_name": "seriesShapesVisible"}, {"original_string": "private boolean baseShapesVisible;", "modifier": "private", "type": "boolean", "declarator": "baseShapesVisible", "var_name": "baseShapesVisible"}, {"original_string": "private BooleanList seriesShapesFilled;", "modifier": "private", "type": "BooleanList", "declarator": "seriesShapesFilled", "var_name": "seriesShapesFilled"}, {"original_string": "private boolean baseShapesFilled;", "modifier": "private", "type": "boolean", "declarator": "baseShapesFilled", "var_name": "baseShapesFilled"}, {"original_string": "private boolean useFillPaint;", "modifier": "private", "type": "boolean", "declarator": "useFillPaint", "var_name": "useFillPaint"}, {"original_string": "private boolean drawOutlines;", "modifier": "private", "type": "boolean", "declarator": "drawOutlines", "var_name": "drawOutlines"}, {"original_string": "private boolean useOutlinePaint;", "modifier": "private", "type": "boolean", "declarator": "useOutlinePaint", "var_name": "useOutlinePaint"}, {"original_string": "private boolean useSeriesOffset;", "modifier": "private", "type": "boolean", "declarator": "useSeriesOffset", "var_name": "useSeriesOffset"}, {"original_string": "private double itemMargin;", "modifier": "private", "type": "double", "declarator": "itemMargin", "var_name": "itemMargin"}], "methods": [{"identifier": "LineAndShapeRenderer", "parameters": "()", "modifiers": "public", "return": "", "signature": " LineAndShapeRenderer()", "full_signature": "public  LineAndShapeRenderer()", "class_method_signature": "LineAndShapeRenderer.LineAndShapeRenderer()", "testcase": false, "constructor": true}, {"identifier": "LineAndShapeRenderer", "parameters": "(boolean lines, boolean shapes)", "modifiers": "public", "return": "", "signature": " LineAndShapeRenderer(boolean lines, boolean shapes)", "full_signature": "public  LineAndShapeRenderer(boolean lines, boolean shapes)", "class_method_signature": "LineAndShapeRenderer.LineAndShapeRenderer(boolean lines, boolean shapes)", "testcase": false, "constructor": true}, {"identifier": "getItemLineVisible", "parameters": "(int series, int item)", "modifiers": "public", "return": "boolean", "signature": "boolean getItemLineVisible(int series, int item)", "full_signature": "public boolean getItemLineVisible(int series, int item)", "class_method_signature": "LineAndShapeRenderer.getItemLineVisible(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getSeriesLinesVisible", "parameters": "(int series)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getSeriesLinesVisible(int series)", "full_signature": "public Boolean getSeriesLinesVisible(int series)", "class_method_signature": "LineAndShapeRenderer.getSeriesLinesVisible(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesLinesVisible", "parameters": "(int series, Boolean flag)", "modifiers": "public", "return": "void", "signature": "void setSeriesLinesVisible(int series, Boolean flag)", "full_signature": "public void setSeriesLinesVisible(int series, Boolean flag)", "class_method_signature": "LineAndShapeRenderer.setSeriesLinesVisible(int series, Boolean flag)", "testcase": false, "constructor": false}, {"identifier": "setSeriesLinesVisible", "parameters": "(int series, boolean visible)", "modifiers": "public", "return": "void", "signature": "void setSeriesLinesVisible(int series, boolean visible)", "full_signature": "public void setSeriesLinesVisible(int series, boolean visible)", "class_method_signature": "LineAndShapeRenderer.setSeriesLinesVisible(int series, boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getBaseLinesVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getBaseLinesVisible()", "full_signature": "public boolean getBaseLinesVisible()", "class_method_signature": "LineAndShapeRenderer.getBaseLinesVisible()", "testcase": false, "constructor": false}, {"identifier": "setBaseLinesVisible", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setBaseLinesVisible(boolean flag)", "full_signature": "public void setBaseLinesVisible(boolean flag)", "class_method_signature": "LineAndShapeRenderer.setBaseLinesVisible(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getItemShapeVisible", "parameters": "(int series, int item)", "modifiers": "public", "return": "boolean", "signature": "boolean getItemShapeVisible(int series, int item)", "full_signature": "public boolean getItemShapeVisible(int series, int item)", "class_method_signature": "LineAndShapeRenderer.getItemShapeVisible(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getSeriesShapesVisible", "parameters": "(int series)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getSeriesShapesVisible(int series)", "full_signature": "public Boolean getSeriesShapesVisible(int series)", "class_method_signature": "LineAndShapeRenderer.getSeriesShapesVisible(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesShapesVisible", "parameters": "(int series, boolean visible)", "modifiers": "public", "return": "void", "signature": "void setSeriesShapesVisible(int series, boolean visible)", "full_signature": "public void setSeriesShapesVisible(int series, boolean visible)", "class_method_signature": "LineAndShapeRenderer.setSeriesShapesVisible(int series, boolean visible)", "testcase": false, "constructor": false}, {"identifier": "setSeriesShapesVisible", "parameters": "(int series, Boolean flag)", "modifiers": "public", "return": "void", "signature": "void setSeriesShapesVisible(int series, Boolean flag)", "full_signature": "public void setSeriesShapesVisible(int series, Boolean flag)", "class_method_signature": "LineAndShapeRenderer.setSeriesShapesVisible(int series, Boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getBaseShapesVisible", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getBaseShapesVisible()", "full_signature": "public boolean getBaseShapesVisible()", "class_method_signature": "LineAndShapeRenderer.getBaseShapesVisible()", "testcase": false, "constructor": false}, {"identifier": "setBaseShapesVisible", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setBaseShapesVisible(boolean flag)", "full_signature": "public void setBaseShapesVisible(boolean flag)", "class_method_signature": "LineAndShapeRenderer.setBaseShapesVisible(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getDrawOutlines", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDrawOutlines()", "full_signature": "public boolean getDrawOutlines()", "class_method_signature": "LineAndShapeRenderer.getDrawOutlines()", "testcase": false, "constructor": false}, {"identifier": "setDrawOutlines", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setDrawOutlines(boolean flag)", "full_signature": "public void setDrawOutlines(boolean flag)", "class_method_signature": "LineAndShapeRenderer.setDrawOutlines(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getUseOutlinePaint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getUseOutlinePaint()", "full_signature": "public boolean getUseOutlinePaint()", "class_method_signature": "LineAndShapeRenderer.getUseOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setUseOutlinePaint", "parameters": "(boolean use)", "modifiers": "public", "return": "void", "signature": "void setUseOutlinePaint(boolean use)", "full_signature": "public void setUseOutlinePaint(boolean use)", "class_method_signature": "LineAndShapeRenderer.setUseOutlinePaint(boolean use)", "testcase": false, "constructor": false}, {"identifier": "getItemShapeFilled", "parameters": "(int series, int item)", "modifiers": "public", "return": "boolean", "signature": "boolean getItemShapeFilled(int series, int item)", "full_signature": "public boolean getItemShapeFilled(int series, int item)", "class_method_signature": "LineAndShapeRenderer.getItemShapeFilled(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getSeriesShapesFilled", "parameters": "(int series)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getSeriesShapesFilled(int series)", "full_signature": "public Boolean getSeriesShapesFilled(int series)", "class_method_signature": "LineAndShapeRenderer.getSeriesShapesFilled(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesShapesFilled", "parameters": "(int series, Boolean filled)", "modifiers": "public", "return": "void", "signature": "void setSeriesShapesFilled(int series, Boolean filled)", "full_signature": "public void setSeriesShapesFilled(int series, Boolean filled)", "class_method_signature": "LineAndShapeRenderer.setSeriesShapesFilled(int series, Boolean filled)", "testcase": false, "constructor": false}, {"identifier": "setSeriesShapesFilled", "parameters": "(int series, boolean filled)", "modifiers": "public", "return": "void", "signature": "void setSeriesShapesFilled(int series, boolean filled)", "full_signature": "public void setSeriesShapesFilled(int series, boolean filled)", "class_method_signature": "LineAndShapeRenderer.setSeriesShapesFilled(int series, boolean filled)", "testcase": false, "constructor": false}, {"identifier": "getBaseShapesFilled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getBaseShapesFilled()", "full_signature": "public boolean getBaseShapesFilled()", "class_method_signature": "LineAndShapeRenderer.getBaseShapesFilled()", "testcase": false, "constructor": false}, {"identifier": "setBaseShapesFilled", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setBaseShapesFilled(boolean flag)", "full_signature": "public void setBaseShapesFilled(boolean flag)", "class_method_signature": "LineAndShapeRenderer.setBaseShapesFilled(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getUseFillPaint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getUseFillPaint()", "full_signature": "public boolean getUseFillPaint()", "class_method_signature": "LineAndShapeRenderer.getUseFillPaint()", "testcase": false, "constructor": false}, {"identifier": "setUseFillPaint", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setUseFillPaint(boolean flag)", "full_signature": "public void setUseFillPaint(boolean flag)", "class_method_signature": "LineAndShapeRenderer.setUseFillPaint(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getUseSeriesOffset", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getUseSeriesOffset()", "full_signature": "public boolean getUseSeriesOffset()", "class_method_signature": "LineAndShapeRenderer.getUseSeriesOffset()", "testcase": false, "constructor": false}, {"identifier": "setUseSeriesOffset", "parameters": "(boolean offset)", "modifiers": "public", "return": "void", "signature": "void setUseSeriesOffset(boolean offset)", "full_signature": "public void setUseSeriesOffset(boolean offset)", "class_method_signature": "LineAndShapeRenderer.setUseSeriesOffset(boolean offset)", "testcase": false, "constructor": false}, {"identifier": "getItemMargin", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getItemMargin()", "full_signature": "public double getItemMargin()", "class_method_signature": "LineAndShapeRenderer.getItemMargin()", "testcase": false, "constructor": false}, {"identifier": "setItemMargin", "parameters": "(double margin)", "modifiers": "public", "return": "void", "signature": "void setItemMargin(double margin)", "full_signature": "public void setItemMargin(double margin)", "class_method_signature": "LineAndShapeRenderer.setItemMargin(double margin)", "testcase": false, "constructor": false}, {"identifier": "getLegendItem", "parameters": "(int datasetIndex, int series)", "modifiers": "public", "return": "LegendItem", "signature": "LegendItem getLegendItem(int datasetIndex, int series)", "full_signature": "public LegendItem getLegendItem(int datasetIndex, int series)", "class_method_signature": "LineAndShapeRenderer.getLegendItem(int datasetIndex, int series)", "testcase": false, "constructor": false}, {"identifier": "getPassCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPassCount()", "full_signature": "public int getPassCount()", "class_method_signature": "LineAndShapeRenderer.getPassCount()", "testcase": false, "constructor": false}, {"identifier": "drawItem", "parameters": "(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, int pass)", "modifiers": "public", "return": "void", "signature": "void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, int pass)", "full_signature": "public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, int pass)", "class_method_signature": "LineAndShapeRenderer.drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, int pass)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LineAndShapeRenderer.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "LineAndShapeRenderer.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java"}, "focal_method": {"identifier": "getLegendItem", "parameters": "(int datasetIndex, int series)", "modifiers": "public", "return": "LegendItem", "body": "public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot cp = getPlot();\n        if (cp == null) {\n            return null;\n        }\n\n        if (isSeriesVisible(series) && isSeriesVisibleInLegend(series)) {\n            CategoryDataset dataset = cp.getDataset(datasetIndex);\n            String label = getLegendItemLabelGenerator().generateLabel(\n                    dataset, series);\n            String description = label;\n            String toolTipText = null;\n            if (getLegendItemToolTipGenerator() != null) {\n                toolTipText = getLegendItemToolTipGenerator().generateLabel(\n                        dataset, series);\n            }\n            String urlText = null;\n            if (getLegendItemURLGenerator() != null) {\n                urlText = getLegendItemURLGenerator().generateLabel(\n                        dataset, series);\n            }\n            Shape shape = lookupLegendShape(series);\n            Paint paint = lookupSeriesPaint(series);\n            Paint fillPaint = (this.useFillPaint\n                    ? getItemFillPaint(series, 0, false) : paint);\n            boolean shapeOutlineVisible = this.drawOutlines;\n            Paint outlinePaint = (this.useOutlinePaint\n                    ? getItemOutlinePaint(series, 0, false) : paint);\n            Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n            boolean lineVisible = getItemLineVisible(series, 0);\n            boolean shapeVisible = getItemShapeVisible(series, 0);\n            LegendItem result = new LegendItem(label, description, toolTipText,\n                    urlText, shapeVisible, shape, getItemShapeFilled(series, 0),\n                    fillPaint, shapeOutlineVisible, outlinePaint, outlineStroke,\n                    lineVisible, new Line2D.Double(-7.0, 0.0, 7.0, 0.0),\n                    getItemStroke(series, 0, false), getItemPaint(series, 0,\n                    false));\n            result.setLabelFont(lookupLegendTextFont(series));\n            Paint labelPaint = lookupLegendTextPaint(series);\n            if (labelPaint != null) {\n                result.setLabelPaint(labelPaint);\n            }\n            result.setDataset(dataset);\n            result.setDatasetIndex(datasetIndex);\n            result.setSeriesKey(dataset.getRowKey(series));\n            result.setSeriesIndex(series);\n            return result;\n        }\n        return null;\n\n    }", "signature": "LegendItem getLegendItem(int datasetIndex, int series)", "full_signature": "public LegendItem getLegendItem(int datasetIndex, int series)", "class_method_signature": "LineAndShapeRenderer.getLegendItem(int datasetIndex, int series)", "testcase": false, "constructor": false, "invocations": ["getPlot", "isSeriesVisible", "isSeriesVisibleInLegend", "getDataset", "generateLabel", "getLegendItemLabelGenerator", "getLegendItemToolTipGenerator", "generateLabel", "getLegendItemToolTipGenerator", "getLegendItemURLGenerator", "generateLabel", "getLegendItemURLGenerator", "lookupLegendShape", "lookupSeriesPaint", "getItemFillPaint", "getItemOutlinePaint", "lookupSeriesOutlineStroke", "getItemLineVisible", "getItemShapeVisible", "getItemShapeFilled", "getItemStroke", "getItemPaint", "setLabelFont", "lookupLegendTextFont", "lookupLegendTextPaint", "setLabelPaint", "setDataset", "setDatasetIndex", "setSeriesKey", "getRowKey", "setSeriesIndex"]}, "repository": {"repo_id": "Chart_1_buggy"}}