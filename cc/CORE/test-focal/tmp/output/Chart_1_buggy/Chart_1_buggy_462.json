{"test_class": {"identifier": "NumberAxisTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.0000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.0000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java"}, "test_case": {"identifier": "testTranslateJava2DToValue", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testTranslateJava2DToValue() {\n        NumberAxis axis = new NumberAxis();\n        axis.setRange(50.0, 100.0);\n        Rectangle2D dataArea = new Rectangle2D.Double(10.0, 50.0, 400.0, 300.0);\n        double y1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);\n        assertEquals(y1, 95.8333333, EPSILON);\n        double y2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);\n        assertEquals(y2, 95.8333333, EPSILON);\n        double x1 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);\n        assertEquals(x1, 58.125, EPSILON);\n        double x2 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);\n        assertEquals(x2, 58.125, EPSILON);\n        axis.setInverted(true);\n        double y3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.LEFT);\n        assertEquals(y3, 54.1666667, EPSILON);\n        double y4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.RIGHT);\n        assertEquals(y4, 54.1666667, EPSILON);\n        double x3 = axis.java2DToValue(75.0, dataArea, RectangleEdge.TOP);\n        assertEquals(x3, 91.875, EPSILON);\n        double x4 = axis.java2DToValue(75.0, dataArea, RectangleEdge.BOTTOM);\n        assertEquals(x4, 91.875, EPSILON);\n    }", "signature": "void testTranslateJava2DToValue()", "full_signature": "public void testTranslateJava2DToValue()", "class_method_signature": "NumberAxisTests.testTranslateJava2DToValue()", "testcase": true, "constructor": false, "invocations": ["setRange", "java2DToValue", "assertEquals", "java2DToValue", "assertEquals", "java2DToValue", "assertEquals", "java2DToValue", "assertEquals", "setInverted", "java2DToValue", "assertEquals", "java2DToValue", "assertEquals", "java2DToValue", "assertEquals", "java2DToValue", "assertEquals"]}, "focal_class": {"identifier": "NumberAxis", "superclass": "extends ValueAxis", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 2805933088476185789L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2805933088476185789L", "var_name": "serialVersionUID"}, {"original_string": "public static final boolean DEFAULT_AUTO_RANGE_INCLUDES_ZERO = true;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_AUTO_RANGE_INCLUDES_ZERO = true", "var_name": "DEFAULT_AUTO_RANGE_INCLUDES_ZERO"}, {"original_string": "public static final boolean DEFAULT_AUTO_RANGE_STICKY_ZERO = true;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_AUTO_RANGE_STICKY_ZERO = true", "var_name": "DEFAULT_AUTO_RANGE_STICKY_ZERO"}, {"original_string": "public static final NumberTickUnit DEFAULT_TICK_UNIT = new NumberTickUnit(\n            1.0, new DecimalFormat(\"0\"));", "modifier": "public static final", "type": "NumberTickUnit", "declarator": "DEFAULT_TICK_UNIT = new NumberTickUnit(\n            1.0, new DecimalFormat(\"0\"))", "var_name": "DEFAULT_TICK_UNIT"}, {"original_string": "public static final boolean DEFAULT_VERTICAL_TICK_LABELS = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_VERTICAL_TICK_LABELS = false", "var_name": "DEFAULT_VERTICAL_TICK_LABELS"}, {"original_string": "private RangeType rangeType;", "modifier": "private", "type": "RangeType", "declarator": "rangeType", "var_name": "rangeType"}, {"original_string": "private boolean autoRangeIncludesZero;", "modifier": "private", "type": "boolean", "declarator": "autoRangeIncludesZero", "var_name": "autoRangeIncludesZero"}, {"original_string": "private boolean autoRangeStickyZero;", "modifier": "private", "type": "boolean", "declarator": "autoRangeStickyZero", "var_name": "autoRangeStickyZero"}, {"original_string": "private NumberTickUnit tickUnit;", "modifier": "private", "type": "NumberTickUnit", "declarator": "tickUnit", "var_name": "tickUnit"}, {"original_string": "private NumberFormat numberFormatOverride;", "modifier": "private", "type": "NumberFormat", "declarator": "numberFormatOverride", "var_name": "numberFormatOverride"}, {"original_string": "private MarkerAxisBand markerBand;", "modifier": "private", "type": "MarkerAxisBand", "declarator": "markerBand", "var_name": "markerBand"}], "methods": [{"identifier": "NumberAxis", "parameters": "()", "modifiers": "public", "return": "", "signature": " NumberAxis()", "full_signature": "public  NumberAxis()", "class_method_signature": "NumberAxis.NumberAxis()", "testcase": false, "constructor": true}, {"identifier": "NumberAxis", "parameters": "(String label)", "modifiers": "public", "return": "", "signature": " NumberAxis(String label)", "full_signature": "public  NumberAxis(String label)", "class_method_signature": "NumberAxis.NumberAxis(String label)", "testcase": false, "constructor": true}, {"identifier": "getRangeType", "parameters": "()", "modifiers": "public", "return": "RangeType", "signature": "RangeType getRangeType()", "full_signature": "public RangeType getRangeType()", "class_method_signature": "NumberAxis.getRangeType()", "testcase": false, "constructor": false}, {"identifier": "setRangeType", "parameters": "(RangeType rangeType)", "modifiers": "public", "return": "void", "signature": "void setRangeType(RangeType rangeType)", "full_signature": "public void setRangeType(RangeType rangeType)", "class_method_signature": "NumberAxis.setRangeType(RangeType rangeType)", "testcase": false, "constructor": false}, {"identifier": "getAutoRangeIncludesZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoRangeIncludesZero()", "full_signature": "public boolean getAutoRangeIncludesZero()", "class_method_signature": "NumberAxis.getAutoRangeIncludesZero()", "testcase": false, "constructor": false}, {"identifier": "setAutoRangeIncludesZero", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setAutoRangeIncludesZero(boolean flag)", "full_signature": "public void setAutoRangeIncludesZero(boolean flag)", "class_method_signature": "NumberAxis.setAutoRangeIncludesZero(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getAutoRangeStickyZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoRangeStickyZero()", "full_signature": "public boolean getAutoRangeStickyZero()", "class_method_signature": "NumberAxis.getAutoRangeStickyZero()", "testcase": false, "constructor": false}, {"identifier": "setAutoRangeStickyZero", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setAutoRangeStickyZero(boolean flag)", "full_signature": "public void setAutoRangeStickyZero(boolean flag)", "class_method_signature": "NumberAxis.setAutoRangeStickyZero(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getTickUnit", "parameters": "()", "modifiers": "public", "return": "NumberTickUnit", "signature": "NumberTickUnit getTickUnit()", "full_signature": "public NumberTickUnit getTickUnit()", "class_method_signature": "NumberAxis.getTickUnit()", "testcase": false, "constructor": false}, {"identifier": "setTickUnit", "parameters": "(NumberTickUnit unit)", "modifiers": "public", "return": "void", "signature": "void setTickUnit(NumberTickUnit unit)", "full_signature": "public void setTickUnit(NumberTickUnit unit)", "class_method_signature": "NumberAxis.setTickUnit(NumberTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "setTickUnit", "parameters": "(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "modifiers": "public", "return": "void", "signature": "void setTickUnit(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "full_signature": "public void setTickUnit(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "class_method_signature": "NumberAxis.setTickUnit(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "testcase": false, "constructor": false}, {"identifier": "getNumberFormatOverride", "parameters": "()", "modifiers": "public", "return": "NumberFormat", "signature": "NumberFormat getNumberFormatOverride()", "full_signature": "public NumberFormat getNumberFormatOverride()", "class_method_signature": "NumberAxis.getNumberFormatOverride()", "testcase": false, "constructor": false}, {"identifier": "setNumberFormatOverride", "parameters": "(NumberFormat formatter)", "modifiers": "public", "return": "void", "signature": "void setNumberFormatOverride(NumberFormat formatter)", "full_signature": "public void setNumberFormatOverride(NumberFormat formatter)", "class_method_signature": "NumberAxis.setNumberFormatOverride(NumberFormat formatter)", "testcase": false, "constructor": false}, {"identifier": "getMarkerBand", "parameters": "()", "modifiers": "public", "return": "MarkerAxisBand", "signature": "MarkerAxisBand getMarkerBand()", "full_signature": "public MarkerAxisBand getMarkerBand()", "class_method_signature": "NumberAxis.getMarkerBand()", "testcase": false, "constructor": false}, {"identifier": "setMarkerBand", "parameters": "(MarkerAxisBand band)", "modifiers": "public", "return": "void", "signature": "void setMarkerBand(MarkerAxisBand band)", "full_signature": "public void setMarkerBand(MarkerAxisBand band)", "class_method_signature": "NumberAxis.setMarkerBand(MarkerAxisBand band)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void configure()", "full_signature": "public void configure()", "class_method_signature": "NumberAxis.configure()", "testcase": false, "constructor": false}, {"identifier": "autoAdjustRange", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void autoAdjustRange()", "full_signature": "protected void autoAdjustRange()", "class_method_signature": "NumberAxis.autoAdjustRange()", "testcase": false, "constructor": false}, {"identifier": "valueToJava2D", "parameters": "(double value, Rectangle2D area,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double valueToJava2D(double value, Rectangle2D area,\n                                RectangleEdge edge)", "full_signature": "public double valueToJava2D(double value, Rectangle2D area,\n                                RectangleEdge edge)", "class_method_signature": "NumberAxis.valueToJava2D(double value, Rectangle2D area,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "java2DToValue", "parameters": "(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "full_signature": "public double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "class_method_signature": "NumberAxis.java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "calculateLowestVisibleTickValue", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double calculateLowestVisibleTickValue()", "full_signature": "protected double calculateLowestVisibleTickValue()", "class_method_signature": "NumberAxis.calculateLowestVisibleTickValue()", "testcase": false, "constructor": false}, {"identifier": "calculateHighestVisibleTickValue", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double calculateHighestVisibleTickValue()", "full_signature": "protected double calculateHighestVisibleTickValue()", "class_method_signature": "NumberAxis.calculateHighestVisibleTickValue()", "testcase": false, "constructor": false}, {"identifier": "calculateVisibleTickCount", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int calculateVisibleTickCount()", "full_signature": "protected int calculateVisibleTickCount()", "class_method_signature": "NumberAxis.calculateVisibleTickCount()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "modifiers": "public", "return": "AxisState", "signature": "AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "full_signature": "public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "class_method_signature": "NumberAxis.draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "createStandardTickUnits", "parameters": "()", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createStandardTickUnits()", "full_signature": "public static TickUnitSource createStandardTickUnits()", "class_method_signature": "NumberAxis.createStandardTickUnits()", "testcase": false, "constructor": false}, {"identifier": "createIntegerTickUnits", "parameters": "()", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createIntegerTickUnits()", "full_signature": "public static TickUnitSource createIntegerTickUnits()", "class_method_signature": "NumberAxis.createIntegerTickUnits()", "testcase": false, "constructor": false}, {"identifier": "createStandardTickUnits", "parameters": "(Locale locale)", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createStandardTickUnits(Locale locale)", "full_signature": "public static TickUnitSource createStandardTickUnits(Locale locale)", "class_method_signature": "NumberAxis.createStandardTickUnits(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "createIntegerTickUnits", "parameters": "(Locale locale)", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createIntegerTickUnits(Locale locale)", "full_signature": "public static TickUnitSource createIntegerTickUnits(Locale locale)", "class_method_signature": "NumberAxis.createIntegerTickUnits(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "estimateMaximumTickLabelHeight", "parameters": "(Graphics2D g2)", "modifiers": "protected", "return": "double", "signature": "double estimateMaximumTickLabelHeight(Graphics2D g2)", "full_signature": "protected double estimateMaximumTickLabelHeight(Graphics2D g2)", "class_method_signature": "NumberAxis.estimateMaximumTickLabelHeight(Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "estimateMaximumTickLabelWidth", "parameters": "(Graphics2D g2,\n                                                   TickUnit unit)", "modifiers": "protected", "return": "double", "signature": "double estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                   TickUnit unit)", "full_signature": "protected double estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                   TickUnit unit)", "class_method_signature": "NumberAxis.estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                   TickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "selectAutoTickUnit", "parameters": "(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "full_signature": "protected void selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "class_method_signature": "NumberAxis.selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectHorizontalAutoTickUnit", "parameters": "(Graphics2D g2,\n                                               Rectangle2D dataArea,\n                                               RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectHorizontalAutoTickUnit(Graphics2D g2,\n                                               Rectangle2D dataArea,\n                                               RectangleEdge edge)", "full_signature": "protected void selectHorizontalAutoTickUnit(Graphics2D g2,\n                                               Rectangle2D dataArea,\n                                               RectangleEdge edge)", "class_method_signature": "NumberAxis.selectHorizontalAutoTickUnit(Graphics2D g2,\n                                               Rectangle2D dataArea,\n                                               RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectVerticalAutoTickUnit", "parameters": "(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "full_signature": "protected void selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "class_method_signature": "NumberAxis.selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicks", "parameters": "(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "modifiers": "public", "return": "List", "signature": "List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "full_signature": "public List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "class_method_signature": "NumberAxis.refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksHorizontal", "parameters": "(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "protected List refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "NumberAxis.refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksVertical", "parameters": "(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "protected List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "NumberAxis.refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "NumberAxis.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "NumberAxis.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "NumberAxis.hashCode()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/NumberAxis.java"}, "focal_method": {"identifier": "java2DToValue", "parameters": "(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "body": "public double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge) {\n\n        Range range = getRange();\n        double axisMin = range.getLowerBound();\n        double axisMax = range.getUpperBound();\n\n        double min = 0.0;\n        double max = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            min = area.getX();\n            max = area.getMaxX();\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            min = area.getMaxY();\n            max = area.getY();\n        }\n        if (isInverted()) {\n            return axisMax\n                   - (java2DValue - min) / (max - min) * (axisMax - axisMin);\n        }\n        else {\n            return axisMin\n                   + (java2DValue - min) / (max - min) * (axisMax - axisMin);\n        }\n\n    }", "signature": "double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "full_signature": "public double java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "class_method_signature": "NumberAxis.java2DToValue(double java2DValue, Rectangle2D area,\n                                RectangleEdge edge)", "testcase": false, "constructor": false, "invocations": ["getRange", "getLowerBound", "getUpperBound", "isTopOrBottom", "getX", "getMaxX", "isLeftOrRight", "getMaxY", "getY", "isInverted"]}, "repository": {"repo_id": "Chart_1_buggy"}}