{"test_class": {"identifier": "RendererUtilitiesTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java"}, "test_case": {"identifier": "testFindLiveItemsLowerBound_Descending", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testFindLiveItemsLowerBound_Descending() {\n        DefaultXYDataset d = new DefaultXYDataset() {\n            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we\n                // only add data in descending order by x-value\n                return DomainOrder.DESCENDING;\n            }\n        };\n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0,\n                11.0));\n\n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0,\n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 1.1,\n                2.0));\n\n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{2.0, 1.0}, {9.9, 9.9}});\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1,\n                0.5));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1,\n                1.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.1,\n                2.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.2,\n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.3,\n                4.0));\n\n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{3.0, 2.0, 1.0}, {9.9, 9.9, 9.9}});\n        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0,\n                1.0));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0,\n                2.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0,\n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0,\n                4.0));\n\n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{4.0, 3.0, 2.0, 1.0}, {9.9, 9.9,\n                9.9, 9.9}});\n        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1,\n                0.5));\n        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1,\n                1.0));\n        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.1,\n                2.0));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.2,\n                3.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.3,\n                4.0));\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.4,\n                5.0));\n\n        // check a series with repeating items\n        d.addSeries(\"S6\", new double[][] {{3.0, 2.0, 2.0, 2.0, 1.0}, {9.9, 9.9,\n                9.9, 9.9, 9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0,\n                3.0));\n        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0,\n                2.0));\n        assertEquals(4, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0,\n                1.0));\n        assertEquals(4, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0,\n                0.5));\n    }", "signature": "void testFindLiveItemsLowerBound_Descending()", "full_signature": "public void testFindLiveItemsLowerBound_Descending()", "class_method_signature": "RendererUtilitiesTests.testFindLiveItemsLowerBound_Descending()", "testcase": true, "constructor": false, "invocations": ["addSeries", "assertEquals", "findLiveItemsLowerBound", "addSeries", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "addSeries", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "addSeries", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "addSeries", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "addSeries", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound", "assertEquals", "findLiveItemsLowerBound"]}, "focal_class": {"identifier": "RendererUtilities", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findLiveItemsLowerBound", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int", "signature": "int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false}, {"identifier": "findLiveItemsUpperBound", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int", "signature": "int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false}, {"identifier": "findLiveItems", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int[]", "signature": "int[] findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int[] findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/renderer/RendererUtilities.java"}, "focal_method": {"identifier": "findLiveItemsLowerBound", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int", "body": "public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }", "signature": "int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false, "invocations": ["getItemCount", "getDomainOrder", "getXValue", "getXValue", "getXValue", "getDomainOrder", "getXValue", "getXValue", "getXValue", "getXValue", "getXValue", "min", "max"]}, "repository": {"repo_id": "Chart_1_buggy"}}