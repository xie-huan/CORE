{"test_class": {"identifier": "LogAxisTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.0000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.0000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/chart/axis/junit/LogAxisTests.java"}, "test_case": {"identifier": "testCloning", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testCloning() {\n        LogAxis a1 = new LogAxis(\"Test\");\n        LogAxis a2 = null;\n        try {\n            a2 = (LogAxis) a1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(a1 != a2);\n        assertTrue(a1.getClass() == a2.getClass());\n        assertTrue(a1.equals(a2));\n    }", "signature": "void testCloning()", "full_signature": "public void testCloning()", "class_method_signature": "LogAxisTests.testCloning()", "testcase": true, "constructor": false, "invocations": ["clone", "printStackTrace", "assertTrue", "assertTrue", "getClass", "getClass", "assertTrue", "equals"]}, "focal_class": {"identifier": "LogAxis", "superclass": "extends ValueAxis", "interfaces": "", "fields": [{"original_string": "private double base = 10.0;", "modifier": "private", "type": "double", "declarator": "base = 10.0", "var_name": "base"}, {"original_string": "private double baseLog = Math.log(10.0);", "modifier": "private", "type": "double", "declarator": "baseLog = Math.log(10.0)", "var_name": "baseLog"}, {"original_string": "private double smallestValue = 1E-100;", "modifier": "private", "type": "double", "declarator": "smallestValue = 1E-100", "var_name": "smallestValue"}, {"original_string": "private NumberTickUnit tickUnit;", "modifier": "private", "type": "NumberTickUnit", "declarator": "tickUnit", "var_name": "tickUnit"}, {"original_string": "private NumberFormat numberFormatOverride;", "modifier": "private", "type": "NumberFormat", "declarator": "numberFormatOverride", "var_name": "numberFormatOverride"}], "methods": [{"identifier": "LogAxis", "parameters": "()", "modifiers": "public", "return": "", "signature": " LogAxis()", "full_signature": "public  LogAxis()", "class_method_signature": "LogAxis.LogAxis()", "testcase": false, "constructor": true}, {"identifier": "LogAxis", "parameters": "(String label)", "modifiers": "public", "return": "", "signature": " LogAxis(String label)", "full_signature": "public  LogAxis(String label)", "class_method_signature": "LogAxis.LogAxis(String label)", "testcase": false, "constructor": true}, {"identifier": "getBase", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getBase()", "full_signature": "public double getBase()", "class_method_signature": "LogAxis.getBase()", "testcase": false, "constructor": false}, {"identifier": "setBase", "parameters": "(double base)", "modifiers": "public", "return": "void", "signature": "void setBase(double base)", "full_signature": "public void setBase(double base)", "class_method_signature": "LogAxis.setBase(double base)", "testcase": false, "constructor": false}, {"identifier": "getSmallestValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSmallestValue()", "full_signature": "public double getSmallestValue()", "class_method_signature": "LogAxis.getSmallestValue()", "testcase": false, "constructor": false}, {"identifier": "setSmallestValue", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setSmallestValue(double value)", "full_signature": "public void setSmallestValue(double value)", "class_method_signature": "LogAxis.setSmallestValue(double value)", "testcase": false, "constructor": false}, {"identifier": "getTickUnit", "parameters": "()", "modifiers": "public", "return": "NumberTickUnit", "signature": "NumberTickUnit getTickUnit()", "full_signature": "public NumberTickUnit getTickUnit()", "class_method_signature": "LogAxis.getTickUnit()", "testcase": false, "constructor": false}, {"identifier": "setTickUnit", "parameters": "(NumberTickUnit unit)", "modifiers": "public", "return": "void", "signature": "void setTickUnit(NumberTickUnit unit)", "full_signature": "public void setTickUnit(NumberTickUnit unit)", "class_method_signature": "LogAxis.setTickUnit(NumberTickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "setTickUnit", "parameters": "(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "modifiers": "public", "return": "void", "signature": "void setTickUnit(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "full_signature": "public void setTickUnit(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "class_method_signature": "LogAxis.setTickUnit(NumberTickUnit unit, boolean notify,\n                            boolean turnOffAutoSelect)", "testcase": false, "constructor": false}, {"identifier": "getNumberFormatOverride", "parameters": "()", "modifiers": "public", "return": "NumberFormat", "signature": "NumberFormat getNumberFormatOverride()", "full_signature": "public NumberFormat getNumberFormatOverride()", "class_method_signature": "LogAxis.getNumberFormatOverride()", "testcase": false, "constructor": false}, {"identifier": "setNumberFormatOverride", "parameters": "(NumberFormat formatter)", "modifiers": "public", "return": "void", "signature": "void setNumberFormatOverride(NumberFormat formatter)", "full_signature": "public void setNumberFormatOverride(NumberFormat formatter)", "class_method_signature": "LogAxis.setNumberFormatOverride(NumberFormat formatter)", "testcase": false, "constructor": false}, {"identifier": "calculateLog", "parameters": "(double value)", "modifiers": "public", "return": "double", "signature": "double calculateLog(double value)", "full_signature": "public double calculateLog(double value)", "class_method_signature": "LogAxis.calculateLog(double value)", "testcase": false, "constructor": false}, {"identifier": "calculateValue", "parameters": "(double log)", "modifiers": "public", "return": "double", "signature": "double calculateValue(double log)", "full_signature": "public double calculateValue(double log)", "class_method_signature": "LogAxis.calculateValue(double log)", "testcase": false, "constructor": false}, {"identifier": "java2DToValue", "parameters": "(double java2DValue, Rectangle2D area,\n            RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double java2DToValue(double java2DValue, Rectangle2D area,\n            RectangleEdge edge)", "full_signature": "public double java2DToValue(double java2DValue, Rectangle2D area,\n            RectangleEdge edge)", "class_method_signature": "LogAxis.java2DToValue(double java2DValue, Rectangle2D area,\n            RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "valueToJava2D", "parameters": "(double value, Rectangle2D area,\n            RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double valueToJava2D(double value, Rectangle2D area,\n            RectangleEdge edge)", "full_signature": "public double valueToJava2D(double value, Rectangle2D area,\n            RectangleEdge edge)", "class_method_signature": "LogAxis.valueToJava2D(double value, Rectangle2D area,\n            RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void configure()", "full_signature": "public void configure()", "class_method_signature": "LogAxis.configure()", "testcase": false, "constructor": false}, {"identifier": "autoAdjustRange", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void autoAdjustRange()", "full_signature": "protected void autoAdjustRange()", "class_method_signature": "LogAxis.autoAdjustRange()", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "modifiers": "public", "return": "AxisState", "signature": "AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "full_signature": "public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "class_method_signature": "LogAxis.draw(Graphics2D g2, double cursor, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge,\n            PlotRenderingInfo plotState)", "testcase": false, "constructor": false}, {"identifier": "refreshTicks", "parameters": "(Graphics2D g2, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "public", "return": "List", "signature": "List refreshTicks(Graphics2D g2, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "public List refreshTicks(Graphics2D g2, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "LogAxis.refreshTicks(Graphics2D g2, AxisState state,\n            Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksHorizontal", "parameters": "(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "full_signature": "protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "class_method_signature": "LogAxis.refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "refreshTicksVertical", "parameters": "(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "modifiers": "protected", "return": "List", "signature": "List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "full_signature": "protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "class_method_signature": "LogAxis.refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectAutoTickUnit", "parameters": "(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "full_signature": "protected void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "class_method_signature": "LogAxis.selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectHorizontalAutoTickUnit", "parameters": "(Graphics2D g2,\n           Rectangle2D dataArea, RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectHorizontalAutoTickUnit(Graphics2D g2,\n           Rectangle2D dataArea, RectangleEdge edge)", "full_signature": "protected void selectHorizontalAutoTickUnit(Graphics2D g2,\n           Rectangle2D dataArea, RectangleEdge edge)", "class_method_signature": "LogAxis.selectHorizontalAutoTickUnit(Graphics2D g2,\n           Rectangle2D dataArea, RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "exponentLengthToJava2D", "parameters": "(double length, Rectangle2D area,\n                                RectangleEdge edge)", "modifiers": "public", "return": "double", "signature": "double exponentLengthToJava2D(double length, Rectangle2D area,\n                                RectangleEdge edge)", "full_signature": "public double exponentLengthToJava2D(double length, Rectangle2D area,\n                                RectangleEdge edge)", "class_method_signature": "LogAxis.exponentLengthToJava2D(double length, Rectangle2D area,\n                                RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "selectVerticalAutoTickUnit", "parameters": "(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "modifiers": "protected", "return": "void", "signature": "void selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "full_signature": "protected void selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "class_method_signature": "LogAxis.selectVerticalAutoTickUnit(Graphics2D g2,\n                                              Rectangle2D dataArea,\n                                              RectangleEdge edge)", "testcase": false, "constructor": false}, {"identifier": "estimateMaximumTickLabelHeight", "parameters": "(Graphics2D g2)", "modifiers": "protected", "return": "double", "signature": "double estimateMaximumTickLabelHeight(Graphics2D g2)", "full_signature": "protected double estimateMaximumTickLabelHeight(Graphics2D g2)", "class_method_signature": "LogAxis.estimateMaximumTickLabelHeight(Graphics2D g2)", "testcase": false, "constructor": false}, {"identifier": "estimateMaximumTickLabelWidth", "parameters": "(Graphics2D g2,\n                                                   TickUnit unit)", "modifiers": "protected", "return": "double", "signature": "double estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                   TickUnit unit)", "full_signature": "protected double estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                   TickUnit unit)", "class_method_signature": "LogAxis.estimateMaximumTickLabelWidth(Graphics2D g2,\n                                                   TickUnit unit)", "testcase": false, "constructor": false}, {"identifier": "zoomRange", "parameters": "(double lowerPercent, double upperPercent)", "modifiers": "public", "return": "void", "signature": "void zoomRange(double lowerPercent, double upperPercent)", "full_signature": "public void zoomRange(double lowerPercent, double upperPercent)", "class_method_signature": "LogAxis.zoomRange(double lowerPercent, double upperPercent)", "testcase": false, "constructor": false}, {"identifier": "pan", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void pan(double percent)", "full_signature": "public void pan(double percent)", "class_method_signature": "LogAxis.pan(double percent)", "testcase": false, "constructor": false}, {"identifier": "createTickLabel", "parameters": "(double value)", "modifiers": "protected", "return": "String", "signature": "String createTickLabel(double value)", "full_signature": "protected String createTickLabel(double value)", "class_method_signature": "LogAxis.createTickLabel(double value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LogAxis.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "LogAxis.hashCode()", "testcase": false, "constructor": false}, {"identifier": "createLogTickUnits", "parameters": "(Locale locale)", "modifiers": "public static", "return": "TickUnitSource", "signature": "TickUnitSource createLogTickUnits(Locale locale)", "full_signature": "public static TickUnitSource createLogTickUnits(Locale locale)", "class_method_signature": "LogAxis.createLogTickUnits(Locale locale)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/LogAxis.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof LogAxis)) {\n            return false;\n        }\n        LogAxis that = (LogAxis) obj;\n        if (this.base != that.base) {\n            return false;\n        }\n        if (this.smallestValue != that.smallestValue) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "LogAxis.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}