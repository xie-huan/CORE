{"test_class": {"identifier": "MonthTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private Month jan1900;", "modifier": "private", "type": "Month", "declarator": "jan1900", "var_name": "jan1900"}, {"original_string": "private Month feb1900;", "modifier": "private", "type": "Month", "declarator": "feb1900", "var_name": "feb1900"}, {"original_string": "private Month nov9999;", "modifier": "private", "type": "Month", "declarator": "nov9999", "var_name": "nov9999"}, {"original_string": "private Month dec9999;", "modifier": "private", "type": "Month", "declarator": "dec9999", "var_name": "dec9999"}], "file": "tests/org/jfree/data/time/junit/MonthTests.java"}, "test_case": {"identifier": "testParseMonth", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testParseMonth() {\n\n        Month month = null;\n\n        // test 1...\n        try {\n            month = Month.parseMonth(\"1990-01\");\n        }\n        catch (TimePeriodFormatException e) {\n            month = new Month(1, 1900);\n        }\n        assertEquals(1, month.getMonth());\n        assertEquals(1990, month.getYear().getYear());\n\n        // test 2...\n        try {\n            month = Month.parseMonth(\"02-1991\");\n        }\n        catch (TimePeriodFormatException e) {\n            month = new Month(1, 1900);\n        }\n        assertEquals(2, month.getMonth());\n        assertEquals(1991, month.getYear().getYear());\n\n        // test 3...\n        try {\n            month = Month.parseMonth(\"March 1993\");\n        }\n        catch (TimePeriodFormatException e) {\n            month = new Month(1, 1900);\n        }\n        assertEquals(3, month.getMonth());\n        assertEquals(1993, month.getYear().getYear());\n\n    }", "signature": "void testParseMonth()", "full_signature": "public void testParseMonth()", "class_method_signature": "MonthTests.testParseMonth()", "testcase": true, "constructor": false, "invocations": ["parseMonth", "assertEquals", "getMonth", "assertEquals", "getYear", "getYear", "parseMonth", "assertEquals", "getMonth", "assertEquals", "getYear", "getYear", "parseMonth", "assertEquals", "getMonth", "assertEquals", "getYear", "getYear"]}, "focal_class": {"identifier": "Month", "superclass": "extends RegularTimePeriod", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -5090216912548722570L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5090216912548722570L", "var_name": "serialVersionUID"}, {"original_string": "private int month;", "modifier": "private", "type": "int", "declarator": "month", "var_name": "month"}, {"original_string": "private int year;", "modifier": "private", "type": "int", "declarator": "year", "var_name": "year"}, {"original_string": "private long firstMillisecond;", "modifier": "private", "type": "long", "declarator": "firstMillisecond", "var_name": "firstMillisecond"}, {"original_string": "private long lastMillisecond;", "modifier": "private", "type": "long", "declarator": "lastMillisecond", "var_name": "lastMillisecond"}], "methods": [{"identifier": "Month", "parameters": "()", "modifiers": "public", "return": "", "signature": " Month()", "full_signature": "public  Month()", "class_method_signature": "Month.Month()", "testcase": false, "constructor": true}, {"identifier": "Month", "parameters": "(int month, int year)", "modifiers": "public", "return": "", "signature": " Month(int month, int year)", "full_signature": "public  Month(int month, int year)", "class_method_signature": "Month.Month(int month, int year)", "testcase": false, "constructor": true}, {"identifier": "Month", "parameters": "(int month, Year year)", "modifiers": "public", "return": "", "signature": " Month(int month, Year year)", "full_signature": "public  Month(int month, Year year)", "class_method_signature": "Month.Month(int month, Year year)", "testcase": false, "constructor": true}, {"identifier": "Month", "parameters": "(Date time)", "modifiers": "public", "return": "", "signature": " Month(Date time)", "full_signature": "public  Month(Date time)", "class_method_signature": "Month.Month(Date time)", "testcase": false, "constructor": true}, {"identifier": "Month", "parameters": "(Date time, TimeZone zone)", "modifiers": "public", "return": "", "signature": " Month(Date time, TimeZone zone)", "full_signature": "public  Month(Date time, TimeZone zone)", "class_method_signature": "Month.Month(Date time, TimeZone zone)", "testcase": false, "constructor": true}, {"identifier": "Month", "parameters": "(Date time, TimeZone zone, Locale locale)", "modifiers": "public", "return": "", "signature": " Month(Date time, TimeZone zone, Locale locale)", "full_signature": "public  Month(Date time, TimeZone zone, Locale locale)", "class_method_signature": "Month.Month(Date time, TimeZone zone, Locale locale)", "testcase": false, "constructor": true}, {"identifier": "getYear", "parameters": "()", "modifiers": "public", "return": "Year", "signature": "Year getYear()", "full_signature": "public Year getYear()", "class_method_signature": "Month.getYear()", "testcase": false, "constructor": false}, {"identifier": "getYearValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getYearValue()", "full_signature": "public int getYearValue()", "class_method_signature": "Month.getYearValue()", "testcase": false, "constructor": false}, {"identifier": "getMonth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMonth()", "full_signature": "public int getMonth()", "class_method_signature": "Month.getMonth()", "testcase": false, "constructor": false}, {"identifier": "getFirstMillisecond", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFirstMillisecond()", "full_signature": "public long getFirstMillisecond()", "class_method_signature": "Month.getFirstMillisecond()", "testcase": false, "constructor": false}, {"identifier": "getLastMillisecond", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastMillisecond()", "full_signature": "public long getLastMillisecond()", "class_method_signature": "Month.getLastMillisecond()", "testcase": false, "constructor": false}, {"identifier": "peg", "parameters": "(Calendar calendar)", "modifiers": "public", "return": "void", "signature": "void peg(Calendar calendar)", "full_signature": "public void peg(Calendar calendar)", "class_method_signature": "Month.peg(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public", "return": "RegularTimePeriod", "signature": "RegularTimePeriod previous()", "full_signature": "public RegularTimePeriod previous()", "class_method_signature": "Month.previous()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "RegularTimePeriod", "signature": "RegularTimePeriod next()", "full_signature": "public RegularTimePeriod next()", "class_method_signature": "Month.next()", "testcase": false, "constructor": false}, {"identifier": "getSerialIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSerialIndex()", "full_signature": "public long getSerialIndex()", "class_method_signature": "Month.getSerialIndex()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Month.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Month.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Month.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o1)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object o1)", "full_signature": "public int compareTo(Object o1)", "class_method_signature": "Month.compareTo(Object o1)", "testcase": false, "constructor": false}, {"identifier": "getFirstMillisecond", "parameters": "(Calendar calendar)", "modifiers": "public", "return": "long", "signature": "long getFirstMillisecond(Calendar calendar)", "full_signature": "public long getFirstMillisecond(Calendar calendar)", "class_method_signature": "Month.getFirstMillisecond(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "getLastMillisecond", "parameters": "(Calendar calendar)", "modifiers": "public", "return": "long", "signature": "long getLastMillisecond(Calendar calendar)", "full_signature": "public long getLastMillisecond(Calendar calendar)", "class_method_signature": "Month.getLastMillisecond(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "parseMonth", "parameters": "(String s)", "modifiers": "public static", "return": "Month", "signature": "Month parseMonth(String s)", "full_signature": "public static Month parseMonth(String s)", "class_method_signature": "Month.parseMonth(String s)", "testcase": false, "constructor": false}, {"identifier": "findSeparator", "parameters": "(String s)", "modifiers": "private static", "return": "int", "signature": "int findSeparator(String s)", "full_signature": "private static int findSeparator(String s)", "class_method_signature": "Month.findSeparator(String s)", "testcase": false, "constructor": false}, {"identifier": "evaluateAsYear", "parameters": "(String s)", "modifiers": "private static", "return": "Year", "signature": "Year evaluateAsYear(String s)", "full_signature": "private static Year evaluateAsYear(String s)", "class_method_signature": "Month.evaluateAsYear(String s)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/time/Month.java"}, "focal_method": {"identifier": "parseMonth", "parameters": "(String s)", "modifiers": "public static", "return": "Month", "body": "public static Month parseMonth(String s) {\n        Month result = null;\n        if (s == null) {\n            return result;\n        }\n        // trim whitespace from either end of the string\n        s = s.trim();\n        int i = Month.findSeparator(s);\n        String s1, s2;\n        boolean yearIsFirst;\n        // if there is no separator, we assume the first four characters\n        // are YYYY\n        if (i == -1) {\n            yearIsFirst = true;\n            s1 = s.substring(0, 5);\n            s2 = s.substring(5);\n        }\n        else {\n            s1 = s.substring(0, i).trim();\n            s2 = s.substring(i + 1, s.length()).trim();\n            // now it is trickier to determine if the month or year is first\n            Year y1 = Month.evaluateAsYear(s1);\n            if (y1 == null) {\n                yearIsFirst = false;\n            }\n            else {\n                Year y2 = Month.evaluateAsYear(s2);\n                if (y2 == null) {\n                    yearIsFirst = true;\n                }\n                else {\n                    yearIsFirst = (s1.length() > s2.length());\n                }\n            }\n        }\n        Year year;\n        int month;\n        if (yearIsFirst) {\n            year = Month.evaluateAsYear(s1);\n            month = SerialDate.stringToMonthCode(s2);\n        }\n        else {\n            year = Month.evaluateAsYear(s2);\n            month = SerialDate.stringToMonthCode(s1);\n        }\n        if (month == -1) {\n            throw new TimePeriodFormatException(\"Can't evaluate the month.\");\n        }\n        if (year == null) {\n            throw new TimePeriodFormatException(\"Can't evaluate the year.\");\n        }\n        result = new Month(month, year);\n        return result;\n    }", "signature": "Month parseMonth(String s)", "full_signature": "public static Month parseMonth(String s)", "class_method_signature": "Month.parseMonth(String s)", "testcase": false, "constructor": false, "invocations": ["trim", "findSeparator", "substring", "substring", "trim", "substring", "trim", "substring", "length", "evaluateAsYear", "evaluateAsYear", "length", "length", "evaluateAsYear", "stringToMonthCode", "evaluateAsYear", "stringToMonthCode"]}, "repository": {"repo_id": "Chart_1_buggy"}}