{"test_class": {"identifier": "CategoryToPieDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/category/junit/CategoryToPieDatasetTests.java"}, "test_case": {"identifier": "testGetValue", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testGetValue() {\n        DefaultCategoryDataset underlying = new DefaultCategoryDataset();\n        underlying.addValue(1.1, \"R1\", \"C1\");\n        underlying.addValue(2.2, \"R1\", \"C2\");\n        CategoryToPieDataset d1 = new CategoryToPieDataset(underlying,\n                TableOrder.BY_ROW, 0);\n        assertEquals(d1.getValue(\"C1\"), new Double(1.1));\n        assertEquals(d1.getValue(\"C2\"), new Double(2.2));\n\n        // check negative index throws exception\n        try {\n            /* Number n = */ d1.getValue(-1);\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n\n        // check index == getItemCount() throws exception\n        try {\n            /* Number n = */ d1.getValue(d1.getItemCount());\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n\n        // test null source\n        CategoryToPieDataset p1 = new CategoryToPieDataset(null,\n                TableOrder.BY_COLUMN, 0);\n        try {\n            /* Number n = */ p1.getValue(0);\n            fail(\"Expected IndexOutOfBoundsException.\");\n        }\n        catch (IndexOutOfBoundsException e) {\n            // this is expected\n        }\n    }", "signature": "void testGetValue()", "full_signature": "public void testGetValue()", "class_method_signature": "CategoryToPieDatasetTests.testGetValue()", "testcase": true, "constructor": false, "invocations": ["addValue", "addValue", "assertEquals", "getValue", "assertEquals", "getValue", "getValue", "fail", "getValue", "getItemCount", "fail", "getValue", "fail"]}, "focal_class": {"identifier": "CategoryToPieDataset", "superclass": "extends AbstractPieDataset", "interfaces": "implements PieDataset, DatasetChangeListener", "fields": [{"original_string": "static final long serialVersionUID = 5516396319762189617L;", "modifier": "static final", "type": "long", "declarator": "serialVersionUID = 5516396319762189617L", "var_name": "serialVersionUID"}, {"original_string": "private CategoryDataset source;", "modifier": "private", "type": "CategoryDataset", "declarator": "source", "var_name": "source"}, {"original_string": "private TableOrder extract;", "modifier": "private", "type": "TableOrder", "declarator": "extract", "var_name": "extract"}, {"original_string": "private int index;", "modifier": "private", "type": "int", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "CategoryToPieDataset", "parameters": "(CategoryDataset source,\n                                TableOrder extract,\n                                int index)", "modifiers": "public", "return": "", "signature": " CategoryToPieDataset(CategoryDataset source,\n                                TableOrder extract,\n                                int index)", "full_signature": "public  CategoryToPieDataset(CategoryDataset source,\n                                TableOrder extract,\n                                int index)", "class_method_signature": "CategoryToPieDataset.CategoryToPieDataset(CategoryDataset source,\n                                TableOrder extract,\n                                int index)", "testcase": false, "constructor": true}, {"identifier": "getUnderlyingDataset", "parameters": "()", "modifiers": "public", "return": "CategoryDataset", "signature": "CategoryDataset getUnderlyingDataset()", "full_signature": "public CategoryDataset getUnderlyingDataset()", "class_method_signature": "CategoryToPieDataset.getUnderlyingDataset()", "testcase": false, "constructor": false}, {"identifier": "getExtractType", "parameters": "()", "modifiers": "public", "return": "TableOrder", "signature": "TableOrder getExtractType()", "full_signature": "public TableOrder getExtractType()", "class_method_signature": "CategoryToPieDataset.getExtractType()", "testcase": false, "constructor": false}, {"identifier": "getExtractIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExtractIndex()", "full_signature": "public int getExtractIndex()", "class_method_signature": "CategoryToPieDataset.getExtractIndex()", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getItemCount()", "full_signature": "public int getItemCount()", "class_method_signature": "CategoryToPieDataset.getItemCount()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int item)", "modifiers": "public", "return": "Number", "signature": "Number getValue(int item)", "full_signature": "public Number getValue(int item)", "class_method_signature": "CategoryToPieDataset.getValue(int item)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(int index)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getKey(int index)", "full_signature": "public Comparable getKey(int index)", "class_method_signature": "CategoryToPieDataset.getKey(int index)", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "(Comparable key)", "modifiers": "public", "return": "int", "signature": "int getIndex(Comparable key)", "full_signature": "public int getIndex(Comparable key)", "class_method_signature": "CategoryToPieDataset.getIndex(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getKeys()", "full_signature": "public List getKeys()", "class_method_signature": "CategoryToPieDataset.getKeys()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Comparable key)", "modifiers": "public", "return": "Number", "signature": "Number getValue(Comparable key)", "full_signature": "public Number getValue(Comparable key)", "class_method_signature": "CategoryToPieDataset.getValue(Comparable key)", "testcase": false, "constructor": false}, {"identifier": "datasetChanged", "parameters": "(DatasetChangeEvent event)", "modifiers": "public", "return": "void", "signature": "void datasetChanged(DatasetChangeEvent event)", "full_signature": "public void datasetChanged(DatasetChangeEvent event)", "class_method_signature": "CategoryToPieDataset.datasetChanged(DatasetChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "CategoryToPieDataset.equals(Object obj)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/category/CategoryToPieDataset.java"}, "focal_method": {"identifier": "getValue", "parameters": "(int item)", "modifiers": "public", "return": "Number", "body": "public Number getValue(int item) {\n        Number result = null;\n        if (item < 0 || item >= getItemCount()) {\n            // this will include the case where the underlying dataset is null\n            throw new IndexOutOfBoundsException(\n                    \"The 'item' index is out of bounds.\");\n        }\n        if (this.extract == TableOrder.BY_ROW) {\n            result = this.source.getValue(this.index, item);\n        }\n        else if (this.extract == TableOrder.BY_COLUMN) {\n            result = this.source.getValue(item, this.index);\n        }\n        return result;\n    }", "signature": "Number getValue(int item)", "full_signature": "public Number getValue(int item)", "class_method_signature": "CategoryToPieDataset.getValue(int item)", "testcase": false, "constructor": false, "invocations": ["getItemCount", "getValue", "getValue"]}, "repository": {"repo_id": "Chart_1_buggy"}}