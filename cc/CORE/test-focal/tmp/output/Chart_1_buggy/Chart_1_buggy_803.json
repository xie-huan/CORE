{"test_class": {"identifier": "ComparableObjectSeriesTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/junit/ComparableObjectSeriesTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        MyComparableObjectSeries s1 = new MyComparableObjectSeries(\"A\");\n        MyComparableObjectSeries s2 = new MyComparableObjectSeries(\"A\");\n        assertTrue(s1.equals(s2));\n        assertTrue(s2.equals(s1));\n\n        // key\n        s1 = new MyComparableObjectSeries(\"B\");\n        assertFalse(s1.equals(s2));\n        s2 = new MyComparableObjectSeries(\"B\");\n        assertTrue(s1.equals(s2));\n\n        // autoSort\n        s1 = new MyComparableObjectSeries(\"B\", false, true);\n        assertFalse(s1.equals(s2));\n        s2 = new MyComparableObjectSeries(\"B\", false, true);\n        assertTrue(s1.equals(s2));\n\n        // allowDuplicateXValues\n        s1 = new MyComparableObjectSeries(\"B\", false, false);\n        assertFalse(s1.equals(s2));\n        s2 = new MyComparableObjectSeries(\"B\", false, false);\n        assertTrue(s1.equals(s2));\n\n        // add a value\n        s1.add(new Integer(1), \"ABC\");\n        assertFalse(s1.equals(s2));\n        s2.add(new Integer(1), \"ABC\");\n        assertTrue(s1.equals(s2));\n\n        // add another value\n        s1.add(new Integer(0), \"DEF\");\n        assertFalse(s1.equals(s2));\n        s2.add(new Integer(0), \"DEF\");\n        assertTrue(s1.equals(s2));\n\n        // remove an item\n        s1.remove(new Integer(1));\n        assertFalse(s1.equals(s2));\n        s2.remove(new Integer(1));\n        assertTrue(s1.equals(s2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "ComparableObjectSeriesTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "add", "assertFalse", "equals", "add", "assertTrue", "equals", "add", "assertFalse", "equals", "add", "assertTrue", "equals", "remove", "assertFalse", "equals", "remove", "assertTrue", "equals"]}, "focal_class": {"identifier": "ComparableObjectSeries", "superclass": "extends Series", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "protected List data;", "modifier": "protected", "type": "List", "declarator": "data", "var_name": "data"}, {"original_string": "private int maximumItemCount = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "maximumItemCount = Integer.MAX_VALUE", "var_name": "maximumItemCount"}, {"original_string": "private boolean autoSort;", "modifier": "private", "type": "boolean", "declarator": "autoSort", "var_name": "autoSort"}, {"original_string": "private boolean allowDuplicateXValues;", "modifier": "private", "type": "boolean", "declarator": "allowDuplicateXValues", "var_name": "allowDuplicateXValues"}], "methods": [{"identifier": "ComparableObjectSeries", "parameters": "(Comparable key)", "modifiers": "public", "return": "", "signature": " ComparableObjectSeries(Comparable key)", "full_signature": "public  ComparableObjectSeries(Comparable key)", "class_method_signature": "ComparableObjectSeries.ComparableObjectSeries(Comparable key)", "testcase": false, "constructor": true}, {"identifier": "ComparableObjectSeries", "parameters": "(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues)", "modifiers": "public", "return": "", "signature": " ComparableObjectSeries(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues)", "full_signature": "public  ComparableObjectSeries(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues)", "class_method_signature": "ComparableObjectSeries.ComparableObjectSeries(Comparable key, boolean autoSort,\n            boolean allowDuplicateXValues)", "testcase": false, "constructor": true}, {"identifier": "getAutoSort", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoSort()", "full_signature": "public boolean getAutoSort()", "class_method_signature": "ComparableObjectSeries.getAutoSort()", "testcase": false, "constructor": false}, {"identifier": "getAllowDuplicateXValues", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAllowDuplicateXValues()", "full_signature": "public boolean getAllowDuplicateXValues()", "class_method_signature": "ComparableObjectSeries.getAllowDuplicateXValues()", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getItemCount()", "full_signature": "public int getItemCount()", "class_method_signature": "ComparableObjectSeries.getItemCount()", "testcase": false, "constructor": false}, {"identifier": "getMaximumItemCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximumItemCount()", "full_signature": "public int getMaximumItemCount()", "class_method_signature": "ComparableObjectSeries.getMaximumItemCount()", "testcase": false, "constructor": false}, {"identifier": "setMaximumItemCount", "parameters": "(int maximum)", "modifiers": "public", "return": "void", "signature": "void setMaximumItemCount(int maximum)", "full_signature": "public void setMaximumItemCount(int maximum)", "class_method_signature": "ComparableObjectSeries.setMaximumItemCount(int maximum)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Comparable x, Object y)", "modifiers": "protected", "return": "void", "signature": "void add(Comparable x, Object y)", "full_signature": "protected void add(Comparable x, Object y)", "class_method_signature": "ComparableObjectSeries.add(Comparable x, Object y)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Comparable x, Object y, boolean notify)", "modifiers": "protected", "return": "void", "signature": "void add(Comparable x, Object y, boolean notify)", "full_signature": "protected void add(Comparable x, Object y, boolean notify)", "class_method_signature": "ComparableObjectSeries.add(Comparable x, Object y, boolean notify)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ComparableObjectItem item, boolean notify)", "modifiers": "protected", "return": "void", "signature": "void add(ComparableObjectItem item, boolean notify)", "full_signature": "protected void add(ComparableObjectItem item, boolean notify)", "class_method_signature": "ComparableObjectSeries.add(ComparableObjectItem item, boolean notify)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Comparable x)", "modifiers": "public", "return": "int", "signature": "int indexOf(Comparable x)", "full_signature": "public int indexOf(Comparable x)", "class_method_signature": "ComparableObjectSeries.indexOf(Comparable x)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Comparable x, Object y)", "modifiers": "protected", "return": "void", "signature": "void update(Comparable x, Object y)", "full_signature": "protected void update(Comparable x, Object y)", "class_method_signature": "ComparableObjectSeries.update(Comparable x, Object y)", "testcase": false, "constructor": false}, {"identifier": "updateByIndex", "parameters": "(int index, Object y)", "modifiers": "protected", "return": "void", "signature": "void updateByIndex(int index, Object y)", "full_signature": "protected void updateByIndex(int index, Object y)", "class_method_signature": "ComparableObjectSeries.updateByIndex(int index, Object y)", "testcase": false, "constructor": false}, {"identifier": "getDataItem", "parameters": "(int index)", "modifiers": "protected", "return": "ComparableObjectItem", "signature": "ComparableObjectItem getDataItem(int index)", "full_signature": "protected ComparableObjectItem getDataItem(int index)", "class_method_signature": "ComparableObjectSeries.getDataItem(int index)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(int start, int end)", "modifiers": "protected", "return": "void", "signature": "void delete(int start, int end)", "full_signature": "protected void delete(int start, int end)", "class_method_signature": "ComparableObjectSeries.delete(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ComparableObjectSeries.clear()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "protected", "return": "ComparableObjectItem", "signature": "ComparableObjectItem remove(int index)", "full_signature": "protected ComparableObjectItem remove(int index)", "class_method_signature": "ComparableObjectSeries.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Comparable x)", "modifiers": "public", "return": "ComparableObjectItem", "signature": "ComparableObjectItem remove(Comparable x)", "full_signature": "public ComparableObjectItem remove(Comparable x)", "class_method_signature": "ComparableObjectSeries.remove(Comparable x)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "ComparableObjectSeries.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "ComparableObjectSeries.hashCode()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/ComparableObjectSeries.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ComparableObjectSeries)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        ComparableObjectSeries that = (ComparableObjectSeries) obj;\n        if (this.maximumItemCount != that.maximumItemCount) {\n            return false;\n        }\n        if (this.autoSort != that.autoSort) {\n            return false;\n        }\n        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.data, that.data)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "ComparableObjectSeries.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}