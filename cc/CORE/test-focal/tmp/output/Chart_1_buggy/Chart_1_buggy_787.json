{"test_class": {"identifier": "DefaultXYDatasetTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "static final double EPSILON = 0.0000000001;", "modifier": "static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/xy/junit/DefaultXYDatasetTests.java"}, "test_case": {"identifier": "testSerialization", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testSerialization() {\n\n        DefaultXYDataset d1 = new DefaultXYDataset();\n        DefaultXYDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n        // try a dataset with some content...\n        double[] x1 = new double[] {1.0, 2.0, 3.0};\n        double[] y1 = new double[] {4.0, 5.0, 6.0};\n        double[][] data1 = new double[][] {x1, y1};\n        d1.addSeries(\"S1\", data1);\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            d2 = (DefaultXYDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }", "signature": "void testSerialization()", "full_signature": "public void testSerialization()", "class_method_signature": "DefaultXYDatasetTests.testSerialization()", "testcase": true, "constructor": false, "invocations": ["writeObject", "close", "toByteArray", "readObject", "close", "printStackTrace", "assertEquals", "addSeries", "writeObject", "close", "toByteArray", "readObject", "close", "printStackTrace", "assertEquals"]}, "focal_class": {"identifier": "DefaultXYDataset", "superclass": "extends AbstractXYDataset", "interfaces": "implements XYDataset, PublicCloneable", "fields": [{"original_string": "private List seriesKeys;", "modifier": "private", "type": "List", "declarator": "seriesKeys", "var_name": "seriesKeys"}, {"original_string": "private List seriesList;", "modifier": "private", "type": "List", "declarator": "seriesList", "var_name": "seriesList"}], "methods": [{"identifier": "DefaultXYDataset", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultXYDataset()", "full_signature": "public  DefaultXYDataset()", "class_method_signature": "DefaultXYDataset.DefaultXYDataset()", "testcase": false, "constructor": true}, {"identifier": "getSeriesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSeriesCount()", "full_signature": "public int getSeriesCount()", "class_method_signature": "DefaultXYDataset.getSeriesCount()", "testcase": false, "constructor": false}, {"identifier": "getSeriesKey", "parameters": "(int series)", "modifiers": "public", "return": "Comparable", "signature": "Comparable getSeriesKey(int series)", "full_signature": "public Comparable getSeriesKey(int series)", "class_method_signature": "DefaultXYDataset.getSeriesKey(int series)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Comparable seriesKey)", "modifiers": "public", "return": "int", "signature": "int indexOf(Comparable seriesKey)", "full_signature": "public int indexOf(Comparable seriesKey)", "class_method_signature": "DefaultXYDataset.indexOf(Comparable seriesKey)", "testcase": false, "constructor": false}, {"identifier": "getDomainOrder", "parameters": "()", "modifiers": "public", "return": "DomainOrder", "signature": "DomainOrder getDomainOrder()", "full_signature": "public DomainOrder getDomainOrder()", "class_method_signature": "DefaultXYDataset.getDomainOrder()", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "(int series)", "modifiers": "public", "return": "int", "signature": "int getItemCount(int series)", "full_signature": "public int getItemCount(int series)", "class_method_signature": "DefaultXYDataset.getItemCount(int series)", "testcase": false, "constructor": false}, {"identifier": "getXValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getXValue(int series, int item)", "full_signature": "public double getXValue(int series, int item)", "class_method_signature": "DefaultXYDataset.getXValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getX(int series, int item)", "full_signature": "public Number getX(int series, int item)", "class_method_signature": "DefaultXYDataset.getX(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getYValue", "parameters": "(int series, int item)", "modifiers": "public", "return": "double", "signature": "double getYValue(int series, int item)", "full_signature": "public double getYValue(int series, int item)", "class_method_signature": "DefaultXYDataset.getYValue(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(int series, int item)", "modifiers": "public", "return": "Number", "signature": "Number getY(int series, int item)", "full_signature": "public Number getY(int series, int item)", "class_method_signature": "DefaultXYDataset.getY(int series, int item)", "testcase": false, "constructor": false}, {"identifier": "addSeries", "parameters": "(Comparable seriesKey, double[][] data)", "modifiers": "public", "return": "void", "signature": "void addSeries(Comparable seriesKey, double[][] data)", "full_signature": "public void addSeries(Comparable seriesKey, double[][] data)", "class_method_signature": "DefaultXYDataset.addSeries(Comparable seriesKey, double[][] data)", "testcase": false, "constructor": false}, {"identifier": "removeSeries", "parameters": "(Comparable seriesKey)", "modifiers": "public", "return": "void", "signature": "void removeSeries(Comparable seriesKey)", "full_signature": "public void removeSeries(Comparable seriesKey)", "class_method_signature": "DefaultXYDataset.removeSeries(Comparable seriesKey)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DefaultXYDataset.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "DefaultXYDataset.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "DefaultXYDataset.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/xy/DefaultXYDataset.java"}, "focal_method": {"identifier": "addSeries", "parameters": "(Comparable seriesKey, double[][] data)", "modifiers": "public", "return": "void", "body": "public void addSeries(Comparable seriesKey, double[][] data) {\n        if (seriesKey == null) {\n            throw new IllegalArgumentException(\n                    \"The 'seriesKey' cannot be null.\");\n        }\n        if (data == null) {\n            throw new IllegalArgumentException(\"The 'data' is null.\");\n        }\n        if (data.length != 2) {\n            throw new IllegalArgumentException(\n                    \"The 'data' array must have length == 2.\");\n        }\n        if (data[0].length != data[1].length) {\n            throw new IllegalArgumentException(\n                \"The 'data' array must contain two arrays with equal length.\");\n        }\n        int seriesIndex = indexOf(seriesKey);\n        if (seriesIndex == -1) {  // add a new series\n            this.seriesKeys.add(seriesKey);\n            this.seriesList.add(data);\n        }\n        else {  // replace an existing series\n            this.seriesList.remove(seriesIndex);\n            this.seriesList.add(seriesIndex, data);\n        }\n        fireDatasetChanged(new DatasetChangeInfo());\n        //TODO: fill in real change info\n    }", "signature": "void addSeries(Comparable seriesKey, double[][] data)", "full_signature": "public void addSeries(Comparable seriesKey, double[][] data)", "class_method_signature": "DefaultXYDataset.addSeries(Comparable seriesKey, double[][] data)", "testcase": false, "constructor": false, "invocations": ["indexOf", "add", "add", "remove", "add", "fireDatasetChanged"]}, "repository": {"repo_id": "Chart_1_buggy"}}