{"test_class": {"identifier": "DateTickUnitTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/DateTickUnitTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        DateTickUnit t1 = new DateTickUnit(DateTickUnitType.DAY, 1);\n        DateTickUnit t2 = new DateTickUnit(DateTickUnitType.DAY, 1);\n        assertTrue(t1.equals(t2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "DateTickUnitTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals"]}, "focal_class": {"identifier": "DateTickUnit", "superclass": "extends TickUnit", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -7289292157229621901L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7289292157229621901L", "var_name": "serialVersionUID"}, {"original_string": "private DateTickUnitType unitType;", "modifier": "private", "type": "DateTickUnitType", "declarator": "unitType", "var_name": "unitType"}, {"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "private DateTickUnitType rollUnitType;", "modifier": "private", "type": "DateTickUnitType", "declarator": "rollUnitType", "var_name": "rollUnitType"}, {"original_string": "private int rollCount;", "modifier": "private", "type": "int", "declarator": "rollCount", "var_name": "rollCount"}, {"original_string": "private DateFormat formatter;", "modifier": "private", "type": "DateFormat", "declarator": "formatter", "var_name": "formatter"}], "methods": [{"identifier": "DateTickUnit", "parameters": "(DateTickUnitType unitType, int multiple)", "modifiers": "public", "return": "", "signature": " DateTickUnit(DateTickUnitType unitType, int multiple)", "full_signature": "public  DateTickUnit(DateTickUnitType unitType, int multiple)", "class_method_signature": "DateTickUnit.DateTickUnit(DateTickUnitType unitType, int multiple)", "testcase": false, "constructor": true}, {"identifier": "DateTickUnit", "parameters": "(DateTickUnitType unitType, int multiple,\n            DateFormat formatter)", "modifiers": "public", "return": "", "signature": " DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateFormat formatter)", "full_signature": "public  DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateFormat formatter)", "class_method_signature": "DateTickUnit.DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateFormat formatter)", "testcase": false, "constructor": true}, {"identifier": "DateTickUnit", "parameters": "(DateTickUnitType unitType, int multiple,\n            DateTickUnitType rollUnitType, int rollMultiple,\n            DateFormat formatter)", "modifiers": "public", "return": "", "signature": " DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateTickUnitType rollUnitType, int rollMultiple,\n            DateFormat formatter)", "full_signature": "public  DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateTickUnitType rollUnitType, int rollMultiple,\n            DateFormat formatter)", "class_method_signature": "DateTickUnit.DateTickUnit(DateTickUnitType unitType, int multiple,\n            DateTickUnitType rollUnitType, int rollMultiple,\n            DateFormat formatter)", "testcase": false, "constructor": true}, {"identifier": "getUnitType", "parameters": "()", "modifiers": "public", "return": "DateTickUnitType", "signature": "DateTickUnitType getUnitType()", "full_signature": "public DateTickUnitType getUnitType()", "class_method_signature": "DateTickUnit.getUnitType()", "testcase": false, "constructor": false}, {"identifier": "getMultiple", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMultiple()", "full_signature": "public int getMultiple()", "class_method_signature": "DateTickUnit.getMultiple()", "testcase": false, "constructor": false}, {"identifier": "getRollUnitType", "parameters": "()", "modifiers": "public", "return": "DateTickUnitType", "signature": "DateTickUnitType getRollUnitType()", "full_signature": "public DateTickUnitType getRollUnitType()", "class_method_signature": "DateTickUnit.getRollUnitType()", "testcase": false, "constructor": false}, {"identifier": "getRollMultiple", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRollMultiple()", "full_signature": "public int getRollMultiple()", "class_method_signature": "DateTickUnit.getRollMultiple()", "testcase": false, "constructor": false}, {"identifier": "valueToString", "parameters": "(double milliseconds)", "modifiers": "public", "return": "String", "signature": "String valueToString(double milliseconds)", "full_signature": "public String valueToString(double milliseconds)", "class_method_signature": "DateTickUnit.valueToString(double milliseconds)", "testcase": false, "constructor": false}, {"identifier": "dateToString", "parameters": "(Date date)", "modifiers": "public", "return": "String", "signature": "String dateToString(Date date)", "full_signature": "public String dateToString(Date date)", "class_method_signature": "DateTickUnit.dateToString(Date date)", "testcase": false, "constructor": false}, {"identifier": "addToDate", "parameters": "(Date base, TimeZone zone)", "modifiers": "public", "return": "Date", "signature": "Date addToDate(Date base, TimeZone zone)", "full_signature": "public Date addToDate(Date base, TimeZone zone)", "class_method_signature": "DateTickUnit.addToDate(Date base, TimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "rollDate", "parameters": "(Date base)", "modifiers": "public", "return": "Date", "signature": "Date rollDate(Date base)", "full_signature": "public Date rollDate(Date base)", "class_method_signature": "DateTickUnit.rollDate(Date base)", "testcase": false, "constructor": false}, {"identifier": "rollDate", "parameters": "(Date base, TimeZone zone)", "modifiers": "public", "return": "Date", "signature": "Date rollDate(Date base, TimeZone zone)", "full_signature": "public Date rollDate(Date base, TimeZone zone)", "class_method_signature": "DateTickUnit.rollDate(Date base, TimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "getCalendarField", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCalendarField()", "full_signature": "public int getCalendarField()", "class_method_signature": "DateTickUnit.getCalendarField()", "testcase": false, "constructor": false}, {"identifier": "getMillisecondCount", "parameters": "(DateTickUnitType unit, int count)", "modifiers": "private static", "return": "long", "signature": "long getMillisecondCount(DateTickUnitType unit, int count)", "full_signature": "private static long getMillisecondCount(DateTickUnitType unit, int count)", "class_method_signature": "DateTickUnit.getMillisecondCount(DateTickUnitType unit, int count)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(DateFormat formatter)", "modifiers": "private static", "return": "DateFormat", "signature": "DateFormat notNull(DateFormat formatter)", "full_signature": "private static DateFormat notNull(DateFormat formatter)", "class_method_signature": "DateTickUnit.notNull(DateFormat formatter)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DateTickUnit.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "DateTickUnit.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "DateTickUnit.toString()", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/DateTickUnit.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof DateTickUnit)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        DateTickUnit that = (DateTickUnit) obj;\n        if (!(this.unitType.equals(that.unitType))) {\n            return false;\n        }\n        if (this.count != that.count) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.formatter, that.formatter)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "DateTickUnit.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}