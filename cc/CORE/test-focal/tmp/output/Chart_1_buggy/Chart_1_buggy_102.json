{"test_class": {"identifier": "ShapeUtilitiesTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java"}, "test_case": {"identifier": "testEqualShapes", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEqualShapes() {\n\n        // NULL\n        Shape s1 = null;\n        Shape s2 = null;\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // LINE2D\n        s1 = new Line2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Line2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n        assertFalse(s1.equals(s2));\n\n        // RECTANGLE2D\n        s1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n        assertTrue(s1.equals(s2));  // Rectangle2D overrides equals()\n\n        // ELLIPSE2D\n        s1 = new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // ARC2D\n        s1 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE);\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        s2 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE);\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // POLYGON\n        Polygon p1 = new Polygon(new int[] {0, 1, 0}, new int[] {1, 0, 1}, 3);\n        Polygon p2 = new Polygon(new int[] {1, 1, 0}, new int[] {1, 0, 1}, 3);\n        s1 = p1;\n        s2 = p2;\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        p2 = new Polygon(new int[] {0, 1, 0}, new int[] {1, 0, 1}, 3);\n        s2 = p2;\n        assertTrue(ShapeUtilities.equal(s1, s2));\n\n        // GENERALPATH\n        GeneralPath g1 = new GeneralPath();\n        g1.moveTo(1.0f, 2.0f);\n        g1.lineTo(3.0f, 4.0f);\n        g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g1.closePath();\n        s1 = g1;\n        assertFalse(ShapeUtilities.equal(s1, s2));\n        GeneralPath g2 = new GeneralPath();\n        g2.moveTo(1.0f, 2.0f);\n        g2.lineTo(3.0f, 4.0f);\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n        g2.closePath();\n        s2 = g2;\n        assertTrue(ShapeUtilities.equal(s1, s2));\n        assertFalse(s1.equals(s2));\n\n    }", "signature": "void testEqualShapes()", "full_signature": "public void testEqualShapes()", "class_method_signature": "ShapeUtilitiesTests.testEqualShapes()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equal", "assertFalse", "equal", "assertTrue", "equal", "assertFalse", "equals", "assertFalse", "equal", "assertTrue", "equal", "assertTrue", "equals", "assertFalse", "equal", "assertTrue", "equal", "assertFalse", "equal", "assertTrue", "equal", "assertFalse", "equal", "assertTrue", "equal", "moveTo", "lineTo", "curveTo", "quadTo", "closePath", "assertFalse", "equal", "moveTo", "lineTo", "curveTo", "quadTo", "closePath", "assertTrue", "equal", "assertFalse", "equals"]}, "focal_class": {"identifier": "ShapeUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float SQRT2 = (float) Math.pow(2.0, 0.5);", "modifier": "private static final", "type": "float", "declarator": "SQRT2 = (float) Math.pow(2.0, 0.5)", "var_name": "SQRT2"}], "methods": [{"identifier": "ShapeUtilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " ShapeUtilities()", "full_signature": "private  ShapeUtilities()", "class_method_signature": "ShapeUtilities.ShapeUtilities()", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "(Shape shape)", "modifiers": "public static", "return": "Shape", "signature": "Shape clone(Shape shape)", "full_signature": "public static Shape clone(Shape shape)", "class_method_signature": "ShapeUtilities.clone(Shape shape)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Shape s1, Shape s2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(Shape s1, Shape s2)", "full_signature": "public static boolean equal(Shape s1, Shape s2)", "class_method_signature": "ShapeUtilities.equal(Shape s1, Shape s2)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Line2D l1, Line2D l2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(Line2D l1, Line2D l2)", "full_signature": "public static boolean equal(Line2D l1, Line2D l2)", "class_method_signature": "ShapeUtilities.equal(Line2D l1, Line2D l2)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Ellipse2D e1, Ellipse2D e2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(Ellipse2D e1, Ellipse2D e2)", "full_signature": "public static boolean equal(Ellipse2D e1, Ellipse2D e2)", "class_method_signature": "ShapeUtilities.equal(Ellipse2D e1, Ellipse2D e2)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Arc2D a1, Arc2D a2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(Arc2D a1, Arc2D a2)", "full_signature": "public static boolean equal(Arc2D a1, Arc2D a2)", "class_method_signature": "ShapeUtilities.equal(Arc2D a1, Arc2D a2)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Polygon p1, Polygon p2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(Polygon p1, Polygon p2)", "full_signature": "public static boolean equal(Polygon p1, Polygon p2)", "class_method_signature": "ShapeUtilities.equal(Polygon p1, Polygon p2)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(GeneralPath p1, GeneralPath p2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(GeneralPath p1, GeneralPath p2)", "full_signature": "public static boolean equal(GeneralPath p1, GeneralPath p2)", "class_method_signature": "ShapeUtilities.equal(GeneralPath p1, GeneralPath p2)", "testcase": false, "constructor": false}, {"identifier": "createTranslatedShape", "parameters": "(Shape shape,\n                                              double transX,\n                                              double transY)", "modifiers": "public static", "return": "Shape", "signature": "Shape createTranslatedShape(Shape shape,\n                                              double transX,\n                                              double transY)", "full_signature": "public static Shape createTranslatedShape(Shape shape,\n                                              double transX,\n                                              double transY)", "class_method_signature": "ShapeUtilities.createTranslatedShape(Shape shape,\n                                              double transX,\n                                              double transY)", "testcase": false, "constructor": false}, {"identifier": "createTranslatedShape", "parameters": "(Shape shape,\n                                              RectangleAnchor anchor,\n                                              double locationX,\n                                              double locationY)", "modifiers": "public static", "return": "Shape", "signature": "Shape createTranslatedShape(Shape shape,\n                                              RectangleAnchor anchor,\n                                              double locationX,\n                                              double locationY)", "full_signature": "public static Shape createTranslatedShape(Shape shape,\n                                              RectangleAnchor anchor,\n                                              double locationX,\n                                              double locationY)", "class_method_signature": "ShapeUtilities.createTranslatedShape(Shape shape,\n                                              RectangleAnchor anchor,\n                                              double locationX,\n                                              double locationY)", "testcase": false, "constructor": false}, {"identifier": "rotateShape", "parameters": "(Shape base, double angle,\n                                    float x, float y)", "modifiers": "public static", "return": "Shape", "signature": "Shape rotateShape(Shape base, double angle,\n                                    float x, float y)", "full_signature": "public static Shape rotateShape(Shape base, double angle,\n                                    float x, float y)", "class_method_signature": "ShapeUtilities.rotateShape(Shape base, double angle,\n                                    float x, float y)", "testcase": false, "constructor": false}, {"identifier": "drawRotatedShape", "parameters": "(Graphics2D g2, Shape shape,\n                                        double angle, float x, float y)", "modifiers": "public static", "return": "void", "signature": "void drawRotatedShape(Graphics2D g2, Shape shape,\n                                        double angle, float x, float y)", "full_signature": "public static void drawRotatedShape(Graphics2D g2, Shape shape,\n                                        double angle, float x, float y)", "class_method_signature": "ShapeUtilities.drawRotatedShape(Graphics2D g2, Shape shape,\n                                        double angle, float x, float y)", "testcase": false, "constructor": false}, {"identifier": "createDiagonalCross", "parameters": "(float l, float t)", "modifiers": "public static", "return": "Shape", "signature": "Shape createDiagonalCross(float l, float t)", "full_signature": "public static Shape createDiagonalCross(float l, float t)", "class_method_signature": "ShapeUtilities.createDiagonalCross(float l, float t)", "testcase": false, "constructor": false}, {"identifier": "createRegularCross", "parameters": "(float l, float t)", "modifiers": "public static", "return": "Shape", "signature": "Shape createRegularCross(float l, float t)", "full_signature": "public static Shape createRegularCross(float l, float t)", "class_method_signature": "ShapeUtilities.createRegularCross(float l, float t)", "testcase": false, "constructor": false}, {"identifier": "createDiamond", "parameters": "(float s)", "modifiers": "public static", "return": "Shape", "signature": "Shape createDiamond(float s)", "full_signature": "public static Shape createDiamond(float s)", "class_method_signature": "ShapeUtilities.createDiamond(float s)", "testcase": false, "constructor": false}, {"identifier": "createUpTriangle", "parameters": "(float s)", "modifiers": "public static", "return": "Shape", "signature": "Shape createUpTriangle(float s)", "full_signature": "public static Shape createUpTriangle(float s)", "class_method_signature": "ShapeUtilities.createUpTriangle(float s)", "testcase": false, "constructor": false}, {"identifier": "createDownTriangle", "parameters": "(float s)", "modifiers": "public static", "return": "Shape", "signature": "Shape createDownTriangle(float s)", "full_signature": "public static Shape createDownTriangle(float s)", "class_method_signature": "ShapeUtilities.createDownTriangle(float s)", "testcase": false, "constructor": false}, {"identifier": "createLineRegion", "parameters": "(Line2D line, float width)", "modifiers": "public static", "return": "Shape", "signature": "Shape createLineRegion(Line2D line, float width)", "full_signature": "public static Shape createLineRegion(Line2D line, float width)", "class_method_signature": "ShapeUtilities.createLineRegion(Line2D line, float width)", "testcase": false, "constructor": false}, {"identifier": "getPointInRectangle", "parameters": "(double x, double y,\n                                              Rectangle2D area)", "modifiers": "public static", "return": "Point2D", "signature": "Point2D getPointInRectangle(double x, double y,\n                                              Rectangle2D area)", "full_signature": "public static Point2D getPointInRectangle(double x, double y,\n                                              Rectangle2D area)", "class_method_signature": "ShapeUtilities.getPointInRectangle(double x, double y,\n                                              Rectangle2D area)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Rectangle2D rect1, Rectangle2D rect2)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Rectangle2D rect1, Rectangle2D rect2)", "full_signature": "public static boolean contains(Rectangle2D rect1, Rectangle2D rect2)", "class_method_signature": "ShapeUtilities.contains(Rectangle2D rect1, Rectangle2D rect2)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Rectangle2D rect1, Rectangle2D rect2)", "modifiers": "public static", "return": "boolean", "signature": "boolean intersects(Rectangle2D rect1, Rectangle2D rect2)", "full_signature": "public static boolean intersects(Rectangle2D rect1, Rectangle2D rect2)", "class_method_signature": "ShapeUtilities.intersects(Rectangle2D rect1, Rectangle2D rect2)", "testcase": false, "constructor": false}, {"identifier": "isPointInRect", "parameters": "(double x, double y, Rectangle2D rect)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPointInRect(double x, double y, Rectangle2D rect)", "full_signature": "public static boolean isPointInRect(double x, double y, Rectangle2D rect)", "class_method_signature": "ShapeUtilities.isPointInRect(double x, double y, Rectangle2D rect)", "testcase": false, "constructor": false}, {"identifier": "clipLine", "parameters": "(Line2D line, Rectangle2D rect)", "modifiers": "public static", "return": "boolean", "signature": "boolean clipLine(Line2D line, Rectangle2D rect)", "full_signature": "public static boolean clipLine(Line2D line, Rectangle2D rect)", "class_method_signature": "ShapeUtilities.clipLine(Line2D line, Rectangle2D rect)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/util/ShapeUtilities.java"}, "focal_method": {"identifier": "equal", "parameters": "(Shape s1, Shape s2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equal(Shape s1, Shape s2) {\n        if (s1 instanceof Line2D && s2 instanceof Line2D) {\n            return equal((Line2D) s1, (Line2D) s2);\n        }\n        else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) {\n            return equal((Ellipse2D) s1, (Ellipse2D) s2);\n        }\n        else if (s1 instanceof Arc2D && s2 instanceof Arc2D) {\n            return equal((Arc2D) s1, (Arc2D) s2);\n        }\n        else if (s1 instanceof Polygon && s2 instanceof Polygon) {\n            return equal((Polygon) s1, (Polygon) s2);\n        }\n        else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) {\n            return equal((GeneralPath) s1, (GeneralPath) s2);\n        }\n        else {\n            // this will handle Rectangle2D...\n            return ObjectUtilities.equal(s1, s2);\n        }\n    }", "signature": "boolean equal(Shape s1, Shape s2)", "full_signature": "public static boolean equal(Shape s1, Shape s2)", "class_method_signature": "ShapeUtilities.equal(Shape s1, Shape s2)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equal", "equal", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}