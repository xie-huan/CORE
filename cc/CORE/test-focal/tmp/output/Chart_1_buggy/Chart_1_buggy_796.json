{"test_class": {"identifier": "DataUtilitiesTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.000000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/junit/DataUtilitiesTests.java"}, "test_case": {"identifier": "testCalculateColumnTotal", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testCalculateColumnTotal() {\n        DefaultKeyedValues2D table = new DefaultKeyedValues2D();\n        table.addValue(new Double(1.0), \"R0\", \"C0\");\n        table.addValue(new Double(2.0), \"R0\", \"C1\");\n        table.addValue(new Double(3.0), \"R1\", \"C0\");\n        table.addValue(new Double(4.0), \"R1\", \"C1\");\n        assertEquals(4.0, DataUtilities.calculateColumnTotal(table, 0), EPSILON);\n        assertEquals(6.0, DataUtilities.calculateColumnTotal(table, 1), EPSILON);\n        table.setValue(null, \"R1\", \"C1\");\n        assertEquals(2.0, DataUtilities.calculateColumnTotal(table, 1), EPSILON);\n    }", "signature": "void testCalculateColumnTotal()", "full_signature": "public void testCalculateColumnTotal()", "class_method_signature": "DataUtilitiesTests.testCalculateColumnTotal()", "testcase": true, "constructor": false, "invocations": ["addValue", "addValue", "addValue", "addValue", "assertEquals", "calculateColumnTotal", "assertEquals", "calculateColumnTotal", "setValue", "assertEquals", "calculateColumnTotal"]}, "focal_class": {"identifier": "DataUtilities", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "equal", "parameters": "(double[][] a, double[][] b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equal(double[][] a, double[][] b)", "full_signature": "public static boolean equal(double[][] a, double[][] b)", "class_method_signature": "DataUtilities.equal(double[][] a, double[][] b)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(double[][] source)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] clone(double[][] source)", "full_signature": "public static double[][] clone(double[][] source)", "class_method_signature": "DataUtilities.clone(double[][] source)", "testcase": false, "constructor": false}, {"identifier": "calculateColumnTotal", "parameters": "(Values2D data, int column)", "modifiers": "public static", "return": "double", "signature": "double calculateColumnTotal(Values2D data, int column)", "full_signature": "public static double calculateColumnTotal(Values2D data, int column)", "class_method_signature": "DataUtilities.calculateColumnTotal(Values2D data, int column)", "testcase": false, "constructor": false}, {"identifier": "calculateColumnTotal", "parameters": "(Values2D data, int column,\n             int[] validRows)", "modifiers": "public static", "return": "double", "signature": "double calculateColumnTotal(Values2D data, int column,\n             int[] validRows)", "full_signature": "public static double calculateColumnTotal(Values2D data, int column,\n             int[] validRows)", "class_method_signature": "DataUtilities.calculateColumnTotal(Values2D data, int column,\n             int[] validRows)", "testcase": false, "constructor": false}, {"identifier": "calculateRowTotal", "parameters": "(Values2D data, int row)", "modifiers": "public static", "return": "double", "signature": "double calculateRowTotal(Values2D data, int row)", "full_signature": "public static double calculateRowTotal(Values2D data, int row)", "class_method_signature": "DataUtilities.calculateRowTotal(Values2D data, int row)", "testcase": false, "constructor": false}, {"identifier": "calculateRowTotal", "parameters": "(Values2D data, int row,\n             int[] validCols)", "modifiers": "public static", "return": "double", "signature": "double calculateRowTotal(Values2D data, int row,\n             int[] validCols)", "full_signature": "public static double calculateRowTotal(Values2D data, int row,\n             int[] validCols)", "class_method_signature": "DataUtilities.calculateRowTotal(Values2D data, int row,\n             int[] validCols)", "testcase": false, "constructor": false}, {"identifier": "createNumberArray", "parameters": "(double[] data)", "modifiers": "public static", "return": "Number[]", "signature": "Number[] createNumberArray(double[] data)", "full_signature": "public static Number[] createNumberArray(double[] data)", "class_method_signature": "DataUtilities.createNumberArray(double[] data)", "testcase": false, "constructor": false}, {"identifier": "createNumberArray2D", "parameters": "(double[][] data)", "modifiers": "public static", "return": "Number[][]", "signature": "Number[][] createNumberArray2D(double[][] data)", "full_signature": "public static Number[][] createNumberArray2D(double[][] data)", "class_method_signature": "DataUtilities.createNumberArray2D(double[][] data)", "testcase": false, "constructor": false}, {"identifier": "getCumulativePercentages", "parameters": "(KeyedValues data)", "modifiers": "public static", "return": "KeyedValues", "signature": "KeyedValues getCumulativePercentages(KeyedValues data)", "full_signature": "public static KeyedValues getCumulativePercentages(KeyedValues data)", "class_method_signature": "DataUtilities.getCumulativePercentages(KeyedValues data)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/DataUtilities.java"}, "focal_method": {"identifier": "calculateColumnTotal", "parameters": "(Values2D data, int column)", "modifiers": "public static", "return": "double", "body": "public static double calculateColumnTotal(Values2D data, int column) {\n        if (data == null) {\n            throw new IllegalArgumentException(\"Null 'data' argument.\");\n        }\n        double total = 0.0;\n        int rowCount = data.getRowCount();\n        for (int r = 0; r < rowCount; r++) {\n            Number n = data.getValue(r, column);\n            if (n != null) {\n                total += n.doubleValue();\n            }\n        }\n        return total;\n    }", "signature": "double calculateColumnTotal(Values2D data, int column)", "full_signature": "public static double calculateColumnTotal(Values2D data, int column)", "class_method_signature": "DataUtilities.calculateColumnTotal(Values2D data, int column)", "testcase": false, "constructor": false, "invocations": ["getRowCount", "getValue", "doubleValue"]}, "repository": {"repo_id": "Chart_1_buggy"}}