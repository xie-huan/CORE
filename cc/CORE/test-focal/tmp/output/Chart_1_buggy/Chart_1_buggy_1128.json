{"test_class": {"identifier": "StatisticsTests", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "static final double EPSILON = 0.0000000001;", "modifier": "static final", "type": "double", "declarator": "EPSILON = 0.0000000001", "var_name": "EPSILON"}], "file": "tests/org/jfree/data/statistics/junit/StatisticsTests.java"}, "test_case": {"identifier": "testCalculateMedian5", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testCalculateMedian5() {\n        List values = new ArrayList();\n        values.add(new Double(11.228692993861783));\n        values.add(new Double(11.30823353859889));\n        values.add(new Double(11.75312904769314));\n        values.add(new Double(11.825102897465314));\n        values.add(new Double(10.184252778401783));\n        values.add(new Double(12.207951828057766));\n        values.add(new Double(10.68841994040566));\n        values.add(new Double(12.099522004479438));\n        values.add(new Double(11.508874945056881));\n        values.add(new Double(12.052517729558513));\n        values.add(new Double(12.401481645578734));\n        values.add(new Double(12.185377793028543));\n        values.add(new Double(10.666372951930315));\n        values.add(new Double(11.680978041499548));\n        values.add(new Double(11.06528277406718));\n        values.add(new Double(11.36876492904596));\n        values.add(new Double(11.927565516175939));\n        values.add(new Double(11.39307785978655));\n        values.add(new Double(11.989603679523857));\n        values.add(new Double(12.009834360354864));\n        values.add(new Double(10.653351822461559));\n        values.add(new Double(11.851776254376754));\n        values.add(new Double(11.045441544755946));\n        values.add(new Double(11.993674040560624));\n        values.add(new Double(12.898219965238944));\n        values.add(new Double(11.97095782819647));\n        values.add(new Double(11.73234406745488));\n        values.add(new Double(11.649006017243991));\n        values.add(new Double(12.20549704915365));\n        values.add(new Double(11.799723639384919));\n        values.add(new Double(11.896208658005628));\n        values.add(new Double(12.164149111823424));\n        values.add(new Double(12.042795103513766));\n        values.add(new Double(12.114839532596426));\n        values.add(new Double(12.166609097075824));\n        values.add(new Double(12.183017546225935));\n        values.add(new Double(11.622009125845342));\n        values.add(new Double(11.289365786738633));\n        values.add(new Double(12.462984323671568));\n        values.add(new Double(11.573494921030598));\n        values.add(new Double(10.862867940485804));\n        values.add(new Double(12.018186939664872));\n        values.add(new Double(10.418046849313018));\n        values.add(new Double(11.326344465881341));\n        double median = Statistics.calculateMedian(values, true);\n        assertEquals(11.812413268425116, median, 0.000001);\n        Collections.sort(values);\n        double median2 = Statistics.calculateMedian(values, false);\n        assertEquals(11.812413268425116, median2, 0.000001);\n    }", "signature": "void testCalculateMedian5()", "full_signature": "public void testCalculateMedian5()", "class_method_signature": "StatisticsTests.testCalculateMedian5()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "calculateMedian", "assertEquals", "sort", "calculateMedian", "assertEquals"]}, "focal_class": {"identifier": "Statistics", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculateMean", "parameters": "(Number[] values)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Number[] values)", "full_signature": "public static double calculateMean(Number[] values)", "class_method_signature": "Statistics.calculateMean(Number[] values)", "testcase": false, "constructor": false}, {"identifier": "calculateMean", "parameters": "(Number[] values,\n            boolean includeNullAndNaN)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Number[] values,\n            boolean includeNullAndNaN)", "full_signature": "public static double calculateMean(Number[] values,\n            boolean includeNullAndNaN)", "class_method_signature": "Statistics.calculateMean(Number[] values,\n            boolean includeNullAndNaN)", "testcase": false, "constructor": false}, {"identifier": "calculateMean", "parameters": "(Collection values)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Collection values)", "full_signature": "public static double calculateMean(Collection values)", "class_method_signature": "Statistics.calculateMean(Collection values)", "testcase": false, "constructor": false}, {"identifier": "calculateMean", "parameters": "(Collection values,\n            boolean includeNullAndNaN)", "modifiers": "public static", "return": "double", "signature": "double calculateMean(Collection values,\n            boolean includeNullAndNaN)", "full_signature": "public static double calculateMean(Collection values,\n            boolean includeNullAndNaN)", "class_method_signature": "Statistics.calculateMean(Collection values,\n            boolean includeNullAndNaN)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values)", "full_signature": "public static double calculateMedian(List values)", "class_method_signature": "Statistics.calculateMedian(List values)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values, boolean copyAndSort)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values, boolean copyAndSort)", "full_signature": "public static double calculateMedian(List values, boolean copyAndSort)", "class_method_signature": "Statistics.calculateMedian(List values, boolean copyAndSort)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values, int start, int end)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values, int start, int end)", "full_signature": "public static double calculateMedian(List values, int start, int end)", "class_method_signature": "Statistics.calculateMedian(List values, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "calculateMedian", "parameters": "(List values, int start, int end,\n                                         boolean copyAndSort)", "modifiers": "public static", "return": "double", "signature": "double calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort)", "full_signature": "public static double calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort)", "class_method_signature": "Statistics.calculateMedian(List values, int start, int end,\n                                         boolean copyAndSort)", "testcase": false, "constructor": false}, {"identifier": "getStdDev", "parameters": "(Number[] data)", "modifiers": "public static", "return": "double", "signature": "double getStdDev(Number[] data)", "full_signature": "public static double getStdDev(Number[] data)", "class_method_signature": "Statistics.getStdDev(Number[] data)", "testcase": false, "constructor": false}, {"identifier": "getLinearFit", "parameters": "(Number[] xData, Number[] yData)", "modifiers": "public static", "return": "double[]", "signature": "double[] getLinearFit(Number[] xData, Number[] yData)", "full_signature": "public static double[] getLinearFit(Number[] xData, Number[] yData)", "class_method_signature": "Statistics.getLinearFit(Number[] xData, Number[] yData)", "testcase": false, "constructor": false}, {"identifier": "getSlope", "parameters": "(Number[] xData, Number[] yData)", "modifiers": "public static", "return": "double", "signature": "double getSlope(Number[] xData, Number[] yData)", "full_signature": "public static double getSlope(Number[] xData, Number[] yData)", "class_method_signature": "Statistics.getSlope(Number[] xData, Number[] yData)", "testcase": false, "constructor": false}, {"identifier": "getCorrelation", "parameters": "(Number[] data1, Number[] data2)", "modifiers": "public static", "return": "double", "signature": "double getCorrelation(Number[] data1, Number[] data2)", "full_signature": "public static double getCorrelation(Number[] data1, Number[] data2)", "class_method_signature": "Statistics.getCorrelation(Number[] data1, Number[] data2)", "testcase": false, "constructor": false}, {"identifier": "getMovingAverage", "parameters": "(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] getMovingAverage(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "full_signature": "public static double[][] getMovingAverage(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "class_method_signature": "Statistics.getMovingAverage(Number[] xData,\n                                              Number[] yData,\n                                              int period)", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/statistics/Statistics.java"}, "focal_method": {"identifier": "calculateMedian", "parameters": "(List values)", "modifiers": "public static", "return": "double", "body": "public static double calculateMedian(List values) {\n        return calculateMedian(values, true);\n    }", "signature": "double calculateMedian(List values)", "full_signature": "public static double calculateMedian(List values)", "class_method_signature": "Statistics.calculateMedian(List values)", "testcase": false, "constructor": false, "invocations": ["calculateMedian"]}, "repository": {"repo_id": "Chart_1_buggy"}}