{"test_class": {"identifier": "MarkerTests", "superclass": "extends TestCase", "interfaces": "implements MarkerChangeListener", "fields": [{"original_string": "MarkerChangeEvent lastEvent;", "modifier": "", "type": "MarkerChangeEvent", "declarator": "lastEvent", "var_name": "lastEvent"}, {"original_string": "private static final float EPSILON = 0.000000001f;", "modifier": "private static final", "type": "float", "declarator": "EPSILON = 0.000000001f", "var_name": "EPSILON"}], "file": "tests/org/jfree/chart/plot/junit/MarkerTests.java"}, "test_case": {"identifier": "testListenersWithCategoryPlot", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testListenersWithCategoryPlot() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryMarker marker1 = new CategoryMarker(\"X\");\n        ValueMarker marker2 = new ValueMarker(1.0);\n        plot.addDomainMarker(marker1);\n        plot.addRangeMarker(marker2);\n        EventListener[] listeners1 = marker1.getListeners(\n                MarkerChangeListener.class);\n        assertTrue(Arrays.asList(listeners1).contains(plot));\n        EventListener[] listeners2 = marker1.getListeners(\n                MarkerChangeListener.class);\n        assertTrue(Arrays.asList(listeners2).contains(plot));\n        plot.clearDomainMarkers();\n        plot.clearRangeMarkers();\n        listeners1 = marker1.getListeners(MarkerChangeListener.class);\n        assertFalse(Arrays.asList(listeners1).contains(plot));\n        listeners2 = marker1.getListeners(MarkerChangeListener.class);\n        assertFalse(Arrays.asList(listeners2).contains(plot));\n    }", "signature": "void testListenersWithCategoryPlot()", "full_signature": "public void testListenersWithCategoryPlot()", "class_method_signature": "MarkerTests.testListenersWithCategoryPlot()", "testcase": true, "constructor": false, "invocations": ["addDomainMarker", "addRangeMarker", "getListeners", "assertTrue", "contains", "asList", "getListeners", "assertTrue", "contains", "asList", "clearDomainMarkers", "clearRangeMarkers", "getListeners", "assertFalse", "contains", "asList", "getListeners", "assertFalse", "contains", "asList"]}, "focal_class": {"identifier": "Marker", "superclass": "", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -734389651405327166L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -734389651405327166L", "var_name": "serialVersionUID"}, {"original_string": "private transient Paint paint;", "modifier": "private transient", "type": "Paint", "declarator": "paint", "var_name": "paint"}, {"original_string": "private transient Stroke stroke;", "modifier": "private transient", "type": "Stroke", "declarator": "stroke", "var_name": "stroke"}, {"original_string": "private transient Paint outlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "outlinePaint", "var_name": "outlinePaint"}, {"original_string": "private transient Stroke outlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "outlineStroke", "var_name": "outlineStroke"}, {"original_string": "private float alpha;", "modifier": "private", "type": "float", "declarator": "alpha", "var_name": "alpha"}, {"original_string": "private String label = null;", "modifier": "private", "type": "String", "declarator": "label = null", "var_name": "label"}, {"original_string": "private Font labelFont;", "modifier": "private", "type": "Font", "declarator": "labelFont", "var_name": "labelFont"}, {"original_string": "private transient Paint labelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelPaint", "var_name": "labelPaint"}, {"original_string": "private RectangleAnchor labelAnchor;", "modifier": "private", "type": "RectangleAnchor", "declarator": "labelAnchor", "var_name": "labelAnchor"}, {"original_string": "private TextAnchor labelTextAnchor;", "modifier": "private", "type": "TextAnchor", "declarator": "labelTextAnchor", "var_name": "labelTextAnchor"}, {"original_string": "private RectangleInsets labelOffset;", "modifier": "private", "type": "RectangleInsets", "declarator": "labelOffset", "var_name": "labelOffset"}, {"original_string": "private LengthAdjustmentType labelOffsetType;", "modifier": "private", "type": "LengthAdjustmentType", "declarator": "labelOffsetType", "var_name": "labelOffsetType"}, {"original_string": "private transient EventListenerList listenerList;", "modifier": "private transient", "type": "EventListenerList", "declarator": "listenerList", "var_name": "listenerList"}], "methods": [{"identifier": "Marker", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Marker()", "full_signature": "protected  Marker()", "class_method_signature": "Marker.Marker()", "testcase": false, "constructor": true}, {"identifier": "Marker", "parameters": "(Paint paint)", "modifiers": "protected", "return": "", "signature": " Marker(Paint paint)", "full_signature": "protected  Marker(Paint paint)", "class_method_signature": "Marker.Marker(Paint paint)", "testcase": false, "constructor": true}, {"identifier": "Marker", "parameters": "(Paint paint, Stroke stroke,\n                     Paint outlinePaint, Stroke outlineStroke,\n                     float alpha)", "modifiers": "protected", "return": "", "signature": " Marker(Paint paint, Stroke stroke,\n                     Paint outlinePaint, Stroke outlineStroke,\n                     float alpha)", "full_signature": "protected  Marker(Paint paint, Stroke stroke,\n                     Paint outlinePaint, Stroke outlineStroke,\n                     float alpha)", "class_method_signature": "Marker.Marker(Paint paint, Stroke stroke,\n                     Paint outlinePaint, Stroke outlineStroke,\n                     float alpha)", "testcase": false, "constructor": true}, {"identifier": "getPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getPaint()", "full_signature": "public Paint getPaint()", "class_method_signature": "Marker.getPaint()", "testcase": false, "constructor": false}, {"identifier": "setPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setPaint(Paint paint)", "full_signature": "public void setPaint(Paint paint)", "class_method_signature": "Marker.setPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getStroke()", "full_signature": "public Stroke getStroke()", "class_method_signature": "Marker.getStroke()", "testcase": false, "constructor": false}, {"identifier": "setStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setStroke(Stroke stroke)", "full_signature": "public void setStroke(Stroke stroke)", "class_method_signature": "Marker.setStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getOutlinePaint()", "full_signature": "public Paint getOutlinePaint()", "class_method_signature": "Marker.getOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setOutlinePaint(Paint paint)", "full_signature": "public void setOutlinePaint(Paint paint)", "class_method_signature": "Marker.setOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getOutlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getOutlineStroke()", "full_signature": "public Stroke getOutlineStroke()", "class_method_signature": "Marker.getOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setOutlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setOutlineStroke(Stroke stroke)", "full_signature": "public void setOutlineStroke(Stroke stroke)", "class_method_signature": "Marker.setOutlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getAlpha", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getAlpha()", "full_signature": "public float getAlpha()", "class_method_signature": "Marker.getAlpha()", "testcase": false, "constructor": false}, {"identifier": "setAlpha", "parameters": "(float alpha)", "modifiers": "public", "return": "void", "signature": "void setAlpha(float alpha)", "full_signature": "public void setAlpha(float alpha)", "class_method_signature": "Marker.setAlpha(float alpha)", "testcase": false, "constructor": false}, {"identifier": "getLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLabel()", "full_signature": "public String getLabel()", "class_method_signature": "Marker.getLabel()", "testcase": false, "constructor": false}, {"identifier": "setLabel", "parameters": "(String label)", "modifiers": "public", "return": "void", "signature": "void setLabel(String label)", "full_signature": "public void setLabel(String label)", "class_method_signature": "Marker.setLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "getLabelFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getLabelFont()", "full_signature": "public Font getLabelFont()", "class_method_signature": "Marker.getLabelFont()", "testcase": false, "constructor": false}, {"identifier": "setLabelFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setLabelFont(Font font)", "full_signature": "public void setLabelFont(Font font)", "class_method_signature": "Marker.setLabelFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelPaint()", "full_signature": "public Paint getLabelPaint()", "class_method_signature": "Marker.getLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelPaint(Paint paint)", "full_signature": "public void setLabelPaint(Paint paint)", "class_method_signature": "Marker.setLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelAnchor", "parameters": "()", "modifiers": "public", "return": "RectangleAnchor", "signature": "RectangleAnchor getLabelAnchor()", "full_signature": "public RectangleAnchor getLabelAnchor()", "class_method_signature": "Marker.getLabelAnchor()", "testcase": false, "constructor": false}, {"identifier": "setLabelAnchor", "parameters": "(RectangleAnchor anchor)", "modifiers": "public", "return": "void", "signature": "void setLabelAnchor(RectangleAnchor anchor)", "full_signature": "public void setLabelAnchor(RectangleAnchor anchor)", "class_method_signature": "Marker.setLabelAnchor(RectangleAnchor anchor)", "testcase": false, "constructor": false}, {"identifier": "getLabelOffset", "parameters": "()", "modifiers": "public", "return": "RectangleInsets", "signature": "RectangleInsets getLabelOffset()", "full_signature": "public RectangleInsets getLabelOffset()", "class_method_signature": "Marker.getLabelOffset()", "testcase": false, "constructor": false}, {"identifier": "setLabelOffset", "parameters": "(RectangleInsets offset)", "modifiers": "public", "return": "void", "signature": "void setLabelOffset(RectangleInsets offset)", "full_signature": "public void setLabelOffset(RectangleInsets offset)", "class_method_signature": "Marker.setLabelOffset(RectangleInsets offset)", "testcase": false, "constructor": false}, {"identifier": "getLabelOffsetType", "parameters": "()", "modifiers": "public", "return": "LengthAdjustmentType", "signature": "LengthAdjustmentType getLabelOffsetType()", "full_signature": "public LengthAdjustmentType getLabelOffsetType()", "class_method_signature": "Marker.getLabelOffsetType()", "testcase": false, "constructor": false}, {"identifier": "setLabelOffsetType", "parameters": "(LengthAdjustmentType adj)", "modifiers": "public", "return": "void", "signature": "void setLabelOffsetType(LengthAdjustmentType adj)", "full_signature": "public void setLabelOffsetType(LengthAdjustmentType adj)", "class_method_signature": "Marker.setLabelOffsetType(LengthAdjustmentType adj)", "testcase": false, "constructor": false}, {"identifier": "getLabelTextAnchor", "parameters": "()", "modifiers": "public", "return": "TextAnchor", "signature": "TextAnchor getLabelTextAnchor()", "full_signature": "public TextAnchor getLabelTextAnchor()", "class_method_signature": "Marker.getLabelTextAnchor()", "testcase": false, "constructor": false}, {"identifier": "setLabelTextAnchor", "parameters": "(TextAnchor anchor)", "modifiers": "public", "return": "void", "signature": "void setLabelTextAnchor(TextAnchor anchor)", "full_signature": "public void setLabelTextAnchor(TextAnchor anchor)", "class_method_signature": "Marker.setLabelTextAnchor(TextAnchor anchor)", "testcase": false, "constructor": false}, {"identifier": "addChangeListener", "parameters": "(MarkerChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void addChangeListener(MarkerChangeListener listener)", "full_signature": "public void addChangeListener(MarkerChangeListener listener)", "class_method_signature": "Marker.addChangeListener(MarkerChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeChangeListener", "parameters": "(MarkerChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeChangeListener(MarkerChangeListener listener)", "full_signature": "public void removeChangeListener(MarkerChangeListener listener)", "class_method_signature": "Marker.removeChangeListener(MarkerChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(MarkerChangeEvent event)", "modifiers": "public", "return": "void", "signature": "void notifyListeners(MarkerChangeEvent event)", "full_signature": "public void notifyListeners(MarkerChangeEvent event)", "class_method_signature": "Marker.notifyListeners(MarkerChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "(Class listenerType)", "modifiers": "public", "return": "EventListener[]", "signature": "EventListener[] getListeners(Class listenerType)", "full_signature": "public EventListener[] getListeners(Class listenerType)", "class_method_signature": "Marker.getListeners(Class listenerType)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Marker.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "Marker.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "Marker.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "Marker.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/Marker.java"}, "focal_method": {"identifier": "getListeners", "parameters": "(Class listenerType)", "modifiers": "public", "return": "EventListener[]", "body": "public EventListener[] getListeners(Class listenerType) {\n        return this.listenerList.getListeners(listenerType);\n    }", "signature": "EventListener[] getListeners(Class listenerType)", "full_signature": "public EventListener[] getListeners(Class listenerType)", "class_method_signature": "Marker.getListeners(Class listenerType)", "testcase": false, "constructor": false, "invocations": ["getListeners"]}, "repository": {"repo_id": "Chart_1_buggy"}}