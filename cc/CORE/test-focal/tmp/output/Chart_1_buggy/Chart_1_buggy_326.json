{"test_class": {"identifier": "RendererUtilitiesTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java"}, "test_case": {"identifier": "testFindLiveItemsUpperBound_Ascending", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testFindLiveItemsUpperBound_Ascending() {\n        DefaultXYDataset d = new DefaultXYDataset() {\n            public DomainOrder getDomainOrder() {\n                // we're doing this for testing only, and make sure that we\n                // only add data in ascending order by x-value\n                return DomainOrder.ASCENDING;\n            }\n        };\n        // check a series with no items\n        d.addSeries(\"S1\", new double[][] {{}, {}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0,\n                11.1));\n\n        // check a series with one item\n        d.addSeries(\"S2\", new double[][] {{1.0}, {9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0,\n                1.1));\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 2.0,\n                2.2));\n\n        // check a series with two items\n        d.addSeries(\"S3\", new double[][] {{1.0, 2.0}, {9.9, 9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.0,\n                1.0));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.0,\n                2.2));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.0,\n                3.3));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.0,\n                4.4));\n\n        // check a series with three items\n        d.addSeries(\"S4\", new double[][] {{1.0, 2.0, 3.0}, {9.9, 9.9, 9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0,\n                1.1));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0,\n                2.2));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0,\n                3.3));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0,\n                4.4));\n\n        // check a series with four items\n        d.addSeries(\"S5\", new double[][] {{1.0, 2.0, 3.0, 4.0}, {9.9, 9.9,\n                9.9, 9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0,\n                1.1));\n        assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.0,\n                2.2));\n        assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.0,\n                3.3));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.0,\n                4.4));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.0,\n                5.5));\n\n        // check a series with repeating items\n        d.addSeries(\"S5\", new double[][] {{1.0, 2.0, 2.0, 2.0, 3.0}, {9.9, 9.9,\n                9.9, 9.9, 9.9}});\n        assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0,\n                1.0));\n        assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0,\n                2.0));\n        assertEquals(4, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0,\n                3.0));\n        assertEquals(4, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0,\n                4.0));\n\n    }", "signature": "void testFindLiveItemsUpperBound_Ascending()", "full_signature": "public void testFindLiveItemsUpperBound_Ascending()", "class_method_signature": "RendererUtilitiesTests.testFindLiveItemsUpperBound_Ascending()", "testcase": true, "constructor": false, "invocations": ["addSeries", "assertEquals", "findLiveItemsUpperBound", "addSeries", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "addSeries", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "addSeries", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "addSeries", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "addSeries", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound", "assertEquals", "findLiveItemsUpperBound"]}, "focal_class": {"identifier": "RendererUtilities", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findLiveItemsLowerBound", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int", "signature": "int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false}, {"identifier": "findLiveItemsUpperBound", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int", "signature": "int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false}, {"identifier": "findLiveItems", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int[]", "signature": "int[] findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int[] findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItems(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/renderer/RendererUtilities.java"}, "focal_method": {"identifier": "findLiveItemsUpperBound", "parameters": "(XYDataset dataset, int series,\n            double xLow, double xHigh)", "modifiers": "public static", "return": "int", "body": "public static int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue > xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue <= xHigh) {\n                return high;\n            }\n            int mid = (low + high) / 2;\n            while (high - low > 1) {\n                double midV = dataset.getXValue(series, mid);\n                if (midV <= xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return mid;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are descending, the upper bound is found by\n            // comparing against xLow\n            int low = 0;\n            int high = itemCount - 1;\n            int mid = (low + high) / 2;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue < xLow) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue >= xLow) {\n                return high;\n            }\n            while (high - low > 1) {\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return mid;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any trailing values that fall outside the\n            // range...\n            int index = itemCount - 1;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index >= 0 && (x < xLow || x > xHigh)) {\n                index--;\n                if (index >= 0) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.max(index, 0);\n        }\n    }", "signature": "int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "full_signature": "public static int findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "class_method_signature": "RendererUtilities.findLiveItemsUpperBound(XYDataset dataset, int series,\n            double xLow, double xHigh)", "testcase": false, "constructor": false, "invocations": ["getItemCount", "getDomainOrder", "getXValue", "getXValue", "getXValue", "getDomainOrder", "getXValue", "getXValue", "getXValue", "getXValue", "getXValue", "max"]}, "repository": {"repo_id": "Chart_1_buggy"}}