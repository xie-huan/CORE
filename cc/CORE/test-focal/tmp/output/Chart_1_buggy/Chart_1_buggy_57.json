{"test_class": {"identifier": "SpiderWebPlotTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/plot/junit/SpiderWebPlotTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n        SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset());\n        SpiderWebPlot p2 = new SpiderWebPlot(new DefaultCategoryDataset());\n        assertTrue(p1.equals(p2));\n        assertTrue(p2.equals(p1));\n\n        // dataExtractOrder\n        p1.setDataExtractOrder(TableOrder.BY_COLUMN);\n        assertFalse(p1.equals(p2));\n        p2.setDataExtractOrder(TableOrder.BY_COLUMN);\n        assertTrue(p1.equals(p2));\n\n        // headPercent\n        p1.setHeadPercent(0.321);\n        assertFalse(p1.equals(p2));\n        p2.setHeadPercent(0.321);\n        assertTrue(p1.equals(p2));\n\n        // interiorGap\n        p1.setInteriorGap(0.123);\n        assertFalse(p1.equals(p2));\n        p2.setInteriorGap(0.123);\n        assertTrue(p1.equals(p2));\n\n        // startAngle\n        p1.setStartAngle(0.456);\n        assertFalse(p1.equals(p2));\n        p2.setStartAngle(0.456);\n        assertTrue(p1.equals(p2));\n\n        // direction\n        p1.setDirection(Rotation.ANTICLOCKWISE);\n        assertFalse(p1.equals(p2));\n        p2.setDirection(Rotation.ANTICLOCKWISE);\n        assertTrue(p1.equals(p2));\n\n        // maxValue\n        p1.setMaxValue(123.4);\n        assertFalse(p1.equals(p2));\n        p2.setMaxValue(123.4);\n        assertTrue(p1.equals(p2));\n\n        // legendItemShape\n        p1.setLegendItemShape(new Rectangle(1, 2, 3, 4));\n        assertFalse(p1.equals(p2));\n        p2.setLegendItemShape(new Rectangle(1, 2, 3, 4));\n        assertTrue(p1.equals(p2));\n\n        // seriesPaint\n        p1.setSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertTrue(p1.equals(p2));\n\n        // seriesPaintList\n        p1.setSeriesPaint(1, new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.white));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesPaint(1, new GradientPaint(1.0f, 2.0f, Color.yellow,\n                3.0f, 4.0f, Color.white));\n        assertTrue(p1.equals(p2));\n\n        // baseSeriesPaint\n        p1.setBaseSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.black));\n        assertFalse(p1.equals(p2));\n        p2.setBaseSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.black));\n        assertTrue(p1.equals(p2));\n\n        // seriesOutlinePaint\n        p1.setSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.black));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.black));\n        assertTrue(p1.equals(p2));\n\n        // seriesOutlinePaintList\n        p1.setSeriesOutlinePaint(1, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.green));\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlinePaint(1, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.green));\n        assertTrue(p1.equals(p2));\n\n        // baseSeriesOutlinePaint\n        p1.setBaseSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.cyan,\n                3.0f, 4.0f, Color.green));\n        assertFalse(p1.equals(p2));\n        p2.setBaseSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.cyan,\n                3.0f, 4.0f, Color.green));\n        assertTrue(p1.equals(p2));\n\n        // seriesOutlineStroke\n        BasicStroke s = new BasicStroke(1.23f);\n        p1.setSeriesOutlineStroke(s);\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlineStroke(s);\n        assertTrue(p1.equals(p2));\n\n        // seriesOutlineStrokeList\n        p1.setSeriesOutlineStroke(1, s);\n        assertFalse(p1.equals(p2));\n        p2.setSeriesOutlineStroke(1, s);\n        assertTrue(p1.equals(p2));\n\n        // baseSeriesOutlineStroke\n        p1.setBaseSeriesOutlineStroke(s);\n        assertFalse(p1.equals(p2));\n        p2.setBaseSeriesOutlineStroke(s);\n        assertTrue(p1.equals(p2));\n\n        // webFilled\n        p1.setWebFilled(false);\n        assertFalse(p1.equals(p2));\n        p2.setWebFilled(false);\n        assertTrue(p1.equals(p2));\n\n        // axisLabelGap\n        p1.setAxisLabelGap(0.11);\n        assertFalse(p1.equals(p2));\n        p2.setAxisLabelGap(0.11);\n        assertTrue(p1.equals(p2));\n\n        // labelFont\n        p1.setLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertFalse(p1.equals(p2));\n        p2.setLabelFont(new Font(\"Serif\", Font.PLAIN, 9));\n        assertTrue(p1.equals(p2));\n\n        // labelPaint\n        p1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(p1.equals(p2));\n        p2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(p1.equals(p2));\n\n        // labelGenerator\n        p1.setLabelGenerator(new StandardCategoryItemLabelGenerator(\"XYZ: {0}\",\n                new DecimalFormat(\"0.000\")));\n        assertFalse(p1.equals(p2));\n        p2.setLabelGenerator(new StandardCategoryItemLabelGenerator(\"XYZ: {0}\",\n                new DecimalFormat(\"0.000\")));\n        assertTrue(p1.equals(p2));\n\n        // toolTipGenerator\n        p1.setToolTipGenerator(new StandardCategoryToolTipGenerator());\n        assertFalse(p1.equals(p2));\n        p2.setToolTipGenerator(new StandardCategoryToolTipGenerator());\n        assertTrue(p1.equals(p2));\n\n        // urlGenerator\n        p1.setURLGenerator(new StandardCategoryURLGenerator());\n        assertFalse(p1.equals(p2));\n        p2.setURLGenerator(new StandardCategoryURLGenerator());\n        assertTrue(p1.equals(p2));\n\n        // axisLinePaint\n        p1.setAxisLinePaint(Color.red);\n        assertFalse(p1.equals(p2));\n        p2.setAxisLinePaint(Color.red);\n        assertTrue(p1.equals(p2));\n\n        // axisLineStroke\n        p1.setAxisLineStroke(new BasicStroke(1.1f));\n        assertFalse(p1.equals(p2));\n        p2.setAxisLineStroke(new BasicStroke(1.1f));\n        assertTrue(p1.equals(p2));\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "SpiderWebPlotTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "setDataExtractOrder", "assertFalse", "equals", "setDataExtractOrder", "assertTrue", "equals", "setHeadPercent", "assertFalse", "equals", "setHeadPercent", "assertTrue", "equals", "setInteriorGap", "assertFalse", "equals", "setInteriorGap", "assertTrue", "equals", "setStartAngle", "assertFalse", "equals", "setStartAngle", "assertTrue", "equals", "setDirection", "assertFalse", "equals", "setDirection", "assertTrue", "equals", "setMaxValue", "assertFalse", "equals", "setMaxValue", "assertTrue", "equals", "setLegendItemShape", "assertFalse", "equals", "setLegendItemShape", "assertTrue", "equals", "setSeriesPaint", "assertFalse", "equals", "setSeriesPaint", "assertTrue", "equals", "setSeriesPaint", "assertFalse", "equals", "setSeriesPaint", "assertTrue", "equals", "setBaseSeriesPaint", "assertFalse", "equals", "setBaseSeriesPaint", "assertTrue", "equals", "setSeriesOutlinePaint", "assertFalse", "equals", "setSeriesOutlinePaint", "assertTrue", "equals", "setSeriesOutlinePaint", "assertFalse", "equals", "setSeriesOutlinePaint", "assertTrue", "equals", "setBaseSeriesOutlinePaint", "assertFalse", "equals", "setBaseSeriesOutlinePaint", "assertTrue", "equals", "setSeriesOutlineStroke", "assertFalse", "equals", "setSeriesOutlineStroke", "assertTrue", "equals", "setSeriesOutlineStroke", "assertFalse", "equals", "setSeriesOutlineStroke", "assertTrue", "equals", "setBaseSeriesOutlineStroke", "assertFalse", "equals", "setBaseSeriesOutlineStroke", "assertTrue", "equals", "setWebFilled", "assertFalse", "equals", "setWebFilled", "assertTrue", "equals", "setAxisLabelGap", "assertFalse", "equals", "setAxisLabelGap", "assertTrue", "equals", "setLabelFont", "assertFalse", "equals", "setLabelFont", "assertTrue", "equals", "setLabelPaint", "assertFalse", "equals", "setLabelPaint", "assertTrue", "equals", "setLabelGenerator", "assertFalse", "equals", "setLabelGenerator", "assertTrue", "equals", "setToolTipGenerator", "assertFalse", "equals", "setToolTipGenerator", "assertTrue", "equals", "setURLGenerator", "assertFalse", "equals", "setURLGenerator", "assertTrue", "equals", "setAxisLinePaint", "assertFalse", "equals", "setAxisLinePaint", "assertTrue", "equals", "setAxisLineStroke", "assertFalse", "equals", "setAxisLineStroke", "assertTrue", "equals"]}, "focal_class": {"identifier": "SpiderWebPlot", "superclass": "extends Plot", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -5376340422031599463L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5376340422031599463L", "var_name": "serialVersionUID"}, {"original_string": "public static final double DEFAULT_HEAD = 0.01;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_HEAD = 0.01", "var_name": "DEFAULT_HEAD"}, {"original_string": "public static final double DEFAULT_AXIS_LABEL_GAP = 0.10;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_AXIS_LABEL_GAP = 0.10", "var_name": "DEFAULT_AXIS_LABEL_GAP"}, {"original_string": "public static final double DEFAULT_INTERIOR_GAP = 0.25;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_INTERIOR_GAP = 0.25", "var_name": "DEFAULT_INTERIOR_GAP"}, {"original_string": "public static final double MAX_INTERIOR_GAP = 0.40;", "modifier": "public static final", "type": "double", "declarator": "MAX_INTERIOR_GAP = 0.40", "var_name": "MAX_INTERIOR_GAP"}, {"original_string": "public static final double DEFAULT_START_ANGLE = 90.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_START_ANGLE = 90.0", "var_name": "DEFAULT_START_ANGLE"}, {"original_string": "public static final Font DEFAULT_LABEL_FONT = new Font(\"Tahoma\",\n            Font.PLAIN, 10);", "modifier": "public static final", "type": "Font", "declarator": "DEFAULT_LABEL_FONT = new Font(\"Tahoma\",\n            Font.PLAIN, 10)", "var_name": "DEFAULT_LABEL_FONT"}, {"original_string": "public static final Paint  DEFAULT_LABEL_PAINT = Color.black;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_PAINT = Color.black", "var_name": "DEFAULT_LABEL_PAINT"}, {"original_string": "public static final Paint  DEFAULT_LABEL_BACKGROUND_PAINT\n            = new Color(255, 255, 192);", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_BACKGROUND_PAINT\n            = new Color(255, 255, 192)", "var_name": "DEFAULT_LABEL_BACKGROUND_PAINT"}, {"original_string": "public static final Paint  DEFAULT_LABEL_OUTLINE_PAINT = Color.black;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_OUTLINE_PAINT = Color.black", "var_name": "DEFAULT_LABEL_OUTLINE_PAINT"}, {"original_string": "public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE\n            = new BasicStroke(0.5f);", "modifier": "public static final", "type": "Stroke", "declarator": "DEFAULT_LABEL_OUTLINE_STROKE\n            = new BasicStroke(0.5f)", "var_name": "DEFAULT_LABEL_OUTLINE_STROKE"}, {"original_string": "public static final Paint  DEFAULT_LABEL_SHADOW_PAINT = Color.lightGray;", "modifier": "public static final", "type": "Paint", "declarator": "DEFAULT_LABEL_SHADOW_PAINT = Color.lightGray", "var_name": "DEFAULT_LABEL_SHADOW_PAINT"}, {"original_string": "public static final double DEFAULT_MAX_VALUE = -1.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_MAX_VALUE = -1.0", "var_name": "DEFAULT_MAX_VALUE"}, {"original_string": "protected double headPercent;", "modifier": "protected", "type": "double", "declarator": "headPercent", "var_name": "headPercent"}, {"original_string": "private double interiorGap;", "modifier": "private", "type": "double", "declarator": "interiorGap", "var_name": "interiorGap"}, {"original_string": "private double axisLabelGap;", "modifier": "private", "type": "double", "declarator": "axisLabelGap", "var_name": "axisLabelGap"}, {"original_string": "private transient Paint axisLinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "axisLinePaint", "var_name": "axisLinePaint"}, {"original_string": "private transient Stroke axisLineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "axisLineStroke", "var_name": "axisLineStroke"}, {"original_string": "private CategoryDataset dataset;", "modifier": "private", "type": "CategoryDataset", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private double maxValue;", "modifier": "private", "type": "double", "declarator": "maxValue", "var_name": "maxValue"}, {"original_string": "private TableOrder dataExtractOrder;", "modifier": "private", "type": "TableOrder", "declarator": "dataExtractOrder", "var_name": "dataExtractOrder"}, {"original_string": "private double startAngle;", "modifier": "private", "type": "double", "declarator": "startAngle", "var_name": "startAngle"}, {"original_string": "private Rotation direction;", "modifier": "private", "type": "Rotation", "declarator": "direction", "var_name": "direction"}, {"original_string": "private transient Shape legendItemShape;", "modifier": "private transient", "type": "Shape", "declarator": "legendItemShape", "var_name": "legendItemShape"}, {"original_string": "private transient Paint seriesPaint;", "modifier": "private transient", "type": "Paint", "declarator": "seriesPaint", "var_name": "seriesPaint"}, {"original_string": "private PaintList seriesPaintList;", "modifier": "private", "type": "PaintList", "declarator": "seriesPaintList", "var_name": "seriesPaintList"}, {"original_string": "private transient Paint baseSeriesPaint;", "modifier": "private transient", "type": "Paint", "declarator": "baseSeriesPaint", "var_name": "baseSeriesPaint"}, {"original_string": "private transient Paint seriesOutlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "seriesOutlinePaint", "var_name": "seriesOutlinePaint"}, {"original_string": "private PaintList seriesOutlinePaintList;", "modifier": "private", "type": "PaintList", "declarator": "seriesOutlinePaintList", "var_name": "seriesOutlinePaintList"}, {"original_string": "private transient Paint baseSeriesOutlinePaint;", "modifier": "private transient", "type": "Paint", "declarator": "baseSeriesOutlinePaint", "var_name": "baseSeriesOutlinePaint"}, {"original_string": "private transient Stroke seriesOutlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "seriesOutlineStroke", "var_name": "seriesOutlineStroke"}, {"original_string": "private StrokeList seriesOutlineStrokeList;", "modifier": "private", "type": "StrokeList", "declarator": "seriesOutlineStrokeList", "var_name": "seriesOutlineStrokeList"}, {"original_string": "private transient Stroke baseSeriesOutlineStroke;", "modifier": "private transient", "type": "Stroke", "declarator": "baseSeriesOutlineStroke", "var_name": "baseSeriesOutlineStroke"}, {"original_string": "private Font labelFont;", "modifier": "private", "type": "Font", "declarator": "labelFont", "var_name": "labelFont"}, {"original_string": "private transient Paint labelPaint;", "modifier": "private transient", "type": "Paint", "declarator": "labelPaint", "var_name": "labelPaint"}, {"original_string": "private CategoryItemLabelGenerator labelGenerator;", "modifier": "private", "type": "CategoryItemLabelGenerator", "declarator": "labelGenerator", "var_name": "labelGenerator"}, {"original_string": "private boolean webFilled = true;", "modifier": "private", "type": "boolean", "declarator": "webFilled = true", "var_name": "webFilled"}, {"original_string": "private CategoryToolTipGenerator toolTipGenerator;", "modifier": "private", "type": "CategoryToolTipGenerator", "declarator": "toolTipGenerator", "var_name": "toolTipGenerator"}, {"original_string": "private CategoryURLGenerator urlGenerator;", "modifier": "private", "type": "CategoryURLGenerator", "declarator": "urlGenerator", "var_name": "urlGenerator"}], "methods": [{"identifier": "SpiderWebPlot", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpiderWebPlot()", "full_signature": "public  SpiderWebPlot()", "class_method_signature": "SpiderWebPlot.SpiderWebPlot()", "testcase": false, "constructor": true}, {"identifier": "SpiderWebPlot", "parameters": "(CategoryDataset dataset)", "modifiers": "public", "return": "", "signature": " SpiderWebPlot(CategoryDataset dataset)", "full_signature": "public  SpiderWebPlot(CategoryDataset dataset)", "class_method_signature": "SpiderWebPlot.SpiderWebPlot(CategoryDataset dataset)", "testcase": false, "constructor": true}, {"identifier": "SpiderWebPlot", "parameters": "(CategoryDataset dataset, TableOrder extract)", "modifiers": "public", "return": "", "signature": " SpiderWebPlot(CategoryDataset dataset, TableOrder extract)", "full_signature": "public  SpiderWebPlot(CategoryDataset dataset, TableOrder extract)", "class_method_signature": "SpiderWebPlot.SpiderWebPlot(CategoryDataset dataset, TableOrder extract)", "testcase": false, "constructor": true}, {"identifier": "getPlotType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPlotType()", "full_signature": "public String getPlotType()", "class_method_signature": "SpiderWebPlot.getPlotType()", "testcase": false, "constructor": false}, {"identifier": "getDataset", "parameters": "()", "modifiers": "public", "return": "CategoryDataset", "signature": "CategoryDataset getDataset()", "full_signature": "public CategoryDataset getDataset()", "class_method_signature": "SpiderWebPlot.getDataset()", "testcase": false, "constructor": false}, {"identifier": "setDataset", "parameters": "(CategoryDataset dataset)", "modifiers": "public", "return": "void", "signature": "void setDataset(CategoryDataset dataset)", "full_signature": "public void setDataset(CategoryDataset dataset)", "class_method_signature": "SpiderWebPlot.setDataset(CategoryDataset dataset)", "testcase": false, "constructor": false}, {"identifier": "isWebFilled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWebFilled()", "full_signature": "public boolean isWebFilled()", "class_method_signature": "SpiderWebPlot.isWebFilled()", "testcase": false, "constructor": false}, {"identifier": "setWebFilled", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setWebFilled(boolean flag)", "full_signature": "public void setWebFilled(boolean flag)", "class_method_signature": "SpiderWebPlot.setWebFilled(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "getDataExtractOrder", "parameters": "()", "modifiers": "public", "return": "TableOrder", "signature": "TableOrder getDataExtractOrder()", "full_signature": "public TableOrder getDataExtractOrder()", "class_method_signature": "SpiderWebPlot.getDataExtractOrder()", "testcase": false, "constructor": false}, {"identifier": "setDataExtractOrder", "parameters": "(TableOrder order)", "modifiers": "public", "return": "void", "signature": "void setDataExtractOrder(TableOrder order)", "full_signature": "public void setDataExtractOrder(TableOrder order)", "class_method_signature": "SpiderWebPlot.setDataExtractOrder(TableOrder order)", "testcase": false, "constructor": false}, {"identifier": "getHeadPercent", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getHeadPercent()", "full_signature": "public double getHeadPercent()", "class_method_signature": "SpiderWebPlot.getHeadPercent()", "testcase": false, "constructor": false}, {"identifier": "setHeadPercent", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void setHeadPercent(double percent)", "full_signature": "public void setHeadPercent(double percent)", "class_method_signature": "SpiderWebPlot.setHeadPercent(double percent)", "testcase": false, "constructor": false}, {"identifier": "getStartAngle", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStartAngle()", "full_signature": "public double getStartAngle()", "class_method_signature": "SpiderWebPlot.getStartAngle()", "testcase": false, "constructor": false}, {"identifier": "setStartAngle", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void setStartAngle(double angle)", "full_signature": "public void setStartAngle(double angle)", "class_method_signature": "SpiderWebPlot.setStartAngle(double angle)", "testcase": false, "constructor": false}, {"identifier": "getMaxValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxValue()", "full_signature": "public double getMaxValue()", "class_method_signature": "SpiderWebPlot.getMaxValue()", "testcase": false, "constructor": false}, {"identifier": "setMaxValue", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setMaxValue(double value)", "full_signature": "public void setMaxValue(double value)", "class_method_signature": "SpiderWebPlot.setMaxValue(double value)", "testcase": false, "constructor": false}, {"identifier": "getDirection", "parameters": "()", "modifiers": "public", "return": "Rotation", "signature": "Rotation getDirection()", "full_signature": "public Rotation getDirection()", "class_method_signature": "SpiderWebPlot.getDirection()", "testcase": false, "constructor": false}, {"identifier": "setDirection", "parameters": "(Rotation direction)", "modifiers": "public", "return": "void", "signature": "void setDirection(Rotation direction)", "full_signature": "public void setDirection(Rotation direction)", "class_method_signature": "SpiderWebPlot.setDirection(Rotation direction)", "testcase": false, "constructor": false}, {"identifier": "getInteriorGap", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getInteriorGap()", "full_signature": "public double getInteriorGap()", "class_method_signature": "SpiderWebPlot.getInteriorGap()", "testcase": false, "constructor": false}, {"identifier": "setInteriorGap", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void setInteriorGap(double percent)", "full_signature": "public void setInteriorGap(double percent)", "class_method_signature": "SpiderWebPlot.setInteriorGap(double percent)", "testcase": false, "constructor": false}, {"identifier": "getAxisLabelGap", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAxisLabelGap()", "full_signature": "public double getAxisLabelGap()", "class_method_signature": "SpiderWebPlot.getAxisLabelGap()", "testcase": false, "constructor": false}, {"identifier": "setAxisLabelGap", "parameters": "(double gap)", "modifiers": "public", "return": "void", "signature": "void setAxisLabelGap(double gap)", "full_signature": "public void setAxisLabelGap(double gap)", "class_method_signature": "SpiderWebPlot.setAxisLabelGap(double gap)", "testcase": false, "constructor": false}, {"identifier": "getAxisLinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getAxisLinePaint()", "full_signature": "public Paint getAxisLinePaint()", "class_method_signature": "SpiderWebPlot.getAxisLinePaint()", "testcase": false, "constructor": false}, {"identifier": "setAxisLinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setAxisLinePaint(Paint paint)", "full_signature": "public void setAxisLinePaint(Paint paint)", "class_method_signature": "SpiderWebPlot.setAxisLinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getAxisLineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getAxisLineStroke()", "full_signature": "public Stroke getAxisLineStroke()", "class_method_signature": "SpiderWebPlot.getAxisLineStroke()", "testcase": false, "constructor": false}, {"identifier": "setAxisLineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setAxisLineStroke(Stroke stroke)", "full_signature": "public void setAxisLineStroke(Stroke stroke)", "class_method_signature": "SpiderWebPlot.setAxisLineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getSeriesPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getSeriesPaint()", "full_signature": "public Paint getSeriesPaint()", "class_method_signature": "SpiderWebPlot.getSeriesPaint()", "testcase": false, "constructor": false}, {"identifier": "setSeriesPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSeriesPaint(Paint paint)", "full_signature": "public void setSeriesPaint(Paint paint)", "class_method_signature": "SpiderWebPlot.setSeriesPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getSeriesPaint", "parameters": "(int series)", "modifiers": "public", "return": "Paint", "signature": "Paint getSeriesPaint(int series)", "full_signature": "public Paint getSeriesPaint(int series)", "class_method_signature": "SpiderWebPlot.getSeriesPaint(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesPaint", "parameters": "(int series, Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSeriesPaint(int series, Paint paint)", "full_signature": "public void setSeriesPaint(int series, Paint paint)", "class_method_signature": "SpiderWebPlot.setSeriesPaint(int series, Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getBaseSeriesPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getBaseSeriesPaint()", "full_signature": "public Paint getBaseSeriesPaint()", "class_method_signature": "SpiderWebPlot.getBaseSeriesPaint()", "testcase": false, "constructor": false}, {"identifier": "setBaseSeriesPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setBaseSeriesPaint(Paint paint)", "full_signature": "public void setBaseSeriesPaint(Paint paint)", "class_method_signature": "SpiderWebPlot.setBaseSeriesPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getSeriesOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getSeriesOutlinePaint()", "full_signature": "public Paint getSeriesOutlinePaint()", "class_method_signature": "SpiderWebPlot.getSeriesOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setSeriesOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSeriesOutlinePaint(Paint paint)", "full_signature": "public void setSeriesOutlinePaint(Paint paint)", "class_method_signature": "SpiderWebPlot.setSeriesOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getSeriesOutlinePaint", "parameters": "(int series)", "modifiers": "public", "return": "Paint", "signature": "Paint getSeriesOutlinePaint(int series)", "full_signature": "public Paint getSeriesOutlinePaint(int series)", "class_method_signature": "SpiderWebPlot.getSeriesOutlinePaint(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesOutlinePaint", "parameters": "(int series, Paint paint)", "modifiers": "public", "return": "void", "signature": "void setSeriesOutlinePaint(int series, Paint paint)", "full_signature": "public void setSeriesOutlinePaint(int series, Paint paint)", "class_method_signature": "SpiderWebPlot.setSeriesOutlinePaint(int series, Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getBaseSeriesOutlinePaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getBaseSeriesOutlinePaint()", "full_signature": "public Paint getBaseSeriesOutlinePaint()", "class_method_signature": "SpiderWebPlot.getBaseSeriesOutlinePaint()", "testcase": false, "constructor": false}, {"identifier": "setBaseSeriesOutlinePaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setBaseSeriesOutlinePaint(Paint paint)", "full_signature": "public void setBaseSeriesOutlinePaint(Paint paint)", "class_method_signature": "SpiderWebPlot.setBaseSeriesOutlinePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getSeriesOutlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getSeriesOutlineStroke()", "full_signature": "public Stroke getSeriesOutlineStroke()", "class_method_signature": "SpiderWebPlot.getSeriesOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setSeriesOutlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setSeriesOutlineStroke(Stroke stroke)", "full_signature": "public void setSeriesOutlineStroke(Stroke stroke)", "class_method_signature": "SpiderWebPlot.setSeriesOutlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getSeriesOutlineStroke", "parameters": "(int series)", "modifiers": "public", "return": "Stroke", "signature": "Stroke getSeriesOutlineStroke(int series)", "full_signature": "public Stroke getSeriesOutlineStroke(int series)", "class_method_signature": "SpiderWebPlot.getSeriesOutlineStroke(int series)", "testcase": false, "constructor": false}, {"identifier": "setSeriesOutlineStroke", "parameters": "(int series, Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setSeriesOutlineStroke(int series, Stroke stroke)", "full_signature": "public void setSeriesOutlineStroke(int series, Stroke stroke)", "class_method_signature": "SpiderWebPlot.setSeriesOutlineStroke(int series, Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getBaseSeriesOutlineStroke", "parameters": "()", "modifiers": "public", "return": "Stroke", "signature": "Stroke getBaseSeriesOutlineStroke()", "full_signature": "public Stroke getBaseSeriesOutlineStroke()", "class_method_signature": "SpiderWebPlot.getBaseSeriesOutlineStroke()", "testcase": false, "constructor": false}, {"identifier": "setBaseSeriesOutlineStroke", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void setBaseSeriesOutlineStroke(Stroke stroke)", "full_signature": "public void setBaseSeriesOutlineStroke(Stroke stroke)", "class_method_signature": "SpiderWebPlot.setBaseSeriesOutlineStroke(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getLegendItemShape", "parameters": "()", "modifiers": "public", "return": "Shape", "signature": "Shape getLegendItemShape()", "full_signature": "public Shape getLegendItemShape()", "class_method_signature": "SpiderWebPlot.getLegendItemShape()", "testcase": false, "constructor": false}, {"identifier": "setLegendItemShape", "parameters": "(Shape shape)", "modifiers": "public", "return": "void", "signature": "void setLegendItemShape(Shape shape)", "full_signature": "public void setLegendItemShape(Shape shape)", "class_method_signature": "SpiderWebPlot.setLegendItemShape(Shape shape)", "testcase": false, "constructor": false}, {"identifier": "getLabelFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getLabelFont()", "full_signature": "public Font getLabelFont()", "class_method_signature": "SpiderWebPlot.getLabelFont()", "testcase": false, "constructor": false}, {"identifier": "setLabelFont", "parameters": "(Font font)", "modifiers": "public", "return": "void", "signature": "void setLabelFont(Font font)", "full_signature": "public void setLabelFont(Font font)", "class_method_signature": "SpiderWebPlot.setLabelFont(Font font)", "testcase": false, "constructor": false}, {"identifier": "getLabelPaint", "parameters": "()", "modifiers": "public", "return": "Paint", "signature": "Paint getLabelPaint()", "full_signature": "public Paint getLabelPaint()", "class_method_signature": "SpiderWebPlot.getLabelPaint()", "testcase": false, "constructor": false}, {"identifier": "setLabelPaint", "parameters": "(Paint paint)", "modifiers": "public", "return": "void", "signature": "void setLabelPaint(Paint paint)", "full_signature": "public void setLabelPaint(Paint paint)", "class_method_signature": "SpiderWebPlot.setLabelPaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "getLabelGenerator", "parameters": "()", "modifiers": "public", "return": "CategoryItemLabelGenerator", "signature": "CategoryItemLabelGenerator getLabelGenerator()", "full_signature": "public CategoryItemLabelGenerator getLabelGenerator()", "class_method_signature": "SpiderWebPlot.getLabelGenerator()", "testcase": false, "constructor": false}, {"identifier": "setLabelGenerator", "parameters": "(CategoryItemLabelGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setLabelGenerator(CategoryItemLabelGenerator generator)", "full_signature": "public void setLabelGenerator(CategoryItemLabelGenerator generator)", "class_method_signature": "SpiderWebPlot.setLabelGenerator(CategoryItemLabelGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getToolTipGenerator", "parameters": "()", "modifiers": "public", "return": "CategoryToolTipGenerator", "signature": "CategoryToolTipGenerator getToolTipGenerator()", "full_signature": "public CategoryToolTipGenerator getToolTipGenerator()", "class_method_signature": "SpiderWebPlot.getToolTipGenerator()", "testcase": false, "constructor": false}, {"identifier": "setToolTipGenerator", "parameters": "(CategoryToolTipGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setToolTipGenerator(CategoryToolTipGenerator generator)", "full_signature": "public void setToolTipGenerator(CategoryToolTipGenerator generator)", "class_method_signature": "SpiderWebPlot.setToolTipGenerator(CategoryToolTipGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getURLGenerator", "parameters": "()", "modifiers": "public", "return": "CategoryURLGenerator", "signature": "CategoryURLGenerator getURLGenerator()", "full_signature": "public CategoryURLGenerator getURLGenerator()", "class_method_signature": "SpiderWebPlot.getURLGenerator()", "testcase": false, "constructor": false}, {"identifier": "setURLGenerator", "parameters": "(CategoryURLGenerator generator)", "modifiers": "public", "return": "void", "signature": "void setURLGenerator(CategoryURLGenerator generator)", "full_signature": "public void setURLGenerator(CategoryURLGenerator generator)", "class_method_signature": "SpiderWebPlot.setURLGenerator(CategoryURLGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "getLegendItems", "parameters": "()", "modifiers": "public", "return": "LegendItemCollection", "signature": "LegendItemCollection getLegendItems()", "full_signature": "public LegendItemCollection getLegendItems()", "class_method_signature": "SpiderWebPlot.getLegendItems()", "testcase": false, "constructor": false}, {"identifier": "getWebPoint", "parameters": "(Rectangle2D bounds,\n                                  double angle, double length)", "modifiers": "protected", "return": "Point2D", "signature": "Point2D getWebPoint(Rectangle2D bounds,\n                                  double angle, double length)", "full_signature": "protected Point2D getWebPoint(Rectangle2D bounds,\n                                  double angle, double length)", "class_method_signature": "SpiderWebPlot.getWebPoint(Rectangle2D bounds,\n                                  double angle, double length)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info)", "modifiers": "public", "return": "void", "signature": "void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info)", "class_method_signature": "SpiderWebPlot.draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info)", "testcase": false, "constructor": false}, {"identifier": "calculateMaxValue", "parameters": "(int seriesCount, int catCount)", "modifiers": "private", "return": "void", "signature": "void calculateMaxValue(int seriesCount, int catCount)", "full_signature": "private void calculateMaxValue(int seriesCount, int catCount)", "class_method_signature": "SpiderWebPlot.calculateMaxValue(int seriesCount, int catCount)", "testcase": false, "constructor": false}, {"identifier": "drawRadarPoly", "parameters": "(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Point2D centre,\n                                 PlotRenderingInfo info,\n                                 int series, int catCount,\n                                 double headH, double headW)", "modifiers": "protected", "return": "void", "signature": "void drawRadarPoly(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Point2D centre,\n                                 PlotRenderingInfo info,\n                                 int series, int catCount,\n                                 double headH, double headW)", "full_signature": "protected void drawRadarPoly(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Point2D centre,\n                                 PlotRenderingInfo info,\n                                 int series, int catCount,\n                                 double headH, double headW)", "class_method_signature": "SpiderWebPlot.drawRadarPoly(Graphics2D g2,\n                                 Rectangle2D plotArea,\n                                 Point2D centre,\n                                 PlotRenderingInfo info,\n                                 int series, int catCount,\n                                 double headH, double headW)", "testcase": false, "constructor": false}, {"identifier": "getPlotValue", "parameters": "(int series, int cat)", "modifiers": "protected", "return": "Number", "signature": "Number getPlotValue(int series, int cat)", "full_signature": "protected Number getPlotValue(int series, int cat)", "class_method_signature": "SpiderWebPlot.getPlotValue(int series, int cat)", "testcase": false, "constructor": false}, {"identifier": "drawLabel", "parameters": "(Graphics2D g2, Rectangle2D plotArea, double value,\n                             int cat, double startAngle, double extent)", "modifiers": "protected", "return": "void", "signature": "void drawLabel(Graphics2D g2, Rectangle2D plotArea, double value,\n                             int cat, double startAngle, double extent)", "full_signature": "protected void drawLabel(Graphics2D g2, Rectangle2D plotArea, double value,\n                             int cat, double startAngle, double extent)", "class_method_signature": "SpiderWebPlot.drawLabel(Graphics2D g2, Rectangle2D plotArea, double value,\n                             int cat, double startAngle, double extent)", "testcase": false, "constructor": false}, {"identifier": "calculateLabelLocation", "parameters": "(Rectangle2D labelBounds,\n                                             double ascent,\n                                             Rectangle2D plotArea,\n                                             double startAngle)", "modifiers": "protected", "return": "Point2D", "signature": "Point2D calculateLabelLocation(Rectangle2D labelBounds,\n                                             double ascent,\n                                             Rectangle2D plotArea,\n                                             double startAngle)", "full_signature": "protected Point2D calculateLabelLocation(Rectangle2D labelBounds,\n                                             double ascent,\n                                             Rectangle2D plotArea,\n                                             double startAngle)", "class_method_signature": "SpiderWebPlot.calculateLabelLocation(Rectangle2D labelBounds,\n                                             double ascent,\n                                             Rectangle2D plotArea,\n                                             double startAngle)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "SpiderWebPlot.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "SpiderWebPlot.clone()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "SpiderWebPlot.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "SpiderWebPlot.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/plot/SpiderWebPlot.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof SpiderWebPlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        SpiderWebPlot that = (SpiderWebPlot) obj;\n        if (!this.dataExtractOrder.equals(that.dataExtractOrder)) {\n            return false;\n        }\n        if (this.headPercent != that.headPercent) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (!this.direction.equals(that.direction)) {\n            return false;\n        }\n        if (this.maxValue != that.maxValue) {\n            return false;\n        }\n        if (this.webFilled != that.webFilled) {\n            return false;\n        }\n        if (this.axisLabelGap != that.axisLabelGap) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (!this.axisLineStroke.equals(that.axisLineStroke)) {\n            return false;\n        }\n        if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.seriesPaint, that.seriesPaint)) {\n            return false;\n        }\n        if (!this.seriesPaintList.equals(that.seriesPaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseSeriesPaint, that.baseSeriesPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.seriesOutlinePaint,\n                that.seriesOutlinePaint)) {\n            return false;\n        }\n        if (!this.seriesOutlinePaintList.equals(that.seriesOutlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseSeriesOutlinePaint,\n                that.baseSeriesOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.seriesOutlineStroke,\n                that.seriesOutlineStroke)) {\n            return false;\n        }\n        if (!this.seriesOutlineStrokeList.equals(\n                that.seriesOutlineStrokeList)) {\n            return false;\n        }\n        if (!this.baseSeriesOutlineStroke.equals(\n                that.baseSeriesOutlineStroke)) {\n            return false;\n        }\n        if (!this.labelFont.equals(that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!this.labelGenerator.equals(that.labelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGenerator,\n                that.toolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGenerator,\n                that.urlGenerator)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "SpiderWebPlot.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equal", "equals", "equal", "equal", "equals", "equal", "equal", "equals", "equal", "equal", "equals", "equals", "equals", "equal", "equals", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}