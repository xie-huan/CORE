{"test_class": {"identifier": "TaskTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/data/gantt/junit/TaskTests.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testEquals() {\n\n        Task t1 = new Task(\"T\", new Date(1), new Date(2));\n        Task t2 = new Task(\"T\", new Date(1), new Date(2));\n        assertTrue(t1.equals(t2));\n        assertTrue(t2.equals(t1));\n\n        t1.setDescription(\"X\");\n        assertFalse(t1.equals(t2));\n        t2.setDescription(\"X\");\n        assertTrue(t1.equals(t2));\n\n        t1.setDuration(new SimpleTimePeriod(new Date(2), new Date(3)));\n        assertFalse(t1.equals(t2));\n        t2.setDuration(new SimpleTimePeriod(new Date(2), new Date(3)));\n        assertTrue(t1.equals(t2));\n\n        t1.setPercentComplete(0.5);\n        assertFalse(t1.equals(t2));\n        t2.setPercentComplete(0.5);\n        assertTrue(t1.equals(t2));\n\n        t1.addSubtask(new Task(\"T\", new Date(22), new Date(33)));\n        assertFalse(t1.equals(t2));\n        t2.addSubtask(new Task(\"T\", new Date(22), new Date(33)));\n        assertTrue(t1.equals(t2));\n\n\n    }", "signature": "void testEquals()", "full_signature": "public void testEquals()", "class_method_signature": "TaskTests.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertTrue", "equals", "setDescription", "assertFalse", "equals", "setDescription", "assertTrue", "equals", "setDuration", "assertFalse", "equals", "setDuration", "assertTrue", "equals", "setPercentComplete", "assertFalse", "equals", "setPercentComplete", "assertTrue", "equals", "addSubtask", "assertFalse", "equals", "addSubtask", "assertTrue", "equals"]}, "focal_class": {"identifier": "Task", "superclass": "", "interfaces": "implements Cloneable, PublicCloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1094303785346988894L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1094303785346988894L", "var_name": "serialVersionUID"}, {"original_string": "private String description;", "modifier": "private", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private TimePeriod duration;", "modifier": "private", "type": "TimePeriod", "declarator": "duration", "var_name": "duration"}, {"original_string": "private Double percentComplete;", "modifier": "private", "type": "Double", "declarator": "percentComplete", "var_name": "percentComplete"}, {"original_string": "private List subtasks;", "modifier": "private", "type": "List", "declarator": "subtasks", "var_name": "subtasks"}], "methods": [{"identifier": "Task", "parameters": "(String description, TimePeriod duration)", "modifiers": "public", "return": "", "signature": " Task(String description, TimePeriod duration)", "full_signature": "public  Task(String description, TimePeriod duration)", "class_method_signature": "Task.Task(String description, TimePeriod duration)", "testcase": false, "constructor": true}, {"identifier": "Task", "parameters": "(String description, Date start, Date end)", "modifiers": "public", "return": "", "signature": " Task(String description, Date start, Date end)", "full_signature": "public  Task(String description, Date start, Date end)", "class_method_signature": "Task.Task(String description, Date start, Date end)", "testcase": false, "constructor": true}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "Task.getDescription()", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "(String description)", "modifiers": "public", "return": "void", "signature": "void setDescription(String description)", "full_signature": "public void setDescription(String description)", "class_method_signature": "Task.setDescription(String description)", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "public", "return": "TimePeriod", "signature": "TimePeriod getDuration()", "full_signature": "public TimePeriod getDuration()", "class_method_signature": "Task.getDuration()", "testcase": false, "constructor": false}, {"identifier": "setDuration", "parameters": "(TimePeriod duration)", "modifiers": "public", "return": "void", "signature": "void setDuration(TimePeriod duration)", "full_signature": "public void setDuration(TimePeriod duration)", "class_method_signature": "Task.setDuration(TimePeriod duration)", "testcase": false, "constructor": false}, {"identifier": "getPercentComplete", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getPercentComplete()", "full_signature": "public Double getPercentComplete()", "class_method_signature": "Task.getPercentComplete()", "testcase": false, "constructor": false}, {"identifier": "setPercentComplete", "parameters": "(Double percent)", "modifiers": "public", "return": "void", "signature": "void setPercentComplete(Double percent)", "full_signature": "public void setPercentComplete(Double percent)", "class_method_signature": "Task.setPercentComplete(Double percent)", "testcase": false, "constructor": false}, {"identifier": "setPercentComplete", "parameters": "(double percent)", "modifiers": "public", "return": "void", "signature": "void setPercentComplete(double percent)", "full_signature": "public void setPercentComplete(double percent)", "class_method_signature": "Task.setPercentComplete(double percent)", "testcase": false, "constructor": false}, {"identifier": "addSubtask", "parameters": "(Task subtask)", "modifiers": "public", "return": "void", "signature": "void addSubtask(Task subtask)", "full_signature": "public void addSubtask(Task subtask)", "class_method_signature": "Task.addSubtask(Task subtask)", "testcase": false, "constructor": false}, {"identifier": "removeSubtask", "parameters": "(Task subtask)", "modifiers": "public", "return": "void", "signature": "void removeSubtask(Task subtask)", "full_signature": "public void removeSubtask(Task subtask)", "class_method_signature": "Task.removeSubtask(Task subtask)", "testcase": false, "constructor": false}, {"identifier": "getSubtaskCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSubtaskCount()", "full_signature": "public int getSubtaskCount()", "class_method_signature": "Task.getSubtaskCount()", "testcase": false, "constructor": false}, {"identifier": "getSubtask", "parameters": "(int index)", "modifiers": "public", "return": "Task", "signature": "Task getSubtask(int index)", "full_signature": "public Task getSubtask(int index)", "class_method_signature": "Task.getSubtask(int index)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "public boolean equals(Object object)", "class_method_signature": "Task.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "Task.clone()", "testcase": false, "constructor": false}], "file": "source/org/jfree/data/gantt/Task.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object object)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (!(object instanceof Task)) {\n            return false;\n        }\n        Task that = (Task) object;\n        if (!ObjectUtilities.equal(this.description, that.description)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.duration, that.duration)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.percentComplete,\n                that.percentComplete)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.subtasks, that.subtasks)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object object)", "full_signature": "public boolean equals(Object object)", "class_method_signature": "Task.equals(Object object)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equal", "equal"]}, "repository": {"repo_id": "Chart_1_buggy"}}