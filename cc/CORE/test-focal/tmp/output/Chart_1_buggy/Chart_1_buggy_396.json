{"test_class": {"identifier": "QuarterDateFormatTests", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "tests/org/jfree/chart/axis/junit/QuarterDateFormatTests.java"}, "test_case": {"identifier": "testCloning", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void testCloning() {\n        QuarterDateFormat qf1 = new QuarterDateFormat(TimeZone.getTimeZone(\n                \"GMT\"), new String[] {\"1\", \"2\", \"3\", \"4\"});\n        QuarterDateFormat qf2 = null;\n        qf2 = (QuarterDateFormat) qf1.clone();\n        assertTrue(qf1 != qf2);\n        assertTrue(qf1.getClass() == qf2.getClass());\n        assertTrue(qf1.equals(qf2));\n    }", "signature": "void testCloning()", "full_signature": "public void testCloning()", "class_method_signature": "QuarterDateFormatTests.testCloning()", "testcase": true, "constructor": false, "invocations": ["getTimeZone", "clone", "assertTrue", "assertTrue", "getClass", "getClass", "assertTrue", "equals"]}, "focal_class": {"identifier": "QuarterDateFormat", "superclass": "extends DateFormat", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -6738465248529797176L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6738465248529797176L", "var_name": "serialVersionUID"}, {"original_string": "public static final String[] REGULAR_QUARTERS = new String[] {\"1\", \"2\",\n            \"3\", \"4\"};", "modifier": "public static final", "type": "String[]", "declarator": "REGULAR_QUARTERS = new String[] {\"1\", \"2\",\n            \"3\", \"4\"}", "var_name": "REGULAR_QUARTERS"}, {"original_string": "public static final String[] ROMAN_QUARTERS  = new String[] {\"I\", \"II\",\n            \"III\", \"IV\"};", "modifier": "public static final", "type": "String[]", "declarator": "ROMAN_QUARTERS  = new String[] {\"I\", \"II\",\n            \"III\", \"IV\"}", "var_name": "ROMAN_QUARTERS"}, {"original_string": "public static final String[] GREEK_QUARTERS = new String[] {\"\\u0391\",\n            \"\\u0392\", \"\\u0393\", \"\\u0394\"};", "modifier": "public static final", "type": "String[]", "declarator": "GREEK_QUARTERS = new String[] {\"\\u0391\",\n            \"\\u0392\", \"\\u0393\", \"\\u0394\"}", "var_name": "GREEK_QUARTERS"}, {"original_string": "private String[] quarters = REGULAR_QUARTERS;", "modifier": "private", "type": "String[]", "declarator": "quarters = REGULAR_QUARTERS", "var_name": "quarters"}, {"original_string": "private boolean quarterFirst;", "modifier": "private", "type": "boolean", "declarator": "quarterFirst", "var_name": "quarterFirst"}], "methods": [{"identifier": "QuarterDateFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuarterDateFormat()", "full_signature": "public  QuarterDateFormat()", "class_method_signature": "QuarterDateFormat.QuarterDateFormat()", "testcase": false, "constructor": true}, {"identifier": "QuarterDateFormat", "parameters": "(TimeZone zone)", "modifiers": "public", "return": "", "signature": " QuarterDateFormat(TimeZone zone)", "full_signature": "public  QuarterDateFormat(TimeZone zone)", "class_method_signature": "QuarterDateFormat.QuarterDateFormat(TimeZone zone)", "testcase": false, "constructor": true}, {"identifier": "QuarterDateFormat", "parameters": "(TimeZone zone, String[] quarterSymbols)", "modifiers": "public", "return": "", "signature": " QuarterDateFormat(TimeZone zone, String[] quarterSymbols)", "full_signature": "public  QuarterDateFormat(TimeZone zone, String[] quarterSymbols)", "class_method_signature": "QuarterDateFormat.QuarterDateFormat(TimeZone zone, String[] quarterSymbols)", "testcase": false, "constructor": true}, {"identifier": "QuarterDateFormat", "parameters": "(TimeZone zone, String[] quarterSymbols,\n            boolean quarterFirst)", "modifiers": "public", "return": "", "signature": " QuarterDateFormat(TimeZone zone, String[] quarterSymbols,\n            boolean quarterFirst)", "full_signature": "public  QuarterDateFormat(TimeZone zone, String[] quarterSymbols,\n            boolean quarterFirst)", "class_method_signature": "QuarterDateFormat.QuarterDateFormat(TimeZone zone, String[] quarterSymbols,\n            boolean quarterFirst)", "testcase": false, "constructor": true}, {"identifier": "format", "parameters": "(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer format(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "full_signature": "public StringBuffer format(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "class_method_signature": "QuarterDateFormat.format(Date date, StringBuffer toAppendTo,\n                               FieldPosition fieldPosition)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String source, ParsePosition pos)", "modifiers": "public", "return": "Date", "signature": "Date parse(String source, ParsePosition pos)", "full_signature": "public Date parse(String source, ParsePosition pos)", "class_method_signature": "QuarterDateFormat.parse(String source, ParsePosition pos)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "QuarterDateFormat.equals(Object obj)", "testcase": false, "constructor": false}], "file": "source/org/jfree/chart/axis/QuarterDateFormat.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof QuarterDateFormat)) {\n            return false;\n        }\n        QuarterDateFormat that = (QuarterDateFormat) obj;\n        if (!Arrays.equals(this.quarters, that.quarters)) {\n            return false;\n        }\n        if (this.quarterFirst != that.quarterFirst) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "QuarterDateFormat.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals"]}, "repository": {"repo_id": "Chart_1_buggy"}}